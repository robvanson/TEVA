/* C const char string with Praat script
 * Generated automatically
 * For license, see Praat script text
 *
 */

static char32_t myDemoScript [] = U""
"\n"
"build_SHA$ = \"479BC911BD 2024-08-26T09:49:39Z\"\n"
"#\n"
"# TEVA 1.1\n"
"# \n"
"# Master Praat script\n"
"#\n"
"#     TEVA: main.praat is the master GUI of TEVA\n"
"#     It is written in Praat script for the demo window \n"
"#     \n"
"#     Copyright (C) 2010-2012  R.J.J.H. van Son and the Netherlands Cancer Institute\n"
"# \n"
"#     This program is free software; you can redistribute it and/or modify\n"
"#     it under the terms of the GNU General Public License as published by\n"
"#     the Free Software Foundation; either version 2 of the License, or\n"
"#     (at your option) any later version.\n"
"# \n"
"#     This program is distributed in the hope that it will be useful,\n"
"#     but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"#     GNU General Public License for more details.\n"
"# \n"
"#     You should have received a copy of the GNU General Public License\n"
"#     along with this program; if not, write to the Free Software\n"
"#     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA\n"
"# \n"
"\n"
"te.recordingMode = 0\n"
"if te.recordingMode\n"
"	demoAppName$ = \"RecTEVA\"\n"
"else\n"
"	demoAppName$ = \"TEVA\"\n"
"endif\n"
"\n"
"# Define variable that might be reset in Initialise*.praat\n"
"if not variableExists(\"build_SHA$\")\n"
"	build_SHA$ = \"-\"\n"
"endif\n"
"\n"
"# The standard Main Page layout\n"
"buttonsFileName$ = \"MainPage\"\n"
"\n"
"# These are simply \"useful\" defaults\n"
"if build_SHA$ = \"-\"\n"
"	localTableDir$ = \"Data\"\n"
"else\n"
"	localTableDir$ = \"\"\n"
"endif\n"
"buttonsTableName$ = \"MainPage\"\n"
"configTableName$ = \"Config\"\n"
"feedbackTablePrefix$ = \"Feedback\"\n"
"feedbackTableName$ = \"\"\n"
"printsignalTablePrefix$ = \"PrintSignal\"\n"
"printsignalTableName$ = \"\"\n"
"te.buttons$ = \"\"\n"
"te.config$ = \"\"\n"
"recordedSound$ = \"\"\n"
"alertText$ = \"\"\n"
"config.input$ = \"Microphone\"\n"
"config.ratingForm$ = \"Vowel\"\n"
"config.vasScaleTicks = 0\n"
"te.recordingTimeStamp$ = \"\"\n"
"te.currentFileName$ = \"\"\n"
"te.saveAudio = 0\n"
"te.openSound = 0\n"
"te.originalRecording = 0\n"
"te.source = 0\n"
"te.spectrogram = 0\n"
"te.harmonicity = 0\n"
"te.gneSound = 0\n"
"te.pitch = 0\n"
"te.formant = 0\n"
"te.ratingTable = -1\n"
"te.rating$ = \"\"\n"
"te.useFullASTselection = 1\n"
"te.useAnnotationInterface = 0\n"
"te.defaultLanguage$ = \"EN\"\n"
"config.rememberPreferences = 1\n"
"config.randomizeSpeakerData = 0\n"
"config.recordingTaskFile$ = \"\"\n"
"config.recordingTarget$ = \"\"\n"
"config.recordingScreen$ = \"\"\n"
"te.recordingTaskTable = 0\n"
"te.restartRecordingTask = 0\n"
"te.waitRecordingTask = 1\n"
"\n"
"# Pop-Up window and other colors\n"
"popUp.bordercolor$ = \"{0.5,0.5,1}\"\n"
"popUp.backgroundcolor$ = \"{0.9,0.9,1}\"\n"
"popUp.warncolor$ = \"{1,0.9,0.9}\"\n"
"popUp.gocolor$ = \"{0.9,1,0.9}\"\n"
"\n"
"# Voicing markers\n"
"te.voicingcolor$ = \"{0.3, 0.3, 0.9}\"\n"
"\n"
"# If running in a packed script binary\n"
"if index_regex(preferencesDirectory$, \"(?i'demoAppName$')$\")\n"
"	preferencesAppDir$ = preferencesDirectory$\n"
"elsif index_regex(preferencesDirectory$, \"[pP]raat(\\-dir| Prefs)?$\")\n"
"	# If running as a Praat script, create a new preferences directory\n"
"	if unix\n"
"		preferencesAppDir$ = \"'preferencesDirectory$'/../.'demoAppName$'\"\n"
"	else\n"
"		preferencesAppDir$ = \"'preferencesDirectory$'/../'demoAppName$'\"\n"
"	endif\n"
"else\n"
"	# Make a subdirectory in the current preferences directory\n"
"	preferencesAppDir$ = \"'preferencesDirectory$'/'demoAppName$'\"\n"
"endif\n"
"\n"
"wipeFeedbackArea$ = \"\"\n"
"te.recordingSampleFrequency = 44100\n"
"te.defaultSampleFreq = 22050\n"
"config.frequency = 1000\n"
"config.showFormants = 0\n"
"config.speakerSerial$ = \"None\"\n"
"config.saveAll = 0\n"
"config.autoSelect = 0\n"
"config.calcGNE = 0\n"
"te.calcLowHighHNR = 0\n"
"config.selectionWindow = 2.0\n"
"config.muteOutput = 0\n"
"\n"
"# Parameters for isolating recorded speech from noise\n"
"# Should be mostly left alone unless you are using ultra clean\n"
"# or very noisy recordings\n"
"noiseThresshold = -30\n"
"minimumPitch = 60\n"
"soundMargin = 0.25\n"
"minimumIntensity = 30\n"
"\n"
"# Set up button height\n"
"buttonbevel = 0\n"
"\n"
"# Define canvas\n"
"viewportMargin = 5\n"
"defaultFontSize = 12\n"
"defaultFont$ = \"Helvetica\"\n"
"defaultFontColor$ = \"Black\"\n"
"defaultLineWidth = 1\n"
"recordingLightX = 0\n"
"recordingLightY = 100\n"
"printerName$ = \"BHK301\"\n"
"printerPresets$ = \"Standard\"\n"
"\n"
"##########################################################\n"
"# \n"
"# Setup for alternative Recording layout for the Main Page\n"
"# \n"
"##########################################################\n"
"if te.recordingMode\n"
"	buttonsFileName$ = \"RecPage\"\n"
"	config.speakerSerial$ = \"Forw\"\n"
"	config.recordingTaskFile$ = \"[#a as in %%hat%<newline>##ee# as in %%heed%<newline>##oo# as in %%hood%]\"\n"
"	config.recordingTarget$ = \"'homeDirectory$'/Desktop\"\n"
"endif\n"
"\n"
"##########################################################\n"
"# \n"
"# This is the actual code run at startup\n"
"# \n"
"##########################################################\n"
"# This has to be initialized very early because of loading of automatic experiments\n"
"mainPage.outputPraatObject$ = \"Draw\"\n"
"\n"
"# Load supporting scripts\n"
"# Include tables in script format (always needed)\n"
"# CreateTables.praat\n"
"# \n"
"# Automatically created code!\n"
"# Any changes will be lost when this file is regenerated.\n"
"# Adapt the original Tables instead of this code.\n"
"# To regenerate the original Tables, run a Praat script\n"
"# with the following code:\n"
"# \n"
"#: include tables2scripts.praat\n"
"#: call Create<TableName>\n"
"#: Write to table file... <TableName>.Table\n"
"# \n"
"# Where <TableName> is the name of the table.\n"
"# Move the Table file to the desired location (eg, Data/)\n"
"# \n"
"# Tables and this code are licensed under the GNU GPL version 2\n"
"# or later.\n"
"# \n"
"\n"
"procCreateBackground$ = \"Background\"\n"
"procedure CreateBackground\n"
"	Create Table with column names... Background 11\n"
"	... font size align colour text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 font Helvetica\n"
"	Set string value... 1 size 96\n"
"	Set string value... 1 align centre\n"
"	Set string value... 1 colour {0.9,0.9,0.9}\n"
"	Set string value... 1 text  \n"
"	# Row 2\n"
"	Set string value... 2 font !demo command\n"
"	Set string value... 2 size 0\n"
"	Set string value... 2 align -\n"
"	Set string value... 2 colour {0.9,0.7,0.7}\n"
"	Set string value... 2 text Line width... 5\n"
"	# Row 3\n"
"	Set string value... 3 font !demo command\n"
"	Set string value... 3 size 0\n"
"	Set string value... 3 align -\n"
"	Set string value... 3 colour {0.9,0.7,0.7}\n"
"	Set string value... 3 text Draw line... 10 [[{YTEXT$} + 1.4*{DY$}]] 75 [[{YTEXT$} + 1.4*{DY$}]]\n"
"	# Row 4\n"
"	Set string value... 4 font !demo command\n"
"	Set string value... 4 size 0\n"
"	Set string value... 4 align -\n"
"	Set string value... 4 colour {0.9,0.9,0.9}\n"
"	Set string value... 4 text Line width... 1\n"
"	# Row 5\n"
"	Set string value... 5 font Helvetica\n"
"	Set string value... 5 size 96\n"
"	Set string value... 5 align centre\n"
"	Set string value... 5 colour {0.9,0.9,0.9}\n"
"	Set string value... 5 text NKI       \n"
"	# Row 6\n"
"	Set string value... 6 font Helvetica\n"
"	Set string value... 6 size 96\n"
"	Set string value... 6 align centre\n"
"	Set string value... 6 colour {0.9,0.9,0.9}\n"
"	Set string value... 6 text TE-VOICE ANALYSIS       \n"
"	# Row 7\n"
"	Set string value... 7 font Helvetica\n"
"	Set string value... 7 size 84\n"
"	Set string value... 7 align centre\n"
"	Set string value... 7 colour {0.9,0.9,0.9}\n"
"	Set string value... 7 text TOOL       \n"
"	# Row 8\n"
"	Set string value... 8 font !demo command\n"
"	Set string value... 8 size 0\n"
"	Set string value... 8 align -\n"
"	Set string value... 8 colour {0.9,0.7,0.7}\n"
"	Set string value... 8 text Line width... 5\n"
"	# Row 9\n"
"	Set string value... 9 font !demo command\n"
"	Set string value... 9 size 0\n"
"	Set string value... 9 align -\n"
"	Set string value... 9 colour {0.9,0.7,0.7}\n"
"	Set string value... 9 text Draw line... 10 [[{YTEXT$} + 1.0*{DY$}]] 75 [[{YTEXT$} + 1.0*{DY$}]]\n"
"	# Row 10\n"
"	Set string value... 10 font !demo command\n"
"	Set string value... 10 size 0\n"
"	Set string value... 10 align -\n"
"	Set string value... 10 colour {0.9,0.9,0.9}\n"
"	Set string value... 10 text Line width... 1\n"
"	# Row 11\n"
"	Set string value... 11 font Helvetica\n"
"	Set string value... 11 size 96\n"
"	Set string value... 11 align centre\n"
"	Set string value... 11 colour {0.9,0.9,0.9}\n"
"	Set string value... 11 text  \n"
"endproc\n"
"\n"
"procCreateConfig$ = \"Config\"\n"
"procedure CreateConfig\n"
"	Create Table with column names... Config 74\n"
"	... Label LeftX RightX LowY HighY Color Draw\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 LeftX 0\n"
"	Set string value... 1 RightX 0\n"
"	Set string value... 1 LowY 0\n"
"	Set string value... 1 HighY 0\n"
"	Set string value... 1 Color Black\n"
"	Set string value... 1 Draw DrawNull\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 LeftX 0\n"
"	Set string value... 2 RightX 0\n"
"	Set string value... 2 LowY 0\n"
"	Set string value... 2 HighY 0\n"
"	Set string value... 2 Color Black\n"
"	Set string value... 2 Draw DrawNull\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 LeftX 0\n"
"	Set string value... 3 RightX 0\n"
"	Set string value... 3 LowY 0\n"
"	Set string value... 3 HighY 0\n"
"	Set string value... 3 Color Black\n"
"	Set string value... 3 Draw DrawNull\n"
"	# Row 4\n"
"	Set string value... 4 Label !WindowTitle\n"
"	Set string value... 4 LeftX 0\n"
"	Set string value... 4 RightX 0\n"
"	Set string value... 4 LowY 0\n"
"	Set string value... 4 HighY 0\n"
"	Set string value... 4 Color Black\n"
"	Set string value... 4 Draw DrawNull\n"
"	# Row 5\n"
"	Set string value... 5 Label Help\n"
"	Set string value... 5 LeftX 90\n"
"	Set string value... 5 RightX +10\n"
"	Set string value... 5 LowY 90\n"
"	Set string value... 5 HighY +10\n"
"	Set string value... 5 Color Black\n"
"	Set string value... 5 Draw DrawHelp\n"
"	# Row 6\n"
"	Set string value... 6 Label Return\n"
"	Set string value... 6 LeftX 90\n"
"	Set string value... 6 RightX +10\n"
"	Set string value... 6 LowY 77.5\n"
"	Set string value... 6 HighY +10\n"
"	Set string value... 6 Color Black\n"
"	Set string value... 6 Draw DrawReturn\n"
"	# Row 7\n"
"	Set string value... 7 Label Language_EN\n"
"	Set string value... 7 LeftX 0\n"
"	Set string value... 7 RightX 15\n"
"	Set string value... 7 LowY 95\n"
"	Set string value... 7 HighY +5\n"
"	Set string value... 7 Color Black\n"
"	Set string value... 7 Draw DrawNull\n"
"	# Row 8\n"
"	Set string value... 8 Label Language_JA\n"
"	Set string value... 8 LeftX 0\n"
"	Set string value... 8 RightX 15\n"
"	Set string value... 8 LowY ^-6\n"
"	Set string value... 8 HighY +5\n"
"	Set string value... 8 Color Black\n"
"	Set string value... 8 Draw DrawNull\n"
"	# Row 9\n"
"	Set string value... 9 Label Language_DE\n"
"	Set string value... 9 LeftX 0\n"
"	Set string value... 9 RightX 15\n"
"	Set string value... 9 LowY ^-6\n"
"	Set string value... 9 HighY +5\n"
"	Set string value... 9 Color Black\n"
"	Set string value... 9 Draw DrawNull\n"
"	# Row 10\n"
"	Set string value... 10 Label Language_NL\n"
"	Set string value... 10 LeftX 0\n"
"	Set string value... 10 RightX 15\n"
"	Set string value... 10 LowY ^-6\n"
"	Set string value... 10 HighY +5\n"
"	Set string value... 10 Color Black\n"
"	Set string value... 10 Draw DrawNull\n"
"	# Row 11\n"
"	Set string value... 11 Label !Language_ES\n"
"	Set string value... 11 LeftX 0\n"
"	Set string value... 11 RightX 15\n"
"	Set string value... 11 LowY 71\n"
"	Set string value... 11 HighY +5\n"
"	Set string value... 11 Color Black\n"
"	Set string value... 11 Draw DrawNull\n"
"	# Row 12\n"
"	Set string value... 12 Label $MaxFrequency\n"
"	Set string value... 12 LeftX 20\n"
"	Set string value... 12 RightX +10\n"
"	Set string value... 12 LowY 96\n"
"	Set string value... 12 HighY +4\n"
"	Set string value... 12 Color Black\n"
"	Set string value... 12 Draw DrawNull\n"
"	# Row 13\n"
"	Set string value... 13 Label Frequency_10k\n"
"	Set string value... 13 LeftX 20\n"
"	Set string value... 13 RightX +10\n"
"	Set string value... 13 LowY 91\n"
"	Set string value... 13 HighY +5\n"
"	Set string value... 13 Color Black\n"
"	Set string value... 13 Draw DrawNull\n"
"	# Row 14\n"
"	Set string value... 14 Label Frequency_8k\n"
"	Set string value... 14 LeftX 20\n"
"	Set string value... 14 RightX +10\n"
"	Set string value... 14 LowY 85\n"
"	Set string value... 14 HighY +5\n"
"	Set string value... 14 Color Black\n"
"	Set string value... 14 Draw DrawNull\n"
"	# Row 15\n"
"	Set string value... 15 Label Frequency_5k\n"
"	Set string value... 15 LeftX 20\n"
"	Set string value... 15 RightX +10\n"
"	Set string value... 15 LowY 79\n"
"	Set string value... 15 HighY +5\n"
"	Set string value... 15 Color Black\n"
"	Set string value... 15 Draw DrawNull\n"
"	# Row 16\n"
"	Set string value... 16 Label Frequency_3k\n"
"	Set string value... 16 LeftX 20\n"
"	Set string value... 16 RightX +10\n"
"	Set string value... 16 LowY 73\n"
"	Set string value... 16 HighY +5\n"
"	Set string value... 16 Color Black\n"
"	Set string value... 16 Draw DrawNull\n"
"	# Row 17\n"
"	Set string value... 17 Label Frequency_2k\n"
"	Set string value... 17 LeftX 20\n"
"	Set string value... 17 RightX +10\n"
"	Set string value... 17 LowY 67\n"
"	Set string value... 17 HighY +5\n"
"	Set string value... 17 Color Black\n"
"	Set string value... 17 Draw DrawNull\n"
"	# Row 18\n"
"	Set string value... 18 Label Frequency_1k\n"
"	Set string value... 18 LeftX 20\n"
"	Set string value... 18 RightX +10\n"
"	Set string value... 18 LowY 61\n"
"	Set string value... 18 HighY +5\n"
"	Set string value... 18 Color Black\n"
"	Set string value... 18 Draw DrawNull\n"
"	# Row 19\n"
"	Set string value... 19 Label $Pitch\n"
"	Set string value... 19 LeftX 20\n"
"	Set string value... 19 RightX +10\n"
"	Set string value... 19 LowY 52\n"
"	Set string value... 19 HighY 57\n"
"	Set string value... 19 Color Black\n"
"	Set string value... 19 Draw DrawNull\n"
"	# Row 20\n"
"	Set string value... 20 Label Pitchalgorithm_CC300\n"
"	Set string value... 20 LeftX 20\n"
"	Set string value... 20 RightX +10\n"
"	Set string value... 20 LowY 47\n"
"	Set string value... 20 HighY 52\n"
"	Set string value... 20 Color Black\n"
"	Set string value... 20 Draw DrawNull\n"
"	# Row 21\n"
"	Set string value... 21 Label Pitchalgorithm_CC600\n"
"	Set string value... 21 LeftX 20\n"
"	Set string value... 21 RightX +10\n"
"	Set string value... 21 LowY 41\n"
"	Set string value... 21 HighY 46\n"
"	Set string value... 21 Color Black\n"
"	Set string value... 21 Draw DrawNull\n"
"	# Row 22\n"
"	Set string value... 22 Label Pitchalgorithm_VanAs\n"
"	Set string value... 22 LeftX 20\n"
"	Set string value... 22 RightX +10\n"
"	Set string value... 22 LowY 35\n"
"	Set string value... 22 HighY 40\n"
"	Set string value... 22 Color Black\n"
"	Set string value... 22 Draw DrawNull\n"
"	# Row 23\n"
"	Set string value... 23 Label $SourceText\n"
"	Set string value... 23 LeftX 20\n"
"	Set string value... 23 RightX +10\n"
"	Set string value... 23 LowY ^-10\n"
"	Set string value... 23 HighY +5\n"
"	Set string value... 23 Color Black\n"
"	Set string value... 23 Draw DrawNull\n"
"	# Row 24\n"
"	Set string value... 24 Label Source_Original\n"
"	Set string value... 24 LeftX 20\n"
"	Set string value... 24 RightX +10\n"
"	Set string value... 24 LowY ^-5\n"
"	Set string value... 24 HighY +5\n"
"	Set string value... 24 Color Black\n"
"	Set string value... 24 Draw DrawNull\n"
"	# Row 25\n"
"	Set string value... 25 Label Source_Change\n"
"	Set string value... 25 LeftX 20\n"
"	Set string value... 25 RightX +10\n"
"	Set string value... 25 LowY ^-6\n"
"	Set string value... 25 HighY +5\n"
"	Set string value... 25 Color Black\n"
"	Set string value... 25 Draw DrawNull\n"
"	# Row 26\n"
"	Set string value... 26 Label !SourceFile\n"
"	Set string value... 26 LeftX 0\n"
"	Set string value... 26 RightX 0\n"
"	Set string value... 26 LowY 0\n"
"	Set string value... 26 HighY 0\n"
"	Set string value... 26 Color Black\n"
"	Set string value... 26 Draw DrawNull\n"
"	# Row 27\n"
"	Set string value... 27 Label $AudioCollection\n"
"	Set string value... 27 LeftX 33\n"
"	Set string value... 27 RightX +14\n"
"	Set string value... 27 LowY 96\n"
"	Set string value... 27 HighY +5\n"
"	Set string value... 27 Color Black\n"
"	Set string value... 27 Draw DrawNull\n"
"	# Row 28\n"
"	Set string value... 28 Label SaveAudio\n"
"	Set string value... 28 LeftX 35\n"
"	Set string value... 28 RightX +10\n"
"	Set string value... 28 LowY ^-5\n"
"	Set string value... 28 HighY +5\n"
"	Set string value... 28 Color Black\n"
"	Set string value... 28 Draw DrawNull\n"
"	# Row 29\n"
"	Set string value... 29 Label RecordingTime\n"
"	Set string value... 29 LeftX 35\n"
"	Set string value... 29 RightX +10\n"
"	Set string value... 29 LowY ^-6\n"
"	Set string value... 29 HighY +5\n"
"	Set string value... 29 Color Black\n"
"	Set string value... 29 Draw DrawNull\n"
"	# Row 30\n"
"	Set string value... 30 Label !RecordingTaskFile\n"
"	Set string value... 30 LeftX 0\n"
"	Set string value... 30 RightX 0\n"
"	Set string value... 30 LowY 0\n"
"	Set string value... 30 HighY 0\n"
"	Set string value... 30 Color Black\n"
"	Set string value... 30 Draw DrawNull\n"
"	# Row 31\n"
"	Set string value... 31 Label !RecordingTarget\n"
"	Set string value... 31 LeftX 0\n"
"	Set string value... 31 RightX 0\n"
"	Set string value... 31 LowY 0\n"
"	Set string value... 31 HighY 0\n"
"	Set string value... 31 Color Black\n"
"	Set string value... 31 Draw DrawNull\n"
"	# Row 32\n"
"	Set string value... 32 Label !RecordingScreen\n"
"	Set string value... 32 LeftX 0\n"
"	Set string value... 32 RightX 0\n"
"	Set string value... 32 LowY 0\n"
"	Set string value... 32 HighY 0\n"
"	Set string value... 32 Color Black\n"
"	Set string value... 32 Draw DrawNull\n"
"	# Row 33\n"
"	Set string value... 33 Label $AutomaticTasks\n"
"	Set string value... 33 LeftX 35\n"
"	Set string value... 33 RightX +10\n"
"	Set string value... 33 LowY 74\n"
"	Set string value... 33 HighY +4\n"
"	Set string value... 33 Color Black\n"
"	Set string value... 33 Draw DrawNull\n"
"	# Row 34\n"
"	Set string value... 34 Label ShowFormants\n"
"	Set string value... 34 LeftX 35\n"
"	Set string value... 34 RightX +10\n"
"	Set string value... 34 LowY ^-5\n"
"	Set string value... 34 HighY +5\n"
"	Set string value... 34 Color {0.65,0.60,0.45}\n"
"	Set string value... 34 Draw DrawNull\n"
"	# Row 35\n"
"	Set string value... 35 Label AutoSelect\n"
"	Set string value... 35 LeftX 35\n"
"	Set string value... 35 RightX +10\n"
"	Set string value... 35 LowY ^-6\n"
"	Set string value... 35 HighY +5\n"
"	Set string value... 35 Color {0.65,0.60,0.45}\n"
"	Set string value... 35 Draw DrawNull\n"
"	# Row 36\n"
"	Set string value... 36 Label CalcGNE\n"
"	Set string value... 36 LeftX 35\n"
"	Set string value... 36 RightX +10\n"
"	Set string value... 36 LowY ^-6\n"
"	Set string value... 36 HighY +5\n"
"	Set string value... 36 Color {0.65,0.60,0.45}\n"
"	Set string value... 36 Draw DrawNull\n"
"	# Row 37\n"
"	Set string value... 37 Label $VoicePrint\n"
"	Set string value... 37 LeftX 35\n"
"	Set string value... 37 RightX +10\n"
"	Set string value... 37 LowY 46\n"
"	Set string value... 37 HighY +4\n"
"	Set string value... 37 Color Black\n"
"	Set string value... 37 Draw DrawNull\n"
"	# Row 38\n"
"	Set string value... 38 Label SaveFMT_EPS\n"
"	Set string value... 38 LeftX 35\n"
"	Set string value... 38 RightX +10\n"
"	Set string value... 38 LowY ^-5\n"
"	Set string value... 38 HighY +5\n"
"	Set string value... 38 Color Black\n"
"	Set string value... 38 Draw DrawNull\n"
"	# Row 39\n"
"	Set string value... 39 Label SaveFMT_PNG\n"
"	Set string value... 39 LeftX 35\n"
"	Set string value... 39 RightX +10\n"
"	Set string value... 39 LowY ^-6\n"
"	Set string value... 39 HighY +5\n"
"	Set string value... 39 Color Black\n"
"	Set string value... 39 Draw DrawNull\n"
"	# Row 40\n"
"	Set string value... 40 Label SaveFMT_PDF\n"
"	Set string value... 40 LeftX 35\n"
"	Set string value... 40 RightX +10\n"
"	Set string value... 40 LowY ^-6\n"
"	Set string value... 40 HighY +5\n"
"	Set string value... 40 Color Black\n"
"	Set string value... 40 Draw DrawNull\n"
"	# Row 41\n"
"	Set string value... 41 Label SaveAll\n"
"	Set string value... 41 LeftX 35\n"
"	Set string value... 41 RightX +10\n"
"	Set string value... 41 LowY ^-8\n"
"	Set string value... 41 HighY +5\n"
"	Set string value... 41 Color {0.6,0.55,0.4}\n"
"	Set string value... 41 Draw DrawNull\n"
"	# Row 42\n"
"	Set string value... 42 Label $SpeakerSelect\n"
"	Set string value... 42 LeftX 50\n"
"	Set string value... 42 RightX +10\n"
"	Set string value... 42 LowY 96\n"
"	Set string value... 42 HighY +4\n"
"	Set string value... 42 Color Black\n"
"	Set string value... 42 Draw DrawNull\n"
"	# Row 43\n"
"	Set string value... 43 Label SpeakerSerial_None\n"
"	Set string value... 43 LeftX 50\n"
"	Set string value... 43 RightX +10\n"
"	Set string value... 43 LowY ^-5\n"
"	Set string value... 43 HighY +5\n"
"	Set string value... 43 Color Black\n"
"	Set string value... 43 Draw DrawNull\n"
"	# Row 44\n"
"	Set string value... 44 Label SpeakerSerial_Forw\n"
"	Set string value... 44 LeftX 50\n"
"	Set string value... 44 RightX +10\n"
"	Set string value... 44 LowY ^-6\n"
"	Set string value... 44 HighY +5\n"
"	Set string value... 44 Color Black\n"
"	Set string value... 44 Draw DrawNull\n"
"	# Row 45\n"
"	Set string value... 45 Label SpeakerSerial_Backw\n"
"	Set string value... 45 LeftX 50\n"
"	Set string value... 45 RightX +10\n"
"	Set string value... 45 LowY ^-6\n"
"	Set string value... 45 HighY +5\n"
"	Set string value... 45 Color Black\n"
"	Set string value... 45 Draw DrawNull\n"
"	# Row 46\n"
"	Set string value... 46 Label !SelectionWindow\n"
"	Set string value... 46 LeftX 0\n"
"	Set string value... 46 RightX 0\n"
"	Set string value... 46 LowY 0\n"
"	Set string value... 46 HighY 0\n"
"	Set string value... 46 Color Black\n"
"	Set string value... 46 Draw DrawNull\n"
"	# Row 47\n"
"	Set string value... 47 Label $Speaker\n"
"	Set string value... 47 LeftX 50\n"
"	Set string value... 47 RightX +10\n"
"	Set string value... 47 LowY 68\n"
"	Set string value... 47 HighY +4\n"
"	Set string value... 47 Color Black\n"
"	Set string value... 47 Draw DrawNull\n"
"	# Row 48\n"
"	Set string value... 48 Label SpeakerData\n"
"	Set string value... 48 LeftX 50\n"
"	Set string value... 48 RightX +10\n"
"	Set string value... 48 LowY ^-5\n"
"	Set string value... 48 HighY +5\n"
"	Set string value... 48 Color Black\n"
"	Set string value... 48 Draw DrawNull\n"
"	# Row 49\n"
"	Set string value... 49 Label SpeakerDirectory\n"
"	Set string value... 49 LeftX 50\n"
"	Set string value... 49 RightX +10\n"
"	Set string value... 49 LowY ^-6\n"
"	Set string value... 49 HighY +5\n"
"	Set string value... 49 Color Black\n"
"	Set string value... 49 Draw DrawNull\n"
"	# Row 50\n"
"	Set string value... 50 Label SaveSpeaker\n"
"	Set string value... 50 LeftX 50\n"
"	Set string value... 50 RightX +10\n"
"	Set string value... 50 LowY ^-6\n"
"	Set string value... 50 HighY +5\n"
"	Set string value... 50 Color Black\n"
"	Set string value... 50 Draw DrawNull\n"
"	# Row 51\n"
"	Set string value... 51 Label CloseSpeaker\n"
"	Set string value... 51 LeftX 50\n"
"	Set string value... 51 RightX +10\n"
"	Set string value... 51 LowY ^-6\n"
"	Set string value... 51 HighY +5\n"
"	Set string value... 51 Color Black\n"
"	Set string value... 51 Draw DrawNull\n"
"	# Row 52\n"
"	Set string value... 52 Label SpeakerMerge\n"
"	Set string value... 52 LeftX 50\n"
"	Set string value... 52 RightX +10\n"
"	Set string value... 52 LowY ^-6\n"
"	Set string value... 52 HighY +5\n"
"	Set string value... 52 Color Black\n"
"	Set string value... 52 Draw DrawNull\n"
"	# Row 53\n"
"	Set string value... 53 Label SpeakerSort\n"
"	Set string value... 53 LeftX 50\n"
"	Set string value... 53 RightX +10\n"
"	Set string value... 53 LowY ^-6\n"
"	Set string value... 53 HighY +5\n"
"	Set string value... 53 Color Black\n"
"	Set string value... 53 Draw DrawNull\n"
"	# Row 54\n"
"	Set string value... 54 Label SpeakerRandomize\n"
"	Set string value... 54 LeftX 50\n"
"	Set string value... 54 RightX +10\n"
"	Set string value... 54 LowY ^-6\n"
"	Set string value... 54 HighY +5\n"
"	Set string value... 54 Color Black\n"
"	Set string value... 54 Draw DrawNull\n"
"	# Row 55\n"
"	Set string value... 55 Label SpeakerRevert\n"
"	Set string value... 55 LeftX 50\n"
"	Set string value... 55 RightX +10\n"
"	Set string value... 55 LowY ^-6\n"
"	Set string value... 55 HighY +5\n"
"	Set string value... 55 Color Black\n"
"	Set string value... 55 Draw DrawNull\n"
"	# Row 56\n"
"	Set string value... 56 Label ShowBackground\n"
"	Set string value... 56 LeftX 70\n"
"	Set string value... 56 RightX +15\n"
"	Set string value... 56 LowY 95\n"
"	Set string value... 56 HighY +5\n"
"	Set string value... 56 Color {0.65,0.60,0.45}\n"
"	Set string value... 56 Draw DrawNull\n"
"	# Row 57\n"
"	Set string value... 57 Label Input_Microphone\n"
"	Set string value... 57 LeftX 70\n"
"	Set string value... 57 RightX +15\n"
"	Set string value... 57 LowY 87\n"
"	Set string value... 57 HighY +5\n"
"	Set string value... 57 Color Black\n"
"	Set string value... 57 Draw DrawNull\n"
"	# Row 58\n"
"	Set string value... 58 Label Input_Line\n"
"	Set string value... 58 LeftX 70\n"
"	Set string value... 58 RightX +15\n"
"	Set string value... 58 LowY 81\n"
"	Set string value... 58 HighY +5\n"
"	Set string value... 58 Color Black\n"
"	Set string value... 58 Draw DrawNull\n"
"	# Row 59\n"
"	Set string value... 59 Label MuteOutput\n"
"	Set string value... 59 LeftX 70\n"
"	Set string value... 59 RightX +15\n"
"	Set string value... 59 LowY 74\n"
"	Set string value... 59 HighY +5\n"
"	Set string value... 59 Color {0.65,0.60,0.45}\n"
"	Set string value... 59 Draw DrawNull\n"
"	# Row 60\n"
"	Set string value... 60 Label Test\n"
"	Set string value... 60 LeftX 70\n"
"	Set string value... 60 RightX +15\n"
"	Set string value... 60 LowY 67\n"
"	Set string value... 60 HighY +5\n"
"	Set string value... 60 Color Black\n"
"	Set string value... 60 Draw DrawTest\n"
"	# Row 61\n"
"	Set string value... 61 Label $Rating\n"
"	Set string value... 61 LeftX 70\n"
"	Set string value... 61 RightX +15\n"
"	Set string value... 61 LowY 59\n"
"	Set string value... 61 HighY +5\n"
"	Set string value... 61 Color Black\n"
"	Set string value... 61 Draw DrawNull\n"
"	# Row 62\n"
"	Set string value... 62 Label RatingForm_Vowel\n"
"	Set string value... 62 LeftX 70\n"
"	Set string value... 62 RightX +15\n"
"	Set string value... 62 LowY 54\n"
"	Set string value... 62 HighY +5\n"
"	Set string value... 62 Color Black\n"
"	Set string value... 62 Draw DrawNull\n"
"	# Row 63\n"
"	Set string value... 63 Label RatingForm_Text\n"
"	Set string value... 63 LeftX 70\n"
"	Set string value... 63 RightX +15\n"
"	Set string value... 63 LowY 48\n"
"	Set string value... 63 HighY +5\n"
"	Set string value... 63 Color Black\n"
"	Set string value... 63 Draw DrawNull\n"
"	# Row 64\n"
"	Set string value... 64 Label RatingForm_INFVo\n"
"	Set string value... 64 LeftX 70\n"
"	Set string value... 64 RightX +15\n"
"	Set string value... 64 LowY 42\n"
"	Set string value... 64 HighY +5\n"
"	Set string value... 64 Color Black\n"
"	Set string value... 64 Draw DrawNull\n"
"	# Row 65\n"
"	Set string value... 65 Label RatingForm_GRBAS\n"
"	Set string value... 65 LeftX 70\n"
"	Set string value... 65 RightX +15\n"
"	Set string value... 65 LowY 36\n"
"	Set string value... 65 HighY +5\n"
"	Set string value... 65 Color Black\n"
"	Set string value... 65 Draw DrawNull\n"
"	# Row 66\n"
"	Set string value... 66 Label RatingForm_TEpair\n"
"	Set string value... 66 LeftX 70\n"
"	Set string value... 66 RightX +15\n"
"	Set string value... 66 LowY 30\n"
"	Set string value... 66 HighY +5\n"
"	Set string value... 66 Color Black\n"
"	Set string value... 66 Draw DrawNull\n"
"	# Row 67\n"
"	Set string value... 67 Label VasScaleTicks\n"
"	Set string value... 67 LeftX 70\n"
"	Set string value... 67 RightX +15\n"
"	Set string value... 67 LowY 23\n"
"	Set string value... 67 HighY +5\n"
"	Set string value... 67 Color {0.65,0.60,0.45}\n"
"	Set string value... 67 Draw DrawNull\n"
"	# Row 68\n"
"	Set string value... 68 Label Instruction\n"
"	Set string value... 68 LeftX 90\n"
"	Set string value... 68 RightX +10\n"
"	Set string value... 68 LowY 65\n"
"	Set string value... 68 HighY +10\n"
"	Set string value... 68 Color Black\n"
"	Set string value... 68 Draw DrawInstruction\n"
"	# Row 69\n"
"	Set string value... 69 Label Manual\n"
"	Set string value... 69 LeftX 90\n"
"	Set string value... 69 RightX +10\n"
"	Set string value... 69 LowY 52.5\n"
"	Set string value... 69 HighY +10\n"
"	Set string value... 69 Color Black\n"
"	Set string value... 69 Draw DrawManual\n"
"	# Row 70\n"
"	Set string value... 70 Label Credits\n"
"	Set string value... 70 LeftX 90\n"
"	Set string value... 70 RightX +10\n"
"	Set string value... 70 LowY 40\n"
"	Set string value... 70 HighY +10\n"
"	Set string value... 70 Color Black\n"
"	Set string value... 70 Draw DrawCredits\n"
"	# Row 71\n"
"	Set string value... 71 Label Refresh\n"
"	Set string value... 71 LeftX 0\n"
"	Set string value... 71 RightX 0\n"
"	Set string value... 71 LowY 0\n"
"	Set string value... 71 HighY 0\n"
"	Set string value... 71 Color Black\n"
"	Set string value... 71 Draw DrawNull\n"
"	# Row 72\n"
"	Set string value... 72 Label !Logging\n"
"	Set string value... 72 LeftX 90\n"
"	Set string value... 72 RightX +10\n"
"	Set string value... 72 LowY 0\n"
"	Set string value... 72 HighY 5\n"
"	Set string value... 72 Color Blue\n"
"	Set string value... 72 Draw DrawLogging\n"
"	# Row 73\n"
"	Set string value... 73 Label !OpenLog\n"
"	Set string value... 73 LeftX 78\n"
"	Set string value... 73 RightX 88\n"
"	Set string value... 73 LowY 0\n"
"	Set string value... 73 HighY 5\n"
"	Set string value... 73 Color Blue\n"
"	Set string value... 73 Draw DrawNull\n"
"	# Row 74\n"
"	Set string value... 74 Label !Run\n"
"	Set string value... 74 LeftX 66\n"
"	Set string value... 74 RightX 76\n"
"	Set string value... 74 LowY 0\n"
"	Set string value... 74 HighY 5\n"
"	Set string value... 74 Color Blue\n"
"	Set string value... 74 Draw DrawNull\n"
"endproc\n"
"\n"
"procCreateConfig_DE$ = \"Config_DE\"\n"
"procedure CreateConfig_DE\n"
"	Create Table with column names... Config_DE 69\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Autor\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son, \\U\"bersetzung: Irene Jacobi\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text Lizenz\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !WindowTitle\n"
"	Set string value... 4 Text NKI TE-VOICE ANALYSIS tool: Einstellungen \\a\"ndern\n"
"	Set string value... 4 Key !\n"
"	Set string value... 4 Helptext DemoVersion: Einstellungen \\a\"ndern\n"
"	# Row 5\n"
"	Set string value... 5 Label Return\n"
"	Set string value... 5 Text Zur\\u\"ck\n"
"	Set string value... 5 Key Z\n"
"	Set string value... 5 Helptext Zur\\u\"ck zur Hauptseite\n"
"	# Row 6\n"
"	Set string value... 6 Label Language_DE\n"
"	Set string value... 6 Text Deutsch\n"
"	Set string value... 6 Key D\n"
"	Set string value... 6 Helptext Deutsche Version\n"
"	# Row 7\n"
"	Set string value... 7 Label ShowBackground\n"
"	Set string value... 7 Text Hintergrund\n"
"	Set string value... 7 Key g\n"
"	Set string value... 7 Helptext Zeige Hintergrund\n"
"	# Row 8\n"
"	Set string value... 8 Label Input_Microphone\n"
"	Set string value... 8 Text Mikrofon\n"
"	Set string value... 8 Key M\n"
"	Set string value... 8 Helptext Aufnahme \\u\"ber den Mikrofoneingang\n"
"	# Row 9\n"
"	Set string value... 9 Label Input_Line\n"
"	Set string value... 9 Text Line input |\n"
"	Set string value... 9 Key |\\+\n"
"	Set string value... 9 Helptext Aufnahme \\u\"ber \"Line input\"\n"
"	# Row 10\n"
"	Set string value... 10 Label Instruction\n"
"	Set string value... 10 Text Pathologie\n"
"	Set string value... 10 Key P\n"
"	Set string value... 10 Helptext Beschreibung pathologischer Typen\n"
"	# Row 11\n"
"	Set string value... 11 Label Manual\n"
"	Set string value... 11 Text Handbuch\n"
"	Set string value... 11 Key u\n"
"	Set string value... 11 Helptext Handbuch zum Programm\n"
"	# Row 12\n"
"	Set string value... 12 Label Credits\n"
"	Set string value... 12 Text \\u\"ber\n"
"	Set string value... 12 Key bi\n"
"	Set string value... 12 Helptext Informationen zur NKI TE-VOICE ANALYSIS tool\n"
"	# Row 13\n"
"	Set string value... 13 Label Refresh\n"
"	Set string value... 13 Text Aktualisieren\n"
"	Set string value... 13 Key  \n"
"	Set string value... 13 Helptext Der aktuelle Bildschirm wird abgebildet. Mit der Leertaste kann der Bildschirm aktualisiert werden.\n"
"	# Row 14\n"
"	Set string value... 14 Label Help\n"
"	Set string value... 14 Text Hilfe\n"
"	Set string value... 14 Key ?/\n"
"	Set string value... 14 Helptext Dr\\u\"cken Sie auf den Knopf \\u\"ber den Sie Informationen m\\o\"chten. Dr\\u\"cken Sie danach auf \"Hilfe\".\n"
"	# Row 15\n"
"	Set string value... 15 Label MuteOutput\n"
"	Set string value... 15 Text Stumm [x]\n"
"	Set string value... 15 Key x\n"
"	Set string value... 15 Helptext Stummschalten, keine wiedergabe\n"
"	# Row 16\n"
"	Set string value... 16 Label Test\n"
"	Set string value... 16 Text Aufnahme testen\n"
"	Set string value... 16 Key A\n"
"	Set string value... 16 Helptext Testen Sie die Aufnahmeeinstellungen\n"
"	# Row 17\n"
"	Set string value... 17 Label $MaxFrequency\n"
"	Set string value... 17 Text Frequenz\n"
"	Set string value... 17 Key !\n"
"	Set string value... 17 Helptext H\\o\"chstfrequenz im Spektrogramm\n"
"	# Row 18\n"
"	Set string value... 18 Label Frequency_10k\n"
"	Set string value... 18 Text 10kHz\n"
"	Set string value... 18 Key 10\n"
"	Set string value... 18 Helptext Wiedergabe bis 10 kHz\n"
"	# Row 19\n"
"	Set string value... 19 Label Frequency_8k\n"
"	Set string value... 19 Text 8kHz\n"
"	Set string value... 19 Key 8\n"
"	Set string value... 19 Helptext Wiedergabe bis 8 kHz\n"
"	# Row 20\n"
"	Set string value... 20 Label Frequency_5k\n"
"	Set string value... 20 Text 5kHz\n"
"	Set string value... 20 Key 5\n"
"	Set string value... 20 Helptext Wiedergabe bis 5 kHz\n"
"	# Row 21\n"
"	Set string value... 21 Label Frequency_3k\n"
"	Set string value... 21 Text 3kHz\n"
"	Set string value... 21 Key 3\n"
"	Set string value... 21 Helptext Wiedergabe bis 3 kHz\n"
"	# Row 22\n"
"	Set string value... 22 Label Frequency_2k\n"
"	Set string value... 22 Text 2kHz\n"
"	Set string value... 22 Key 2\n"
"	Set string value... 22 Helptext Wiedergabe bis 2 kHz\n"
"	# Row 23\n"
"	Set string value... 23 Label Frequency_1k\n"
"	Set string value... 23 Text 1kHz\n"
"	Set string value... 23 Key 1\n"
"	Set string value... 23 Helptext Wiedergabe bis 1 kHz\n"
"	# Row 24\n"
"	Set string value... 24 Label $Pitch\n"
"	Set string value... 24 Text Tonh\\o\"he\n"
"	Set string value... 24 Key !\n"
"	Set string value... 24 Helptext Einstellung der Tonh\\o\"hemessung\n"
"	# Row 25\n"
"	Set string value... 25 Label Pitchalgorithm_VanAs\n"
"	Set string value... 25 Text Kompatibel\n"
"	Set string value... 25 Key !\n"
"	Set string value... 25 Helptext Einstellungen von C.J. van As 2001 \"Tracheoesophageal Speech\" p83\n"
"	# Row 26\n"
"	Set string value... 26 Label Pitchalgorithm_CC300\n"
"	Set string value... 26 Text Tief\n"
"	Set string value... 26 Key !\n"
"	Set string value... 26 Helptext Reduzierte Oktavenspr\\u\"nge, f\\u\"r normale und tiefe Stimmen (<300 Hz)\n"
"	# Row 27\n"
"	Set string value... 27 Label Pitchalgorithm_CC600\n"
"	Set string value... 27 Text Hoch\n"
"	Set string value... 27 Key !\n"
"	Set string value... 27 Helptext Reduzierte Oktavenspr\\u\"nge, f\\u\"r hohe Stimmen (<600 Hz)\n"
"	# Row 28\n"
"	Set string value... 28 Label $SourceText\n"
"	Set string value... 28 Text Stimme\n"
"	Set string value... 28 Key !\n"
"	Set string value... 28 Helptext Change speech sound source characteristics\n"
"	# Row 29\n"
"	Set string value... 29 Label Source_Original\n"
"	Set string value... 29 Text Original\n"
"	Set string value... 29 Key !\n"
"	Set string value... 29 Helptext Geh zur\\u\"k zu der Originalaufnahme\n"
"	# Row 30\n"
"	Set string value... 30 Label Source_Change\n"
"	Set string value... 30 Text Neu\n"
"	Set string value... 30 Key !\n"
"	Set string value... 30 Helptext Ersetze die Quelle der Sprache und synthetisiere die Sprache erneut\n"
"	# Row 31\n"
"	Set string value... 31 Label !SourceFile\n"
"	Set string value... 31 Text SourceFile\n"
"	Set string value... 31 Key !\n"
"	Set string value... 31 Helptext Die datei mit der Aufname der erw\\u\"nschte Quelle\n"
"	# Row 32\n"
"	Set string value... 32 Label $Speaker\n"
"	Set string value... 32 Text Sprecher\n"
"	Set string value... 32 Key !\n"
"	Set string value... 32 Helptext Tabelle mit den Sprecherdaten\n"
"	# Row 33\n"
"	Set string value... 33 Label SpeakerData\n"
"	Set string value... 33 Text Daten\n"
"	Set string value... 33 Key t\n"
"	Set string value... 33 Helptext Lese Tabelle mit den Sprecherdaten\n"
"	# Row 34\n"
"	Set string value... 34 Label SpeakerDirectory\n"
"	Set string value... 34 Text Mappe\n"
"	Set string value... 34 Key t\n"
"	Set string value... 34 Helptext Construiere eine Tabelle mit alle Aufnahmen in einer Mappe\n"
"	# Row 35\n"
"	Set string value... 35 Label SaveSpeaker\n"
"	Set string value... 35 Text Speichern\n"
"	Set string value... 35 Key S\n"
"	Set string value... 35 Helptext Speichere aktuelle Tabelle mit den Sprecherdaten\n"
"	# Row 36\n"
"	Set string value... 36 Label CloseSpeaker\n"
"	Set string value... 36 Text Schlie\\ssen\n"
"	Set string value... 36 Key l\n"
"	Set string value... 36 Helptext Schlie\\sse die aktuelle Tabelle und \\o\"fne eine lehre Tabelle f\\u\"r die Sprecherdaten\n"
"	# Row 37\n"
"	Set string value... 37 Label SpeakerMerge\n"
"	Set string value... 37 Text Kombiniere\n"
"	Set string value... 37 Key K\n"
"	Set string value... 37 Helptext Kombiniere tabelle mit Sprecherdaten\n"
"	# Row 38\n"
"	Set string value... 38 Label SpeakerRevert\n"
"	Set string value... 38 Text Gespeichert\n"
"	Set string value... 38 Key c\n"
"	Set string value... 38 Helptext Gespeicherte Version der Sprecherdaten wiederherstellen\n"
"	# Row 39\n"
"	Set string value... 39 Label $VoicePrint\n"
"	Set string value... 39 Text Voiceprint\n"
"	Set string value... 39 Key !\n"
"	Set string value... 39 Helptext Einstellungen VoicePrint Bild\n"
"	# Row 40\n"
"	Set string value... 40 Label SaveFMT_PDF\n"
"	Set string value... 40 Text PDF\n"
"	Set string value... 40 Key !\n"
"	Set string value... 40 Helptext VoicePrint als PDF Datei aufbewahren\n"
"	# Row 41\n"
"	Set string value... 41 Label SaveFMT_EPS\n"
"	Set string value... 41 Text EPS\n"
"	Set string value... 41 Key !\n"
"	Set string value... 41 Helptext VoicePrint als EPS Datei aufbewahren\n"
"	# Row 42\n"
"	Set string value... 42 Label SaveFMT_PNG\n"
"	Set string value... 42 Text PNG\n"
"	Set string value... 42 Key !\n"
"	Set string value... 42 Helptext VoicePrint als PNG Datei aufbewahren\n"
"	# Row 43\n"
"	Set string value... 43 Label SaveAll\n"
"	Set string value... 43 Text Mit Audio\n"
"	Set string value... 43 Key !\n"
"	Set string value... 43 Helptext Aufnahme zusammen mit %%Voiceprint% aufbewahren (selber Name)\n"
"	# Row 44\n"
"	Set string value... 44 Label $SpeakerSelect\n"
"	Set string value... 44 Text Verarbeitung\n"
"	Set string value... 44 Key !\n"
"	Set string value... 44 Helptext Selection und Verarbeitung von Aufnahmen\n"
"	# Row 45\n"
"	Set string value... 45 Label SpeakerSerial_None\n"
"	Set string value... 45 Text Einzeln\n"
"	Set string value... 45 Key v\n"
"	Set string value... 45 Helptext Verarbeite alle Aufnahmen einzeln\n"
"	# Row 46\n"
"	Set string value... 46 Label SpeakerSerial_Forw\n"
"	Set string value... 46 Text Seriell >\n"
"	Set string value... 46 Key .>\n"
"	Set string value... 46 Helptext Verarbeite alle Aufnahmen hintereinander (Sprecher Taste liest n\\a\"chste Aufnahme)\n"
"	# Row 47\n"
"	Set string value... 47 Label SpeakerSerial_Backw\n"
"	Set string value... 47 Text < Seriell\n"
"	Set string value... 47 Key ,<\n"
"	Set string value... 47 Helptext Verarbeite alle Aufnahmen r\\u\"ckw\\a\"rt (Sprecher Taste liest vorherige Aufnahme)\n"
"	# Row 48\n"
"	Set string value... 48 Label !SelectionWindow\n"
"	Set string value... 48 Text SelectionWindow\n"
"	Set string value... 48 Key !\n"
"	Set string value... 48 Helptext Urspr\\u\"ngliche Breite des Auswahl-Fenster (Voreinstellungen Serieller modus)\n"
"	# Row 49\n"
"	Set string value... 49 Label $AudioCollection\n"
"	Set string value... 49 Text Aufbewahren\n"
"	Set string value... 49 Key !\n"
"	Set string value... 49 Helptext Aufnahme un aufbewahren von audio\n"
"	# Row 50\n"
"	Set string value... 50 Label SaveAudio\n"
"	Set string value... 50 Text Audio\n"
"	Set string value... 50 Key !\n"
"	Set string value... 50 Helptext Audiovenster in einer Datei schreiben\n"
"	# Row 51\n"
"	Set string value... 51 Label RecordingTime\n"
"	Set string value... 51 Text Aufnahme\n"
"	Set string value... 51 Key e\n"
"	Set string value... 51 Helptext Aufnahmezeit in Secunden und  Datei mit Aufnahmeaufgaben\n"
"	# Row 52\n"
"	Set string value... 52 Label !RecordingTaskFile\n"
"	Set string value... 52 Text RecordingTaskFile\n"
"	Set string value... 52 Key !\n"
"	Set string value... 52 Helptext Die Datei mit den Aufnahmeaufgaben\n"
"	# Row 53\n"
"	Set string value... 53 Label !RecordingTarget\n"
"	Set string value... 53 Text RecordingTarget\n"
"	Set string value... 53 Key !\n"
"	Set string value... 53 Helptext Die Mappe mit den Aufnahmen\n"
"	# Row 54\n"
"	Set string value... 54 Label !RecordingScreen\n"
"	Set string value... 54 Text RecordingScreen\n"
"	Set string value... 54 Key !\n"
"	Set string value... 54 Helptext Ben\\u\"tze das Aufnahmevenster\n"
"	# Row 55\n"
"	Set string value... 55 Label $AutomaticTasks\n"
"	Set string value... 55 Text Ausf\\u\"hren\n"
"	Set string value... 55 Key !\n"
"	Set string value... 55 Helptext Ausf\\u\"hrung von zeitintensiven Aufgaben\n"
"	# Row 56\n"
"	Set string value... 56 Label ShowFormants\n"
"	Set string value... 56 Text Formante\n"
"	Set string value... 56 Key F\n"
"	Set string value... 56 Helptext Zeige Formante im Spektrogramm\n"
"	# Row 57\n"
"	Set string value... 57 Label AutoSelect\n"
"	Set string value... 57 Text AutoSelect\n"
"	Set string value... 57 Key \n"
"	Set string value... 57 Helptext W\\a\"hlen Sie das beste Intervall automatisch\n"
"	# Row 58\n"
"	Set string value... 58 Label CalcGNE\n"
"	Set string value... 58 Text GNE\n"
"	Set string value... 58 Key \n"
"	Set string value... 58 Helptext Berechne den GNE Wert\n"
"	# Row 59\n"
"	Set string value... 59 Label SpeakerSort\n"
"	Set string value... 59 Text Sortiere\n"
"	Set string value... 59 Key o\n"
"	Set string value... 59 Helptext Sortiere die Liste mit Aufnahmen\n"
"	# Row 60\n"
"	Set string value... 60 Label SpeakerRandomize\n"
"	Set string value... 60 Text Shuffle\n"
"	Set string value... 60 Key h\n"
"	Set string value... 60 Helptext Randomisiere die Liste mit Aufnahmen\n"
"	# Row 61\n"
"	Set string value... 61 Label $Rating\n"
"	Set string value... 61 Text Beurteilung\n"
"	Set string value... 61 Key \n"
"	Set string value... 61 Helptext Menschliche Beurteilung de Sprache\n"
"	# Row 62\n"
"	Set string value... 62 Label RatingForm_Vowel\n"
"	Set string value... 62 Text Vokallaut\n"
"	Set string value... 62 Key \n"
"	Set string value... 62 Helptext Beurteilungsformular f\\u\"r Vokallaute\n"
"	# Row 63\n"
"	Set string value... 63 Label RatingForm_Text\n"
"	Set string value... 63 Text Text\n"
"	Set string value... 63 Key \n"
"	Set string value... 63 Helptext Tekst Beurteilungsformular f\\u\"r W\\o\"rter und S\\a\"tze\n"
"	# Row 64\n"
"	Set string value... 64 Label RatingForm_INFVo\n"
"	Set string value... 64 Text IINFVo\n"
"	Set string value... 64 Key \n"
"	Set string value... 64 Helptext IINFVo Beurteilungsformular (Impression, Intelligibility, Noise, Fluency, Voice)\n"
"	# Row 65\n"
"	Set string value... 65 Label RatingForm_GRBAS\n"
"	Set string value... 65 Text GRBAS\n"
"	Set string value... 65 Key \n"
"	Set string value... 65 Helptext GRBAS Beurteilungsformular (Grade, Roughness, Breathiness, Asthenia, Strain)\n"
"	# Row 66\n"
"	Set string value... 66 Label VasScaleTicks\n"
"	Set string value... 66 Text Markierung\n"
"	Set string value... 66 Key \n"
"	Set string value... 66 Helptext Zeige Skalenmarkierungen in beurteilungsformular\n"
"	# Row 67\n"
"	Set string value... 67 Label !Logging\n"
"	Set string value... 67 Text Log an\n"
"	Set string value... 67 Key L\n"
"	Set string value... 67 Helptext Starte das Protokollieren aller Aufnahmen (Logbuch)\n"
"	# Row 68\n"
"	Set string value... 68 Label !OpenLog\n"
"	Set string value... 68 Text W\\a\"hlen\n"
"	Set string value... 68 Key W\n"
"	Set string value... 68 Helptext Selectiere Verzeichnis f\\u\"r die Logbuchdatei\n"
"	# Row 69\n"
"	Set string value... 69 Label !Run\n"
"	Set string value... 69 Text Ausf\\u\"hren\n"
"	Set string value... 69 Key n\n"
"	Set string value... 69 Helptext Befehlsdatei oder Logbuchdatei ausf\\u\"hren\n"
"endproc\n"
"\n"
"procCreateConfig_EN$ = \"Config_EN\"\n"
"procedure CreateConfig_EN\n"
"	Create Table with column names... Config_EN 70\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !WindowTitle\n"
"	Set string value... 4 Text NKI TE-VOICE ANALYSIS tool: Change settings\n"
"	Set string value... 4 Key !\n"
"	Set string value... 4 Helptext NKI TE-VOICE ANALYSIS tool: Change settings\n"
"	# Row 5\n"
"	Set string value... 5 Label Return\n"
"	Set string value... 5 Text Return\n"
"	Set string value... 5 Key R\n"
"	Set string value... 5 Helptext Go back to %%Main% page\n"
"	# Row 6\n"
"	Set string value... 6 Label Language_EN\n"
"	Set string value... 6 Text English\n"
"	Set string value... 6 Key E\n"
"	Set string value... 6 Helptext English language version\n"
"	# Row 7\n"
"	Set string value... 7 Label ShowBackground\n"
"	Set string value... 7 Text Background\n"
"	Set string value... 7 Key B\n"
"	Set string value... 7 Helptext Show background\n"
"	# Row 8\n"
"	Set string value... 8 Label Input_Microphone\n"
"	Set string value... 8 Text Microphone\n"
"	Set string value... 8 Key h\n"
"	Set string value... 8 Helptext Use the build-in microphone for recording\n"
"	# Row 9\n"
"	Set string value... 9 Label Input_Line\n"
"	Set string value... 9 Text Line input |\n"
"	Set string value... 9 Key |\\+\n"
"	Set string value... 9 Helptext Use the line-input for recording\n"
"	# Row 10\n"
"	Set string value... 10 Label Instruction\n"
"	Set string value... 10 Text Pathology\n"
"	Set string value... 10 Key P\n"
"	Set string value... 10 Helptext Information about pathological types\n"
"	# Row 11\n"
"	Set string value... 11 Label Manual\n"
"	Set string value... 11 Text Manual\n"
"	Set string value... 11 Key M\n"
"	Set string value... 11 Helptext Manual of the application\n"
"	# Row 12\n"
"	Set string value... 12 Label Credits\n"
"	Set string value... 12 Text About\n"
"	Set string value... 12 Key iA\n"
"	Set string value... 12 Helptext Information about NKI TE-VOICE ANALYSIS tool\n"
"	# Row 13\n"
"	Set string value... 13 Label Refresh\n"
"	Set string value... 13 Text Refresh\n"
"	Set string value... 13 Key  \n"
"	Set string value... 13 Helptext Redraw the current screen, the space-bar always refreshes screen\n"
"	# Row 14\n"
"	Set string value... 14 Label Help\n"
"	Set string value... 14 Text Help\n"
"	Set string value... 14 Key ?/\n"
"	Set string value... 14 Helptext Press the button you want information on, \"Help\" to continue\n"
"	# Row 15\n"
"	Set string value... 15 Label MuteOutput\n"
"	Set string value... 15 Text Mute [x]\n"
"	Set string value... 15 Key x\n"
"	Set string value... 15 Helptext Mute output sound\n"
"	# Row 16\n"
"	Set string value... 16 Label Test\n"
"	Set string value... 16 Text Test recording\n"
"	Set string value... 16 Key T\n"
"	Set string value... 16 Helptext Test recording level\n"
"	# Row 17\n"
"	Set string value... 17 Label $MaxFrequency\n"
"	Set string value... 17 Text Frequency\n"
"	Set string value... 17 Key !\n"
"	Set string value... 17 Helptext Highest frequency shown\n"
"	# Row 18\n"
"	Set string value... 18 Label Frequency_10k\n"
"	Set string value... 18 Text 10kHz\n"
"	Set string value... 18 Key 10\n"
"	Set string value... 18 Helptext Display up to 10 kHz\n"
"	# Row 19\n"
"	Set string value... 19 Label Frequency_8k\n"
"	Set string value... 19 Text 8kHz\n"
"	Set string value... 19 Key 8\n"
"	Set string value... 19 Helptext Display up to 8 kHz\n"
"	# Row 20\n"
"	Set string value... 20 Label Frequency_5k\n"
"	Set string value... 20 Text 5kHz\n"
"	Set string value... 20 Key 5\n"
"	Set string value... 20 Helptext Display up to 5 kHz\n"
"	# Row 21\n"
"	Set string value... 21 Label Frequency_3k\n"
"	Set string value... 21 Text 3kHz\n"
"	Set string value... 21 Key 3\n"
"	Set string value... 21 Helptext Display up to 3 kHz\n"
"	# Row 22\n"
"	Set string value... 22 Label Frequency_2k\n"
"	Set string value... 22 Text 2kHz\n"
"	Set string value... 22 Key 2\n"
"	Set string value... 22 Helptext Display up to 2 kHz\n"
"	# Row 23\n"
"	Set string value... 23 Label Frequency_1k\n"
"	Set string value... 23 Text 1kHz\n"
"	Set string value... 23 Key 1\n"
"	Set string value... 23 Helptext Display up to 1 kHz\n"
"	# Row 24\n"
"	Set string value... 24 Label $Pitch\n"
"	Set string value... 24 Text Pitch\n"
"	Set string value... 24 Key !\n"
"	Set string value... 24 Helptext Set pitch extraction algorithm\n"
"	# Row 25\n"
"	Set string value... 25 Label Pitchalgorithm_VanAs\n"
"	Set string value... 25 Text Compatible\n"
"	Set string value... 25 Key !\n"
"	Set string value... 25 Helptext Settings from C.J. van As 2001 \"Tracheoesophageal Speech\" p83\n"
"	# Row 26\n"
"	Set string value... 26 Label Pitchalgorithm_CC300\n"
"	Set string value... 26 Text Low\n"
"	Set string value... 26 Key !\n"
"	Set string value... 26 Helptext Reduced octave jumps, for normal and low pitches (<300 Hz)\n"
"	# Row 27\n"
"	Set string value... 27 Label Pitchalgorithm_CC600\n"
"	Set string value... 27 Text High\n"
"	Set string value... 27 Key !\n"
"	Set string value... 27 Helptext Reduced octave jumps, for high pitches (<600 Hz)\n"
"	# Row 28\n"
"	Set string value... 28 Label $SourceText\n"
"	Set string value... 28 Text Voice\n"
"	Set string value... 28 Key !\n"
"	Set string value... 28 Helptext Change speech sound source characteristics\n"
"	# Row 29\n"
"	Set string value... 29 Label Source_Original\n"
"	Set string value... 29 Text Original\n"
"	Set string value... 29 Key !\n"
"	Set string value... 29 Helptext Reset to original recording\n"
"	# Row 30\n"
"	Set string value... 30 Label Source_Change\n"
"	Set string value... 30 Text Change\n"
"	Set string value... 30 Key !\n"
"	Set string value... 30 Helptext Replace the source of the speech and resynthesize\n"
"	# Row 31\n"
"	Set string value... 31 Label !SourceFile\n"
"	Set string value... 31 Text SourceFile\n"
"	Set string value... 31 Key !\n"
"	Set string value... 31 Helptext The file with the selected source recording\n"
"	# Row 32\n"
"	Set string value... 32 Label $Speaker\n"
"	Set string value... 32 Text Speakers\n"
"	Set string value... 32 Key !\n"
"	Set string value... 32 Helptext Table with speaker data\n"
"	# Row 33\n"
"	Set string value... 33 Label SpeakerData\n"
"	Set string value... 33 Text Data\n"
"	Set string value... 33 Key D\n"
"	Set string value... 33 Helptext Read table with speaker data\n"
"	# Row 34\n"
"	Set string value... 34 Label SpeakerDirectory\n"
"	Set string value... 34 Text Directory\n"
"	Set string value... 34 Key y\n"
"	Set string value... 34 Helptext Create a table from all recordings in a directory\n"
"	# Row 35\n"
"	Set string value... 35 Label SaveSpeaker\n"
"	Set string value... 35 Text Save\n"
"	Set string value... 35 Key v\n"
"	Set string value... 35 Helptext Write current table with speaker data\n"
"	# Row 36\n"
"	Set string value... 36 Label CloseSpeaker\n"
"	Set string value... 36 Text Close\n"
"	Set string value... 36 Key o\n"
"	Set string value... 36 Helptext Close current table and open a new, empty table\n"
"	# Row 37\n"
"	Set string value... 37 Label SpeakerMerge\n"
"	Set string value... 37 Text Merge\n"
"	Set string value... 37 Key g\n"
"	Set string value... 37 Helptext Merge new table with current speaker data\n"
"	# Row 38\n"
"	Set string value... 38 Label SpeakerRevert\n"
"	Set string value... 38 Text Revert\n"
"	Set string value... 38 Key c\n"
"	Set string value... 38 Helptext Revert speaker data to saved version\n"
"	# Row 39\n"
"	Set string value... 39 Label $VoicePrint\n"
"	Set string value... 39 Text Voiceprint\n"
"	Set string value... 39 Key !\n"
"	Set string value... 39 Helptext Settings of VoicePrint image\n"
"	# Row 40\n"
"	Set string value... 40 Label SaveFMT_PDF\n"
"	Set string value... 40 Text PDF\n"
"	Set string value... 40 Key !\n"
"	Set string value... 40 Helptext Save VoicePrint as PDF file\n"
"	# Row 41\n"
"	Set string value... 41 Label SaveFMT_PNG\n"
"	Set string value... 41 Text PNG\n"
"	Set string value... 41 Key !\n"
"	Set string value... 41 Helptext Save VoicePrint as PNG file\n"
"	# Row 42\n"
"	Set string value... 42 Label SaveFMT_EPS\n"
"	Set string value... 42 Text EPS\n"
"	Set string value... 42 Key !\n"
"	Set string value... 42 Helptext Save VoicePrint as EPS file\n"
"	# Row 43\n"
"	Set string value... 43 Label SaveAll\n"
"	Set string value... 43 Text With audio\n"
"	Set string value... 43 Key !\n"
"	Set string value... 43 Helptext Save recordings together with %%Voiceprint% (same name, but with WAV extension)\n"
"	# Row 44\n"
"	Set string value... 44 Label $SpeakerSelect\n"
"	Set string value... 44 Text Selection\n"
"	Set string value... 44 Key !\n"
"	Set string value... 44 Helptext Selection of recordings\n"
"	# Row 45\n"
"	Set string value... 45 Label SpeakerSerial_None\n"
"	Set string value... 45 Text Individual\n"
"	Set string value... 45 Key i\n"
"	Set string value... 45 Helptext Select individual recordings\n"
"	# Row 46\n"
"	Set string value... 46 Label SpeakerSerial_Forw\n"
"	Set string value... 46 Text Serial >\n"
"	Set string value... 46 Key .>\n"
"	Set string value... 46 Helptext Step through all recordings in sequence (Speaker button reads next recording)\n"
"	# Row 47\n"
"	Set string value... 47 Label SpeakerSerial_Backw\n"
"	Set string value... 47 Text < Serial\n"
"	Set string value... 47 Key ,<\n"
"	Set string value... 47 Helptext Step through all recordings in reverse order (Speaker button reads previous recording)\n"
"	# Row 48\n"
"	Set string value... 48 Label !SelectionWindow\n"
"	Set string value... 48 Text SelectionWindow\n"
"	Set string value... 48 Key !\n"
"	Set string value... 48 Helptext Initial width of the selection window (Preferences Serial mode)\n"
"	# Row 49\n"
"	Set string value... 49 Label $AudioCollection\n"
"	Set string value... 49 Text Archive\n"
"	Set string value... 49 Key !\n"
"	Set string value... 49 Helptext Recording and collection of audio\n"
"	# Row 50\n"
"	Set string value... 50 Label SaveAudio\n"
"	Set string value... 50 Text Audio\n"
"	Set string value... 50 Key !\n"
"	Set string value... 50 Helptext Save current audio selection to file\n"
"	# Row 51\n"
"	Set string value... 51 Label RecordingTime\n"
"	Set string value... 51 Text Recording\n"
"	Set string value... 51 Key c\n"
"	Set string value... 51 Helptext Time of recording in seconds and recording tasks\n"
"	# Row 52\n"
"	Set string value... 52 Label !RecordingTaskFile\n"
"	Set string value... 52 Text RecordingTaskFile\n"
"	Set string value... 52 Key !\n"
"	Set string value... 52 Helptext File with recording tasks\n"
"	# Row 53\n"
"	Set string value... 53 Label !RecordingTarget\n"
"	Set string value... 53 Text RecordingTarget\n"
"	Set string value... 53 Key !\n"
"	Set string value... 53 Helptext Directory with the recordings\n"
"	# Row 54\n"
"	Set string value... 54 Label !RecordingScreen\n"
"	Set string value... 54 Text RecordingScreen\n"
"	Set string value... 54 Key !\n"
"	Set string value... 54 Helptext Use the recording page\n"
"	# Row 55\n"
"	Set string value... 55 Label $AutomaticTasks\n"
"	Set string value... 55 Text Execute\n"
"	Set string value... 55 Key !\n"
"	Set string value... 55 Helptext Execution of time consuming tasks\n"
"	# Row 56\n"
"	Set string value... 56 Label ShowFormants\n"
"	Set string value... 56 Text Formants\n"
"	Set string value... 56 Key F\n"
"	Set string value... 56 Helptext Draw formants in spectrogram\n"
"	# Row 57\n"
"	Set string value... 57 Label AutoSelect\n"
"	Set string value... 57 Text AutoSelect\n"
"	Set string value... 57 Key \n"
"	Set string value... 57 Helptext Select the \"best\" interval automatically\n"
"	# Row 58\n"
"	Set string value... 58 Label CalcGNE\n"
"	Set string value... 58 Text GNE\n"
"	Set string value... 58 Key \n"
"	Set string value... 58 Helptext Calculate the GNE value \n"
"	# Row 59\n"
"	Set string value... 59 Label SpeakerSort\n"
"	Set string value... 59 Text Sort V\n"
"	Set string value... 59 Key V\n"
"	Set string value... 59 Helptext Sort the list of recordings\n"
"	# Row 60\n"
"	Set string value... 60 Label SpeakerRandomize\n"
"	Set string value... 60 Text Shuffle\n"
"	Set string value... 60 Key u\n"
"	Set string value... 60 Helptext Randomize the list of recordings\n"
"	# Row 61\n"
"	Set string value... 61 Label $Rating\n"
"	Set string value... 61 Text Rating\n"
"	Set string value... 61 Key \n"
"	Set string value... 61 Helptext Human evaluation of speech\n"
"	# Row 62\n"
"	Set string value... 62 Label RatingForm_Vowel\n"
"	Set string value... 62 Text Vowels\n"
"	Set string value... 62 Key \n"
"	Set string value... 62 Helptext Evaluation form (VAS) for vowels\n"
"	# Row 63\n"
"	Set string value... 63 Label RatingForm_Text\n"
"	Set string value... 63 Text Text\n"
"	Set string value... 63 Key \n"
"	Set string value... 63 Helptext Text evaluation form (VAS) for words and running speech\n"
"	# Row 64\n"
"	Set string value... 64 Label RatingForm_INFVo\n"
"	Set string value... 64 Text IINFVo\n"
"	Set string value... 64 Key \n"
"	Set string value... 64 Helptext IINFVo evaluation form (VAS, for Impression, Intelligibility, Noise, Fluency, Voice)\n"
"	# Row 65\n"
"	Set string value... 65 Label RatingForm_GRBAS\n"
"	Set string value... 65 Text GRBAS\n"
"	Set string value... 65 Key \n"
"	Set string value... 65 Helptext GRBAS evaluation form (Grade, Roughness, Breathiness, Asthenia, Strain)\n"
"	# Row 66\n"
"	Set string value... 66 Label RatingForm_TEpair\n"
"	Set string value... 66 Text TE pair\n"
"	Set string value... 66 Key \n"
"	Set string value... 66 Helptext Pair evaluation form\n"
"	# Row 67\n"
"	Set string value... 67 Label VasScaleTicks\n"
"	Set string value... 67 Text Markers\n"
"	Set string value... 67 Key \n"
"	Set string value... 67 Helptext Display scale markers for evaluations forms\n"
"	# Row 68\n"
"	Set string value... 68 Label !Logging\n"
"	Set string value... 68 Text Log on\n"
"	Set string value... 68 Key L\n"
"	Set string value... 68 Helptext Start logging sounds\n"
"	# Row 69\n"
"	Set string value... 69 Label !OpenLog\n"
"	Set string value... 69 Text Select\n"
"	Set string value... 69 Key S\n"
"	Set string value... 69 Helptext Select directory to store the logging file\n"
"	# Row 70\n"
"	Set string value... 70 Label !Run\n"
"	Set string value... 70 Text !Run\n"
"	Set string value... 70 Key n\n"
"	Set string value... 70 Helptext !Run command file (replay Log file)\n"
"endproc\n"
"\n"
"procCreateConfig_ES$ = \"Config_ES\"\n"
"procedure CreateConfig_ES\n"
"	Create Table with column names... Config_ES 69\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son \\& Nieves Broquetas\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !WindowTitle\n"
"	Set string value... 4 Text NKI TE-VOICE ANALYSIS Herramienta: Cambiar la configuracion\n"
"	Set string value... 4 Key !\n"
"	Set string value... 4 Helptext NKI TE-VOICE ANALYSIS Herramienta: Cambiar la configuacion\n"
"	# Row 5\n"
"	Set string value... 5 Label Return\n"
"	Set string value... 5 Text Volver\n"
"	Set string value... 5 Key V\n"
"	Set string value... 5 Helptext Volver a  %%principal% pagina\n"
"	# Row 6\n"
"	Set string value... 6 Label !Language_ES\n"
"	Set string value... 6 Text Espa\\n~ol\n"
"	Set string value... 6 Key s\n"
"	Set string value... 6 Helptext Version Idioma Espa\\n~ol\n"
"	# Row 7\n"
"	Set string value... 7 Label ShowBackground\n"
"	Set string value... 7 Text Anterior\n"
"	Set string value... 7 Key A\n"
"	Set string value... 7 Helptext Mostrar anterior\n"
"	# Row 8\n"
"	Set string value... 8 Label Input_Microphone\n"
"	Set string value... 8 Text Microfono\n"
"	Set string value... 8 Key o\n"
"	Set string value... 8 Helptext Utilice el microfono configurado para la gabacion\n"
"	# Row 9\n"
"	Set string value... 9 Label Input_Line\n"
"	Set string value... 9 Text Entrada Linea |\n"
"	Set string value... 9 Key |\\+\n"
"	Set string value... 9 Helptext Utilice la entrada de la linea para la grabacion\n"
"	# Row 10\n"
"	Set string value... 10 Label Instruction\n"
"	Set string value... 10 Text Patologia\n"
"	Set string value... 10 Key P\n"
"	Set string value... 10 Helptext Informacion acerca de los tipos de patologia\n"
"	# Row 11\n"
"	Set string value... 11 Label Manual\n"
"	Set string value... 11 Text Manual\n"
"	Set string value... 11 Key M\n"
"	Set string value... 11 Helptext Manual de la aplicaci\\o'n\n"
"	# Row 12\n"
"	Set string value... 12 Label Credits\n"
"	Set string value... 12 Text Acerca\n"
"	Set string value... 12 Key i\n"
"	Set string value... 12 Helptext Informacion acerca de la herramienta NKI TE-VOICE ANALYSIS\n"
"	# Row 13\n"
"	Set string value... 13 Label Refresh\n"
"	Set string value... 13 Text Refresh\n"
"	Set string value... 13 Key  \n"
"	Set string value... 13 Helptext Redraw the current screen, the space-bar always refreshes screen\n"
"	# Row 14\n"
"	Set string value... 14 Label Help\n"
"	Set string value... 14 Text Ayuda\n"
"	Set string value... 14 Key ?/\n"
"	Set string value... 14 Helptext Presione el boton para acceder a informacion, \"Ayuda\" para continuar\n"
"	# Row 15\n"
"	Set string value... 15 Label MuteOutput\n"
"	Set string value... 15 Text Silencio [x]\n"
"	Set string value... 15 Key x\n"
"	Set string value... 15 Helptext Salida silencio sonido\n"
"	# Row 16\n"
"	Set string value... 16 Label Test\n"
"	Set string value... 16 Text Prueba grabacion\n"
"	Set string value... 16 Key r\n"
"	Set string value... 16 Helptext Prueba de nivel de grabacion\n"
"	# Row 17\n"
"	Set string value... 17 Label $MaxFrequency\n"
"	Set string value... 17 Text Frequencia\n"
"	Set string value... 17 Key !\n"
"	Set string value... 17 Helptext Frecuencias m\\a's altas mostradas\n"
"	# Row 18\n"
"	Set string value... 18 Label Frequency_10k\n"
"	Set string value... 18 Text 10kHz\n"
"	Set string value... 18 Key 0\n"
"	Set string value... 18 Helptext Pantalla hasta 10 kHz\n"
"	# Row 19\n"
"	Set string value... 19 Label Frequency_8k\n"
"	Set string value... 19 Text 8kHz\n"
"	Set string value... 19 Key 8\n"
"	Set string value... 19 Helptext Pantalla hasta 8 kHz\n"
"	# Row 20\n"
"	Set string value... 20 Label Frequency_5k\n"
"	Set string value... 20 Text 5kHz\n"
"	Set string value... 20 Key 5\n"
"	Set string value... 20 Helptext Pantalla hasta 5 kHz\n"
"	# Row 21\n"
"	Set string value... 21 Label Frequency_3k\n"
"	Set string value... 21 Text 3kHz\n"
"	Set string value... 21 Key 3\n"
"	Set string value... 21 Helptext Pantalla hasta 3 kHz\n"
"	# Row 22\n"
"	Set string value... 22 Label Frequency_2k\n"
"	Set string value... 22 Text 2kHz\n"
"	Set string value... 22 Key 2\n"
"	Set string value... 22 Helptext Pantalla hasta 2 kHz\n"
"	# Row 23\n"
"	Set string value... 23 Label Frequency_1k\n"
"	Set string value... 23 Text 1kHz\n"
"	Set string value... 23 Key 1\n"
"	Set string value... 23 Helptext Pantalla hasta 1 kHz\n"
"	# Row 24\n"
"	Set string value... 24 Label $Pitch\n"
"	Set string value... 24 Text Pitch\n"
"	Set string value... 24 Key !\n"
"	Set string value... 24 Helptext Set pitch extraction algorithm\n"
"	# Row 25\n"
"	Set string value... 25 Label Pitchalgorithm_VanAs\n"
"	Set string value... 25 Text Compatible\n"
"	Set string value... 25 Key !\n"
"	Set string value... 25 Helptext Settings from C.J. van As 2001 \"Tracheoesophageal Speech\" p83\n"
"	# Row 26\n"
"	Set string value... 26 Label Pitchalgorithm_CC300\n"
"	Set string value... 26 Text Low\n"
"	Set string value... 26 Key !\n"
"	Set string value... 26 Helptext Reduced octave jumps, for normal and low pitches (<300 Hz)\n"
"	# Row 27\n"
"	Set string value... 27 Label Pitchalgorithm_CC600\n"
"	Set string value... 27 Text High\n"
"	Set string value... 27 Key !\n"
"	Set string value... 27 Helptext Reduced octave jumps, for high pitches (<600 Hz)\n"
"	# Row 28\n"
"	Set string value... 28 Label $SourceText\n"
"	Set string value... 28 Text Voice\n"
"	Set string value... 28 Key !\n"
"	Set string value... 28 Helptext Change speech sound source characteristics\n"
"	# Row 29\n"
"	Set string value... 29 Label Source_Original\n"
"	Set string value... 29 Text Original\n"
"	Set string value... 29 Key !\n"
"	Set string value... 29 Helptext Reset to original recording\n"
"	# Row 30\n"
"	Set string value... 30 Label Source_Change\n"
"	Set string value... 30 Text Change\n"
"	Set string value... 30 Key !\n"
"	Set string value... 30 Helptext Replace the source of the speech and resynthesize\n"
"	# Row 31\n"
"	Set string value... 31 Label !SourceFile\n"
"	Set string value... 31 Text SourceFile\n"
"	Set string value... 31 Key !\n"
"	Set string value... 31 Helptext The file with the selected source recording\n"
"	# Row 32\n"
"	Set string value... 32 Label $Speaker\n"
"	Set string value... 32 Text Hablantes\n"
"	Set string value... 32 Key !\n"
"	Set string value... 32 Helptext Tabla con los datos del hablante\n"
"	# Row 33\n"
"	Set string value... 33 Label SpeakerData\n"
"	Set string value... 33 Text Datos\n"
"	Set string value... 33 Key D\n"
"	Set string value... 33 Helptext Tabla leida con los datos del hablante\n"
"	# Row 34\n"
"	Set string value... 34 Label SpeakerDirectory\n"
"	Set string value... 34 Text Directorio\n"
"	Set string value... 34 Key t\n"
"	Set string value... 34 Helptext Crear una tabla de todos los grabaciones en un directorio\n"
"	# Row 35\n"
"	Set string value... 35 Label SaveSpeaker\n"
"	Set string value... 35 Text Guardar\n"
"	Set string value... 35 Key G\n"
"	Set string value... 35 Helptext Escribir en la tabla los datos del hablante\n"
"	# Row 36\n"
"	Set string value... 36 Label CloseSpeaker\n"
"	Set string value... 36 Text Cerrar\n"
"	Set string value... 36 Key C\n"
"	Set string value... 36 Helptext Cerrar tabla actual y abrir una nueva y vac\\i'a\n"
"	# Row 37\n"
"	Set string value... 37 Label SpeakerMerge\n"
"	Set string value... 37 Text Mezclar\n"
"	Set string value... 37 Key z\n"
"	Set string value... 37 Helptext Mezclar nueva tabla con datos actuales del hablante\n"
"	# Row 38\n"
"	Set string value... 38 Label SpeakerRevert\n"
"	Set string value... 38 Text Volver habl\n"
"	Set string value... 38 Key h\n"
"	Set string value... 38 Helptext Volver a los datos del hablante para guardar la versi\\o'n\n"
"	# Row 39\n"
"	Set string value... 39 Label $VoicePrint\n"
"	Set string value... 39 Text Voiceprint\n"
"	Set string value... 39 Key !\n"
"	Set string value... 39 Helptext Settings of VoicePrint image\n"
"	# Row 40\n"
"	Set string value... 40 Label SaveFMT_PDF\n"
"	Set string value... 40 Text PDF\n"
"	Set string value... 40 Key !\n"
"	Set string value... 40 Helptext Save VoicePrint as PDF file\n"
"	# Row 41\n"
"	Set string value... 41 Label SaveFMT_EPS\n"
"	Set string value... 41 Text EPS\n"
"	Set string value... 41 Key !\n"
"	Set string value... 41 Helptext Save VoicePrint as EPS file\n"
"	# Row 42\n"
"	Set string value... 42 Label SaveFMT_PNG\n"
"	Set string value... 42 Text PNG\n"
"	Set string value... 42 Key !\n"
"	Set string value... 42 Helptext Save VoicePrint as PNG file\n"
"	# Row 43\n"
"	Set string value... 43 Label SaveAll\n"
"	Set string value... 43 Text With audio\n"
"	Set string value... 43 Key !\n"
"	Set string value... 43 Helptext Save recordings together with %%Voiceprint% (same name, but with WAV extension)\n"
"	# Row 44\n"
"	Set string value... 44 Label $AudioCollection\n"
"	Set string value... 44 Text Archive\n"
"	Set string value... 44 Key !\n"
"	Set string value... 44 Helptext Recording and collection of audio\n"
"	# Row 45\n"
"	Set string value... 45 Label SaveAudio\n"
"	Set string value... 45 Text Audio\n"
"	Set string value... 45 Key !\n"
"	Set string value... 45 Helptext Save current audio selection to file\n"
"	# Row 46\n"
"	Set string value... 46 Label RecordingTime\n"
"	Set string value... 46 Text Grabaci\\o'n\n"
"	Set string value... 46 Key b\n"
"	Set string value... 46 Helptext Tiempo de gravaci\\o'n en segundos and recording tasks\n"
"	# Row 47\n"
"	Set string value... 47 Label $SpeakerSelect\n"
"	Set string value... 47 Text Selection\n"
"	Set string value... 47 Key !\n"
"	Set string value... 47 Helptext Selection of recordings\n"
"	# Row 48\n"
"	Set string value... 48 Label SpeakerSerial_None\n"
"	Set string value... 48 Text Individual\n"
"	Set string value... 48 Key l\n"
"	Set string value... 48 Helptext Select individual recordings\n"
"	# Row 49\n"
"	Set string value... 49 Label SpeakerSerial_Forw\n"
"	Set string value... 49 Text Series >\n"
"	Set string value... 49 Key .>\n"
"	Set string value... 49 Helptext Acceder a todas las gabaciones en secuencia (Boton del Hablante lee nueva grabacion)\n"
"	# Row 50\n"
"	Set string value... 50 Label SpeakerSerial_Backw\n"
"	Set string value... 50 Text < Series\n"
"	Set string value... 50 Key ,<\n"
"	Set string value... 50 Helptext Acceder a todas las gabaciones en secuencia (Boton del Hablante lee el grabacion anterior)\n"
"	# Row 51\n"
"	Set string value... 51 Label !SelectionWindow\n"
"	Set string value... 51 Text Seleccionar ventana\n"
"	Set string value... 51 Key !\n"
"	Set string value... 51 Helptext Extensi\\o'n inicial de la ventana seleccionada (Preferencias Serial mode)\n"
"	# Row 52\n"
"	Set string value... 52 Label $AutomaticTasks\n"
"	Set string value... 52 Text Execute\n"
"	Set string value... 52 Key !\n"
"	Set string value... 52 Helptext Execution of time consuming tasks\n"
"	# Row 53\n"
"	Set string value... 53 Label AutoSelect\n"
"	Set string value... 53 Text Autom\\a'tico\n"
"	Set string value... 53 Key u\n"
"	Set string value... 53 Helptext Seleccionar el \"mejor\" intervalo autom\\a'ticamente\n"
"	# Row 54\n"
"	Set string value... 54 Label CalcGNE\n"
"	Set string value... 54 Text GNE\n"
"	Set string value... 54 Key \n"
"	Set string value... 54 Helptext Calculate the GNE value \n"
"	# Row 55\n"
"	Set string value... 55 Label ShowFormants\n"
"	Set string value... 55 Text Formantes\n"
"	Set string value... 55 Key F\n"
"	Set string value... 55 Helptext Dibujo de formantes en el espectograma\n"
"	# Row 56\n"
"	Set string value... 56 Label SpeakerSort\n"
"	Set string value... 56 Text Tipo V\n"
"	Set string value... 56 Key V\n"
"	Set string value... 56 Helptext Clasificar la lista de grabaciones\n"
"	# Row 57\n"
"	Set string value... 57 Label SpeakerRandomize\n"
"	Set string value... 57 Text Arrastrar\n"
"	Set string value... 57 Key !\n"
"	Set string value... 57 Helptext Aleatorizar lista de grabaciones\n"
"	# Row 58\n"
"	Set string value... 58 Label !RecordingTaskFile\n"
"	Set string value... 58 Text RecordingTaskFile\n"
"	Set string value... 58 Key !\n"
"	Set string value... 58 Helptext File with recording tasks\n"
"	# Row 59\n"
"	Set string value... 59 Label !RecordingTarget\n"
"	Set string value... 59 Text RecordingTarget\n"
"	Set string value... 59 Key !\n"
"	Set string value... 59 Helptext Directory with the recordings\n"
"	# Row 60\n"
"	Set string value... 60 Label !RecordingScreen\n"
"	Set string value... 60 Text RecordingScreen\n"
"	Set string value... 60 Key !\n"
"	Set string value... 60 Helptext Use the recording page\n"
"	# Row 61\n"
"	Set string value... 61 Label $Rating\n"
"	Set string value... 61 Text Valoraci\\o'n\n"
"	Set string value... 61 Key \n"
"	Set string value... 61 Helptext Valoraci\\o'n humana del habla\n"
"	# Row 62\n"
"	Set string value... 62 Label RatingForm_Vowel\n"
"	Set string value... 62 Text Vocales\n"
"	Set string value... 62 Key \n"
"	Set string value... 62 Helptext Formulario de evaluaci\\o'n (VAS) de vocales\n"
"	# Row 63\n"
"	Set string value... 63 Label RatingForm_Text\n"
"	Set string value... 63 Text Text\n"
"	Set string value... 63 Key \n"
"	Set string value... 63 Helptext Text evaluation form (VAS) for words and running speech\n"
"	# Row 64\n"
"	Set string value... 64 Label RatingForm_INFVo\n"
"	Set string value... 64 Text IINFVo\n"
"	Set string value... 64 Key \n"
"	Set string value... 64 Helptext IINFVo evaluation form (VAS, for Impression, Intelligibility, Noise, Fluency, Voice)\n"
"	# Row 65\n"
"	Set string value... 65 Label RatingForm_GRBAS\n"
"	Set string value... 65 Text GRBAS\n"
"	Set string value... 65 Key \n"
"	Set string value... 65 Helptext GRBAS evaluation form (Grade, Roughness, Breathiness, Asthenia, Strain)\n"
"	# Row 66\n"
"	Set string value... 66 Label VasScaleTicks\n"
"	Set string value... 66 Text Registros\n"
"	Set string value... 66 Key !\n"
"	Set string value... 66 Helptext Visualizar registros de escalas para formularios de evaluaci\\o'n\n"
"	# Row 67\n"
"	Set string value... 67 Label !Logging\n"
"	Set string value... 67 Text Entrar\n"
"	Set string value... 67 Key !\n"
"	Set string value... 67 Helptext Iniciar regitro de sonidos\n"
"	# Row 68\n"
"	Set string value... 68 Label !OpenLog\n"
"	Set string value... 68 Text Seleccionar\n"
"	Set string value... 68 Key !\n"
"	Set string value... 68 Helptext Seleccionar directorio para guardar los archivos de registro\n"
"	# Row 69\n"
"	Set string value... 69 Label !Run\n"
"	Set string value... 69 Text Arrancar\n"
"	Set string value... 69 Key !\n"
"	Set string value... 69 Helptext Arrancar orden de archivo (repetir archivo de registro)\n"
"endproc\n"
"\n"
"procCreateConfig_JA$ = \"Config_JA\"\n"
"procedure CreateConfig_JA\n"
"	Create Table with column names... Config_JA 69\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text 著者\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son, translation: Akiko Kanezaki\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text 著作権\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\& the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text ライセンス\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !WindowTitle\n"
"	Set string value... 4 Text NKI TE-VOICE ANALYSIS tool: 設定を変える\n"
"	Set string value... 4 Key !\n"
"	Set string value... 4 Helptext NKI TE-VOICE ANALYSIS tool: Change settings\n"
"	# Row 5\n"
"	Set string value... 5 Label Return\n"
"	Set string value... 5 Text リターン\n"
"	Set string value... 5 Key R\n"
"	Set string value... 5 Helptext %%Main% メインページへ戻る\n"
"	# Row 6\n"
"	Set string value... 6 Label Language_JA\n"
"	Set string value... 6 Text 日本語\n"
"	Set string value... 6 Key E\n"
"	Set string value... 6 Helptext 日本語版\n"
"	# Row 7\n"
"	Set string value... 7 Label ShowBackground\n"
"	Set string value... 7 Text 背景\n"
"	Set string value... 7 Key B\n"
"	Set string value... 7 Helptext 背景を表示\n"
"	# Row 8\n"
"	Set string value... 8 Label Input_Microphone\n"
"	Set string value... 8 Text マイク\n"
"	Set string value... 8 Key h\n"
"	Set string value... 8 Helptext 内蔵型マイクを録音に使用する\n"
"	# Row 9\n"
"	Set string value... 9 Label Input_Line\n"
"	Set string value... 9 Text インプットライン \n"
"	Set string value... 9 Key |\\+\n"
"	Set string value... 9 Helptext インプットラインを録音に使用する\n"
"	# Row 10\n"
"	Set string value... 10 Label Instruction\n"
"	Set string value... 10 Text 病理\n"
"	Set string value... 10 Key P\n"
"	Set string value... 10 Helptext 病理タイプについての情報\n"
"	# Row 11\n"
"	Set string value... 11 Label Manual\n"
"	Set string value... 11 Text マニュアル\n"
"	Set string value... 11 Key M\n"
"	Set string value... 11 Helptext アプリケーションマニュアル\n"
"	# Row 12\n"
"	Set string value... 12 Label Credits\n"
"	Set string value... 12 Text TEVAについて\n"
"	Set string value... 12 Key iA\n"
"	Set string value... 12 Helptext オランダがんセンター音声分析ツールについて\n"
"	# Row 13\n"
"	Set string value... 13 Label Refresh\n"
"	Set string value... 13 Text リフレッシュ\n"
"	Set string value... 13 Key \n"
"	Set string value... 13 Helptext 現在のスクリーンを再描画します,スペースバーは常に画面をリフレッシュします\n"
"	# Row 14\n"
"	Set string value... 14 Label Help\n"
"	Set string value... 14 Text ヘルプ\n"
"	Set string value... 14 Key ?/\n"
"	Set string value... 14 Helptext 知りたい情報があればヘルプボタンを押して下さい\n"
"	# Row 15\n"
"	Set string value... 15 Label MuteOutput\n"
"	Set string value... 15 Text 消音 [x]\n"
"	Set string value... 15 Key x\n"
"	Set string value... 15 Helptext 音声を消す\n"
"	# Row 16\n"
"	Set string value... 16 Label Test\n"
"	Set string value... 16 Text テスト録音\n"
"	Set string value... 16 Key T\n"
"	Set string value... 16 Helptext テスト録音レベル\n"
"	# Row 17\n"
"	Set string value... 17 Label $MaxFrequency\n"
"	Set string value... 17 Text 周波数\n"
"	Set string value... 17 Key !\n"
"	Set string value... 17 Helptext 最大周波数を表示する\n"
"	# Row 18\n"
"	Set string value... 18 Label Frequency_10k\n"
"	Set string value... 18 Text 10kHz\n"
"	Set string value... 18 Key 10\n"
"	Set string value... 18 Helptext 10 kHzまでを表示する\n"
"	# Row 19\n"
"	Set string value... 19 Label Frequency_8k\n"
"	Set string value... 19 Text 8kHz\n"
"	Set string value... 19 Key 8\n"
"	Set string value... 19 Helptext 8 kHzまでを表示する\n"
"	# Row 20\n"
"	Set string value... 20 Label Frequency_5k\n"
"	Set string value... 20 Text 5kHz\n"
"	Set string value... 20 Key 5\n"
"	Set string value... 20 Helptext 5 kHzまでを表示する\n"
"	# Row 21\n"
"	Set string value... 21 Label Frequency_3k\n"
"	Set string value... 21 Text 3kHz\n"
"	Set string value... 21 Key 3\n"
"	Set string value... 21 Helptext 3 kHzまでを表示する\n"
"	# Row 22\n"
"	Set string value... 22 Label Frequency_2k\n"
"	Set string value... 22 Text 2kHz\n"
"	Set string value... 22 Key 2\n"
"	Set string value... 22 Helptext 2 kHzまでを表示する\n"
"	# Row 23\n"
"	Set string value... 23 Label Frequency_1k\n"
"	Set string value... 23 Text 1kHz\n"
"	Set string value... 23 Key 1\n"
"	Set string value... 23 Helptext 1 kHzまでを表示する\n"
"	# Row 24\n"
"	Set string value... 24 Label $Pitch\n"
"	Set string value... 24 Text ピッチ\n"
"	Set string value... 24 Key !\n"
"	Set string value... 24 Helptext ピッチからアルゴリズムを抽出する\n"
"	# Row 25\n"
"	Set string value... 25 Label Pitchalgorithm_VanAs\n"
"	Set string value... 25 Text 互換性あり\n"
"	Set string value... 25 Key !\n"
"	Set string value... 25 Helptext C.J. van As 2001 \"Tracheoesophageal Speech\" p83からの設定\n"
"	# Row 26\n"
"	Set string value... 26 Label Pitchalgorithm_CC300\n"
"	Set string value... 26 Text 低い\n"
"	Set string value... 26 Key !\n"
"	Set string value... 26 Helptext ノーマルと低いピッチの為にオクターブの飛躍を減らす (<300 Hz)\n"
"	# Row 27\n"
"	Set string value... 27 Label Pitchalgorithm_CC600\n"
"	Set string value... 27 Text 高い\n"
"	Set string value... 27 Key !\n"
"	Set string value... 27 Helptext 高いピッチの為にオクターブの飛躍を減らす (<600 Hz)\n"
"	# Row 28\n"
"	Set string value... 28 Label $SourceText\n"
"	Set string value... 28 Text Voice\n"
"	Set string value... 28 Key !\n"
"	Set string value... 28 Helptext Change speech sound source characteristics\n"
"	# Row 29\n"
"	Set string value... 29 Label Source_Original\n"
"	Set string value... 29 Text Original\n"
"	Set string value... 29 Key !\n"
"	Set string value... 29 Helptext Reset to original recording\n"
"	# Row 30\n"
"	Set string value... 30 Label Source_Change\n"
"	Set string value... 30 Text Change\n"
"	Set string value... 30 Key !\n"
"	Set string value... 30 Helptext Replace the source of the speech and resynthesize\n"
"	# Row 31\n"
"	Set string value... 31 Label !SourceFile\n"
"	Set string value... 31 Text SourceFile\n"
"	Set string value... 31 Key !\n"
"	Set string value... 31 Helptext The file with the selected source recording\n"
"	# Row 32\n"
"	Set string value... 32 Label $Speaker\n"
"	Set string value... 32 Text 話者\n"
"	Set string value... 32 Key !\n"
"	Set string value... 32 Helptext 話者データ一覧\n"
"	# Row 33\n"
"	Set string value... 33 Label SpeakerData\n"
"	Set string value... 33 Text データ\n"
"	Set string value... 33 Key D\n"
"	Set string value... 33 Helptext 話者データを読む\n"
"	# Row 34\n"
"	Set string value... 34 Label SpeakerDirectory\n"
"	Set string value... 34 Text ディレクトリ\n"
"	Set string value... 34 Key y\n"
"	Set string value... 34 Helptext ディレクトリ中の全てのデータから新しい表を作成する\n"
"	# Row 35\n"
"	Set string value... 35 Label SaveSpeaker\n"
"	Set string value... 35 Text 保存\n"
"	Set string value... 35 Key v\n"
"	Set string value... 35 Helptext 現在の表に話者データを書き込む\n"
"	# Row 36\n"
"	Set string value... 36 Label CloseSpeaker\n"
"	Set string value... 36 Text 閉じる\n"
"	Set string value... 36 Key o\n"
"	Set string value... 36 Helptext 現在の表を閉じて新規を開く\n"
"	# Row 37\n"
"	Set string value... 37 Label SpeakerMerge\n"
"	Set string value... 37 Text 併合する\n"
"	Set string value... 37 Key g\n"
"	Set string value... 37 Helptext 現在の話者データと新しい表を併合する\n"
"	# Row 38\n"
"	Set string value... 38 Label SpeakerRevert\n"
"	Set string value... 38 Text 戻る\n"
"	Set string value... 38 Key c\n"
"	Set string value... 38 Helptext 話者のデータを保存された状態に戻す\n"
"	# Row 39\n"
"	Set string value... 39 Label $VoicePrint\n"
"	Set string value... 39 Text 声紋\n"
"	Set string value... 39 Key !\n"
"	Set string value... 39 Helptext 声紋の画像設定\n"
"	# Row 40\n"
"	Set string value... 40 Label SaveFMT_PDF\n"
"	Set string value... 40 Text PDF\n"
"	Set string value... 40 Key !\n"
"	Set string value... 40 Helptext PDFファイルで声紋を保存する\n"
"	# Row 41\n"
"	Set string value... 41 Label SaveFMT_PNG\n"
"	Set string value... 41 Text PNG\n"
"	Set string value... 41 Key !\n"
"	Set string value... 41 Helptext PNGファイルで声紋を保存する\n"
"	# Row 42\n"
"	Set string value... 42 Label SaveFMT_EPS\n"
"	Set string value... 42 Text EPS\n"
"	Set string value... 42 Key !\n"
"	Set string value... 42 Helptext EPSファイルで声紋を保存する\n"
"	# Row 43\n"
"	Set string value... 43 Label SaveAll\n"
"	Set string value... 43 Text オーディオと\n"
"	Set string value... 43 Key !\n"
"	Set string value... 43 Helptext 録音を%%声紋%と一緒に保存する (同じ名前, WAV拡張で)\n"
"	# Row 44\n"
"	Set string value... 44 Label $SpeakerSelect\n"
"	Set string value... 44 Text 選択\n"
"	Set string value... 44 Key !\n"
"	Set string value... 44 Helptext 録音の選択\n"
"	# Row 45\n"
"	Set string value... 45 Label SpeakerSerial_None\n"
"	Set string value... 45 Text 個別\n"
"	Set string value... 45 Key i\n"
"	Set string value... 45 Helptext 個別の録音を選択する\n"
"	# Row 46\n"
"	Set string value... 46 Label SpeakerSerial_Forw\n"
"	Set string value... 46 Text 連続 >\n"
"	Set string value... 46 Key .>\n"
"	Set string value... 46 Helptext 順に全ての録音をステップスルー (スピーカーボタンで次の録音へ)\n"
"	# Row 47\n"
"	Set string value... 47 Label SpeakerSerial_Backw\n"
"	Set string value... 47 Text < 連続\n"
"	Set string value... 47 Key ,<\n"
"	Set string value... 47 Helptext 逆順で全ての録音をステップスルー (スピーカーボタンで前の録音へ)\n"
"	# Row 48\n"
"	Set string value... 48 Label !SelectionWindow\n"
"	Set string value... 48 Text 画面選択\n"
"	Set string value... 48 Key !\n"
"	Set string value... 48 Helptext 初期画面設定の選択(環境設定シリアルモード)\n"
"	# Row 49\n"
"	Set string value... 49 Label $AudioCollection\n"
"	Set string value... 49 Text アーカイブ\n"
"	Set string value... 49 Key !\n"
"	Set string value... 49 Helptext オーディオの録音とコレクション\n"
"	# Row 50\n"
"	Set string value... 50 Label SaveAudio\n"
"	Set string value... 50 Text オーディオ\n"
"	Set string value... 50 Key !\n"
"	Set string value... 50 Helptext 現在選択されているオーディオをファイルに保存\n"
"	# Row 51\n"
"	Set string value... 51 Label RecordingTime\n"
"	Set string value... 51 Text 録音\n"
"	Set string value... 51 Key c\n"
"	Set string value... 51 Helptext 録音時間の秒数と録音タスク\n"
"	# Row 52\n"
"	Set string value... 52 Label !RecordingTaskFile\n"
"	Set string value... 52 Text タスクファイルの録音\n"
"	Set string value... 52 Key !\n"
"	Set string value... 52 Helptext ファイルと録音タスク\n"
"	# Row 53\n"
"	Set string value... 53 Label !RecordingTarget\n"
"	Set string value... 53 Text 録音ターゲット\n"
"	Set string value... 53 Key !\n"
"	Set string value... 53 Helptext ディレクトリと録音\n"
"	# Row 54\n"
"	Set string value... 54 Label !RecordingScreen\n"
"	Set string value... 54 Text RecordingScreen\n"
"	Set string value... 54 Key !\n"
"	Set string value... 54 Helptext Use the recording page\n"
"	# Row 55\n"
"	Set string value... 55 Label $AutomaticTasks\n"
"	Set string value... 55 Text 実行\n"
"	Set string value... 55 Key !\n"
"	Set string value... 55 Helptext 時間のかかるタスクの実行\n"
"	# Row 56\n"
"	Set string value... 56 Label ShowFormants\n"
"	Set string value... 56 Text フォルマント\n"
"	Set string value... 56 Key F\n"
"	Set string value... 56 Helptext スペクトログラムのフォルマントを描出する\n"
"	# Row 57\n"
"	Set string value... 57 Label AutoSelect\n"
"	Set string value... 57 Text 自動選択\n"
"	Set string value... 57 Key \n"
"	Set string value... 57 Helptext 自動で「最適な」間隔を選択する\n"
"	# Row 58\n"
"	Set string value... 58 Label CalcGNE\n"
"	Set string value... 58 Text GNE\n"
"	Set string value... 58 Key \n"
"	Set string value... 58 Helptext GNE値を計算する\n"
"	# Row 59\n"
"	Set string value... 59 Label SpeakerSort\n"
"	Set string value... 59 Text Sort V\n"
"	Set string value... 59 Key V\n"
"	Set string value... 59 Helptext 録音リストをソートする\n"
"	# Row 60\n"
"	Set string value... 60 Label SpeakerRandomize\n"
"	Set string value... 60 Text シャッフル\n"
"	Set string value... 60 Key u\n"
"	Set string value... 60 Helptext 録音リストをランダム化する\n"
"	# Row 61\n"
"	Set string value... 61 Label $Rating\n"
"	Set string value... 61 Text 評価\n"
"	Set string value... 61 Key \n"
"	Set string value... 61 Helptext 音声のヒューマン評価\n"
"	# Row 62\n"
"	Set string value... 62 Label RatingForm_Vowel\n"
"	Set string value... 62 Text 母音\n"
"	Set string value... 62 Key \n"
"	Set string value... 62 Helptext 母音からの評価(VAS) \n"
"	# Row 63\n"
"	Set string value... 63 Label RatingForm_Text\n"
"	Set string value... 63 Text テキスト\n"
"	Set string value... 63 Key \n"
"	Set string value... 63 Helptext 単語や実行中の音声のテキスト評価フォーム（VAS)\n"
"	# Row 64\n"
"	Set string value... 64 Label RatingForm_INFVo\n"
"	Set string value... 64 Text IINFVo\n"
"	Set string value... 64 Key \n"
"	Set string value... 64 Helptext IINFVo評価フォーム (印象, 明瞭度, 雑音, 流暢さ, 声質によるVAS)\n"
"	# Row 65\n"
"	Set string value... 65 Label RatingForm_GRBAS\n"
"	Set string value... 65 Text GRBAS\n"
"	Set string value... 65 Key \n"
"	Set string value... 65 Helptext GRBAS 評価フォーム(嗄声の全般的な程度, 粗造性, 気息性, 無力性, 努力性による評価)\n"
"	# Row 66\n"
"	Set string value... 66 Label VasScaleTicks\n"
"	Set string value... 66 Text マーカー\n"
"	Set string value... 66 Key \n"
"	Set string value... 66 Helptext 評価フォームのディスプレイ尺度マーカー\n"
"	# Row 67\n"
"	Set string value... 67 Label !Logging\n"
"	Set string value... 67 Text ログオン\n"
"	Set string value... 67 Key L\n"
"	Set string value... 67 Helptext 音のログオンを開始する\n"
"	# Row 68\n"
"	Set string value... 68 Label !OpenLog\n"
"	Set string value... 68 Text 選択\n"
"	Set string value... 68 Key S\n"
"	Set string value... 68 Helptext ディレクトリを選択してログファイルを保存する\n"
"	# Row 69\n"
"	Set string value... 69 Label !Run\n"
"	Set string value... 69 Text !実行\n"
"	Set string value... 69 Key n\n"
"	Set string value... 69 Helptext !コマンドファイル実行 (ログファイルをリプレイ)\n"
"endproc\n"
"\n"
"procCreateConfig_NL$ = \"Config_NL\"\n"
"procedure CreateConfig_NL\n"
"	Create Table with column names... Config_NL 70\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !WindowTitle\n"
"	Set string value... 4 Text NKI TE-VOICE ANALYSIS tool: Instellingen aanpassen\n"
"	Set string value... 4 Key !\n"
"	Set string value... 4 Helptext NKI TE-VOICE ANALYSIS tool: Instellingen aanpassen\n"
"	# Row 5\n"
"	Set string value... 5 Label Return\n"
"	Set string value... 5 Text Terug\n"
"	Set string value... 5 Key T\n"
"	Set string value... 5 Helptext Ga terug naar de oefen pagina\n"
"	# Row 6\n"
"	Set string value... 6 Label Language_NL\n"
"	Set string value... 6 Text Nederlands\n"
"	Set string value... 6 Key N\n"
"	Set string value... 6 Helptext Gebruik Nederlands\n"
"	# Row 7\n"
"	Set string value... 7 Label ShowBackground\n"
"	Set string value... 7 Text Achtergrond\n"
"	Set string value... 7 Key A\n"
"	Set string value... 7 Helptext Toon achtergrond\n"
"	# Row 8\n"
"	Set string value... 8 Label Input_Microphone\n"
"	Set string value... 8 Text Microfoon\n"
"	Set string value... 8 Key f\n"
"	Set string value... 8 Helptext Gebruik de ingebouwde microfoon voor spraakopnamen\n"
"	# Row 9\n"
"	Set string value... 9 Label Input_Line\n"
"	Set string value... 9 Text Lijn ingang |\n"
"	Set string value... 9 Key |\\+\n"
"	Set string value... 9 Helptext Gebruik de lijn-ingang voor de spraakopnamen\n"
"	# Row 10\n"
"	Set string value... 10 Label Instruction\n"
"	Set string value... 10 Text Pathologie\n"
"	Set string value... 10 Key P\n"
"	Set string value... 10 Helptext Informatie over pathologische types\n"
"	# Row 11\n"
"	Set string value... 11 Label Manual\n"
"	Set string value... 11 Text Handleiding\n"
"	Set string value... 11 Key H\n"
"	Set string value... 11 Helptext Handleiding van de applicatie\n"
"	# Row 12\n"
"	Set string value... 12 Label Credits\n"
"	Set string value... 12 Text Over\n"
"	Set string value... 12 Key iC\n"
"	Set string value... 12 Helptext Informatie over NKI TE-VOICE ANALYSIS tool\n"
"	# Row 13\n"
"	Set string value... 13 Label Refresh\n"
"	Set string value... 13 Text Ververs\n"
"	Set string value... 13 Key  \n"
"	Set string value... 13 Helptext Ververs de huidige pagina, de spatiebalk ververst altijd de pagina\n"
"	# Row 14\n"
"	Set string value... 14 Label Help\n"
"	Set string value... 14 Text Help\n"
"	Set string value... 14 Key ?/\n"
"	Set string value... 14 Helptext klik op de knop waar u informatie over wilt hebben, \"Help\" als u verder wilt\n"
"	# Row 15\n"
"	Set string value... 15 Label MuteOutput\n"
"	Set string value... 15 Text Mute [x]\n"
"	Set string value... 15 Key x\n"
"	Set string value... 15 Helptext Geen geluidsweergave\n"
"	# Row 16\n"
"	Set string value... 16 Label Test\n"
"	Set string value... 16 Text Test opname\n"
"	Set string value... 16 Key o\n"
"	Set string value... 16 Helptext Test opname niveau\n"
"	# Row 17\n"
"	Set string value... 17 Label $MaxFrequency\n"
"	Set string value... 17 Text Frequentie\n"
"	Set string value... 17 Key !\n"
"	Set string value... 17 Helptext Hoogste frequentie\n"
"	# Row 18\n"
"	Set string value... 18 Label Frequency_10k\n"
"	Set string value... 18 Text 10kHz\n"
"	Set string value... 18 Key 10\n"
"	Set string value... 18 Helptext Ga tot 10 kHz\n"
"	# Row 19\n"
"	Set string value... 19 Label Frequency_8k\n"
"	Set string value... 19 Text 8kHz\n"
"	Set string value... 19 Key 8\n"
"	Set string value... 19 Helptext Ga tot 8 kHz\n"
"	# Row 20\n"
"	Set string value... 20 Label Frequency_5k\n"
"	Set string value... 20 Text 5kHz\n"
"	Set string value... 20 Key 5\n"
"	Set string value... 20 Helptext Ga tot 5 kHz\n"
"	# Row 21\n"
"	Set string value... 21 Label Frequency_3k\n"
"	Set string value... 21 Text 3kHz\n"
"	Set string value... 21 Key 3\n"
"	Set string value... 21 Helptext Ga tot 3 kHz\n"
"	# Row 22\n"
"	Set string value... 22 Label Frequency_2k\n"
"	Set string value... 22 Text 2kHz\n"
"	Set string value... 22 Key 2\n"
"	Set string value... 22 Helptext Ga tot 2 kHz\n"
"	# Row 23\n"
"	Set string value... 23 Label Frequency_1k\n"
"	Set string value... 23 Text 1kHz\n"
"	Set string value... 23 Key 1\n"
"	Set string value... 23 Helptext Ga tot 1 kHz\n"
"	# Row 24\n"
"	Set string value... 24 Label $Pitch\n"
"	Set string value... 24 Text Toonhoogte\n"
"	Set string value... 24 Key !\n"
"	Set string value... 24 Helptext Stel de bepaling de toonhoogtemeting in\n"
"	# Row 25\n"
"	Set string value... 25 Label Pitchalgorithm_VanAs\n"
"	Set string value... 25 Text Compatibel\n"
"	Set string value... 25 Key !\n"
"	Set string value... 25 Helptext Instellingen volgens C.J. van As 2001 \"Tracheoesophageal Speech\" p83\n"
"	# Row 26\n"
"	Set string value... 26 Label Pitchalgorithm_CC300\n"
"	Set string value... 26 Text Laag\n"
"	Set string value... 26 Key !\n"
"	Set string value... 26 Helptext Verminderde oktaafsprongen, voor normale en lage stemmen (<300 Hz)\n"
"	# Row 27\n"
"	Set string value... 27 Label Pitchalgorithm_CC600\n"
"	Set string value... 27 Text Hoog\n"
"	Set string value... 27 Key !\n"
"	Set string value... 27 Helptext Verminderde oktaafsprongen, voor hoge stemmen (<600 Hz)\n"
"	# Row 28\n"
"	Set string value... 28 Label $SourceText\n"
"	Set string value... 28 Text Stem\n"
"	Set string value... 28 Key !\n"
"	Set string value... 28 Helptext Change speech sound source characteristics\n"
"	# Row 29\n"
"	Set string value... 29 Label Source_Original\n"
"	Set string value... 29 Text Origineel\n"
"	Set string value... 29 Key !\n"
"	Set string value... 29 Helptext Terugzetten naar originele opname\n"
"	# Row 30\n"
"	Set string value... 30 Label Source_Change\n"
"	Set string value... 30 Text Nieuw\n"
"	Set string value... 30 Key !\n"
"	Set string value... 30 Helptext Vervang de bron van de spraak en synthetiseer het geluid opnieuw\n"
"	# Row 31\n"
"	Set string value... 31 Label !SourceFile\n"
"	Set string value... 31 Text SourceFile\n"
"	Set string value... 31 Key !\n"
"	Set string value... 31 Helptext Het bestand met een opname van de gewenste bron\n"
"	# Row 32\n"
"	Set string value... 32 Label $Speaker\n"
"	Set string value... 32 Text Sprekers\n"
"	Set string value... 32 Key !\n"
"	Set string value... 32 Helptext Tabel met spreker gegevens\n"
"	# Row 33\n"
"	Set string value... 33 Label SpeakerData\n"
"	Set string value... 33 Text Data\n"
"	Set string value... 33 Key D\n"
"	Set string value... 33 Helptext Lees tabel met sprekergegevens\n"
"	# Row 34\n"
"	Set string value... 34 Label SpeakerDirectory\n"
"	Set string value... 34 Text Map+\n"
"	Set string value... 34 Key +\n"
"	Set string value... 34 Helptext Maak een tabel met alle opnamen uit een map\n"
"	# Row 35\n"
"	Set string value... 35 Label SaveSpeaker\n"
"	Set string value... 35 Text Bewaar\n"
"	Set string value... 35 Key B\n"
"	Set string value... 35 Helptext Bewaar huidige tabel met sprekergegevens\n"
"	# Row 36\n"
"	Set string value... 36 Label CloseSpeaker\n"
"	Set string value... 36 Text Sluit\n"
"	Set string value... 36 Key S\n"
"	Set string value... 36 Helptext Sluit huidige tabel en open een nieuwe, lege tabel\n"
"	# Row 37\n"
"	Set string value... 37 Label SpeakerMerge\n"
"	Set string value... 37 Text Merge\n"
"	Set string value... 37 Key M\n"
"	Set string value... 37 Helptext Combineer nieuwe tabel met huidige sprekergegevens\n"
"	# Row 38\n"
"	Set string value... 38 Label SpeakerRevert\n"
"	Set string value... 38 Text Herstel\n"
"	Set string value... 38 Key #\n"
"	Set string value... 38 Helptext Herstel naar opgeslagen sprekergegevens\n"
"	# Row 39\n"
"	Set string value... 39 Label $VoicePrint\n"
"	Set string value... 39 Text Voiceprint\n"
"	Set string value... 39 Key !\n"
"	Set string value... 39 Helptext Instellingen van de VoicePrint afbeelding\n"
"	# Row 40\n"
"	Set string value... 40 Label SaveFMT_PDF\n"
"	Set string value... 40 Text PDF\n"
"	Set string value... 40 Key !\n"
"	Set string value... 40 Helptext Bewaar VoicePrint als PDF bestand\n"
"	# Row 41\n"
"	Set string value... 41 Label SaveFMT_EPS\n"
"	Set string value... 41 Text EPS\n"
"	Set string value... 41 Key !\n"
"	Set string value... 41 Helptext Bewaar VoicePrint als EPS bestand\n"
"	# Row 42\n"
"	Set string value... 42 Label SaveFMT_PNG\n"
"	Set string value... 42 Text PNG\n"
"	Set string value... 42 Key !\n"
"	Set string value... 42 Helptext Bewaar VoicePrint als PNG bestand\n"
"	# Row 43\n"
"	Set string value... 43 Label SaveAll\n"
"	Set string value... 43 Text Met audio\n"
"	Set string value... 43 Key !\n"
"	Set string value... 43 Helptext Bewaar geluidsbestand samen met %%Voiceprint% (zelfde naam, maar met WAV extensie)\n"
"	# Row 44\n"
"	Set string value... 44 Label $SpeakerSelect\n"
"	Set string value... 44 Text Verwerking\n"
"	Set string value... 44 Key !\n"
"	Set string value... 44 Helptext Selectie en verwerking van opnamen\n"
"	# Row 45\n"
"	Set string value... 45 Label SpeakerSerial_None\n"
"	Set string value... 45 Text Individueel\n"
"	Set string value... 45 Key r\n"
"	Set string value... 45 Helptext Selecteer individuele opnamen\n"
"	# Row 46\n"
"	Set string value... 46 Label SpeakerSerial_Forw\n"
"	Set string value... 46 Text Serieel >\n"
"	Set string value... 46 Key .>\n"
"	Set string value... 46 Helptext Verwerk alle opnamen in volgorde (Spreker knop leest volgende opname)\n"
"	# Row 47\n"
"	Set string value... 47 Label SpeakerSerial_Backw\n"
"	Set string value... 47 Text < Serieel\n"
"	Set string value... 47 Key ,<\n"
"	Set string value... 47 Helptext Verwerk alle opnamen in omgekeerde volgorde (Spreker knop leest vorige opname)\n"
"	# Row 48\n"
"	Set string value... 48 Label !SelectionWindow\n"
"	Set string value... 48 Text SelectionWindow\n"
"	Set string value... 48 Key !\n"
"	Set string value... 48 Helptext Beginlengte van het selectie venster (Voorkeursinstelling Serieel mode)\n"
"	# Row 49\n"
"	Set string value... 49 Label $AudioCollection\n"
"	Set string value... 49 Text Bewaren\n"
"	Set string value... 49 Key !\n"
"	Set string value... 49 Helptext Opnemen en bewaren van audio\n"
"	# Row 50\n"
"	Set string value... 50 Label SaveAudio\n"
"	Set string value... 50 Text Audio\n"
"	Set string value... 50 Key !\n"
"	Set string value... 50 Helptext Bewaar huidige selectie van geluid naar bestand\n"
"	# Row 51\n"
"	Set string value... 51 Label RecordingTime\n"
"	Set string value... 51 Text Opname\n"
"	Set string value... 51 Key ]}\n"
"	Set string value... 51 Helptext Opnametijd in seconden en bestanden voor voorleestaken\n"
"	# Row 52\n"
"	Set string value... 52 Label !RecordingTaskFile\n"
"	Set string value... 52 Text RecordingTaskFile\n"
"	Set string value... 52 Key !\n"
"	Set string value... 52 Helptext Bestand met de opnametaken\n"
"	# Row 53\n"
"	Set string value... 53 Label !RecordingTarget\n"
"	Set string value... 53 Text RecordingTarget\n"
"	Set string value... 53 Key !\n"
"	Set string value... 53 Helptext Map met de opnamen\n"
"	# Row 54\n"
"	Set string value... 54 Label !RecordingScreen\n"
"	Set string value... 54 Text RecordingScreen\n"
"	Set string value... 54 Key !\n"
"	Set string value... 54 Helptext Gebruikt de speciale opnamepagina\n"
"	# Row 55\n"
"	Set string value... 55 Label $AutomaticTasks\n"
"	Set string value... 55 Text Uitvoeren\n"
"	Set string value... 55 Key !\n"
"	Set string value... 55 Helptext Uitvoering van tijdrovende taken\n"
"	# Row 56\n"
"	Set string value... 56 Label ShowFormants\n"
"	Set string value... 56 Text Formanten\n"
"	Set string value... 56 Key F\n"
"	Set string value... 56 Helptext Teken formanten in spectrogram\n"
"	# Row 57\n"
"	Set string value... 57 Label AutoSelect\n"
"	Set string value... 57 Text AutoSelect\n"
"	Set string value... 57 Key \n"
"	Set string value... 57 Helptext Selecteer automatisch het \"beste\" interval\n"
"	# Row 58\n"
"	Set string value... 58 Label CalcGNE\n"
"	Set string value... 58 Text GNE\n"
"	Set string value... 58 Key \n"
"	Set string value... 58 Helptext Bereken de GNE waarde \n"
"	# Row 59\n"
"	Set string value... 59 Label SpeakerSort\n"
"	Set string value... 59 Text Sorteer V\n"
"	Set string value... 59 Key V\n"
"	Set string value... 59 Helptext Sorteer de lijst met opnamen\n"
"	# Row 60\n"
"	Set string value... 60 Label SpeakerRandomize\n"
"	Set string value... 60 Text Shuffle\n"
"	Set string value... 60 Key e\n"
"	Set string value... 60 Helptext Randomiseer de lijst met opnamen\n"
"	# Row 61\n"
"	Set string value... 61 Label $Rating\n"
"	Set string value... 61 Text Beoordeling\n"
"	Set string value... 61 Key \n"
"	Set string value... 61 Helptext Menselijke beoordeling van spraak\n"
"	# Row 62\n"
"	Set string value... 62 Label RatingForm_Vowel\n"
"	Set string value... 62 Text Klinkers\n"
"	Set string value... 62 Key \n"
"	Set string value... 62 Helptext Beoordelingsformulier voor klinkers\n"
"	# Row 63\n"
"	Set string value... 63 Label RatingForm_Text\n"
"	Set string value... 63 Text Text\n"
"	Set string value... 63 Key \n"
"	Set string value... 63 Helptext Tekst beoordelingsformulier voor woorden en lopende spraak\n"
"	# Row 64\n"
"	Set string value... 64 Label RatingForm_INFVo\n"
"	Set string value... 64 Text IINFVo\n"
"	Set string value... 64 Key \n"
"	Set string value... 64 Helptext IINFVo beoordelingsformulier (Impression, Intelligibility, Noise, Fluency, Voice)\n"
"	# Row 65\n"
"	Set string value... 65 Label RatingForm_GRBAS\n"
"	Set string value... 65 Text GRBAS\n"
"	Set string value... 65 Key \n"
"	Set string value... 65 Helptext GRBAS beoordelingsformulier (Grade, Roughness, Breathiness, Asthenia, Strain)\n"
"	# Row 66\n"
"	Set string value... 66 Label RatingForm_TEpair\n"
"	Set string value... 66 Text TE paar\n"
"	Set string value... 66 Key \n"
"	Set string value... 66 Helptext Paar evaluatie\n"
"	# Row 67\n"
"	Set string value... 67 Label VasScaleTicks\n"
"	Set string value... 67 Text Schaal\n"
"	Set string value... 67 Key \n"
"	Set string value... 67 Helptext Schaal markeringen in beoordelingsformulier\n"
"	# Row 68\n"
"	Set string value... 68 Label !Logging\n"
"	Set string value... 68 Text Log aan\n"
"	Set string value... 68 Key L\n"
"	Set string value... 68 Helptext Start logging spraak\n"
"	# Row 69\n"
"	Set string value... 69 Label !OpenLog\n"
"	Set string value... 69 Text Kies\n"
"	Set string value... 69 Key K\n"
"	Set string value... 69 Helptext Kies map voor logboek\n"
"	# Row 70\n"
"	Set string value... 70 Label !Run\n"
"	Set string value... 70 Text Uitvoeren\n"
"	Set string value... 70 Key U\n"
"	Set string value... 70 Helptext Voer commandobestand uit (of logboekbestand)\n"
"endproc\n"
"\n"
"procCreateCredits_DE$ = \"Credits_DE\"\n"
"procedure CreateCredits_DE\n"
"	Create Table with column names... Credits_DE 31\n"
"	... font size text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 font Helvetica\n"
"	Set string value... 1 size 12\n"
"	Set string value... 1 text  \n"
"	# Row 2\n"
"	Set string value... 2 font Helvetica\n"
"	Set string value... 2 size 16\n"
"	Set string value... 2 text NKI TE-VOICE ANALYSIS tool Version 1.1\n"
"	# Row 3\n"
"	Set string value... 3 font Helvetica\n"
"	Set string value... 3 size 12\n"
"	Set string value... 3 text  \n"
"	# Row 4\n"
"	Set string value... 4 font Helvetica\n"
"	Set string value... 4 size 12\n"
"	Set string value... 4 text Netherlands Cancer Institute Anwendung f\\u\"r Tracheoesophageale Stimmanalyse\n"
"	# Row 5\n"
"	Set string value... 5 font Helvetica\n"
"	Set string value... 5 size 12\n"
"	Set string value... 5 text F\\u\"r weitere Informationen, besuchen sie bitte unsere Webseiten: http://www.provoxweb.info/acoustic-analyses.html\n"
"	# Row 6\n"
"	Set string value... 6 font Helvetica\n"
"	Set string value... 6 size 12\n"
"	Set string value... 6 text und http://www.fon.hum.uva.nl/IFA-SpokenLanguageCorpora/NKIcorpora/NKI\\_ TEVA/\n"
"	# Row 7\n"
"	Set string value... 7 font Helvetica\n"
"	Set string value... 7 size 12\n"
"	Set string value... 7 text Entwickeld mit Praat 'praatVersion$' (http://www.praat.org)\n"
"	# Row 8\n"
"	Set string value... 8 font Helvetica\n"
"	Set string value... 8 size 12\n"
"	Set string value... 8 text  \n"
"	# Row 9\n"
"	Set string value... 9 font Helvetica\n"
"	Set string value... 9 size 12\n"
"	Set string value... 9 text Erstellt und Copyrights \\co 2010-'dateYear$' von Rob van Son und das NKI - R.J.J.H.vanSon@gmail.com\n"
"	# Row 10\n"
"	Set string value... 10 font Helvetica\n"
"	Set string value... 10 size 12\n"
"	Set string value... 10 text  \n"
"	# Row 11\n"
"	Set string value... 11 font Helvetica\n"
"	Set string value... 11 size 12\n"
"	Set string value... 11 text Diese Anwendung wurde erm\\o\"glicht durch ein uneingeschr\\a\"nktes Forschungsstipendium von\n"
"	# Row 12\n"
"	Set string value... 12 font Helvetica\n"
"	Set string value... 12 size 12\n"
"	Set string value... 12 text ATOS MEDICAL AB: P.O. BOX 183 SE-242 22 H\\O\"RBY SWEDEN\n"
"	# Row 13\n"
"	Set string value... 13 font Helvetica\n"
"	Set string value... 13 size 12\n"
"	Set string value... 13 text  \n"
"	# Row 14\n"
"	Set string value... 14 font Helvetica\n"
"	Set string value... 14 size 12\n"
"	Set string value... 14 text Japanische \\U\"bersetzung: Akiko Kanezaki und Chiharu Kamei\n"
"	# Row 15\n"
"	Set string value... 15 font Helvetica\n"
"	Set string value... 15 size 12\n"
"	Set string value... 15 text Deutsche \\U\"bersetzung: Irene Jacobi und Rob van Son\n"
"	# Row 16\n"
"	Set string value... 16 font Helvetica\n"
"	Set string value... 16 size 12\n"
"	Set string value... 16 text  \n"
"	# Row 17\n"
"	Set string value... 17 font Courier\n"
"	Set string value... 17 size 12\n"
"	Set string value... 17 text Dieses Programm ist freie Software. Sie k\\o\"nnen es unter den Bedingungen\n"
"	# Row 18\n"
"	Set string value... 18 font Courier\n"
"	Set string value... 18 size 12\n"
"	Set string value... 18 text der GNU General Public License, wie von der Free Software Foundation\n"
"	# Row 19\n"
"	Set string value... 19 font Courier\n"
"	Set string value... 19 size 12\n"
"	Set string value... 19 text ver\\o\"ffentlicht, weitergeben und/oder modifizieren, entweder gem\\a\"\\ss\n"
"	# Row 20\n"
"	Set string value... 20 font Courier\n"
"	Set string value... 20 size 12\n"
"	Set string value... 20 text Version2 der Lizenz oder (nach Ihrer Option) jeder sp\\a\"teren Version.\n"
"	# Row 21\n"
"	Set string value... 21 font Courier\n"
"	Set string value... 21 size 12\n"
"	Set string value... 21 text \n"
"	# Row 22\n"
"	Set string value... 22 font Courier\n"
"	Set string value... 22 size 12\n"
"	Set string value... 22 text Die Ver\\o\"ffentlichung dieses Programms erfolgt in der Hoffnung, da\\ss es\n"
"	# Row 23\n"
"	Set string value... 23 font Courier\n"
"	Set string value... 23 size 12\n"
"	Set string value... 23 text Ihnen von Nutzen sein wird, aber OHNE IRGENDEINE GARANTIE, sogar ohne\n"
"	# Row 24\n"
"	Set string value... 24 font Courier\n"
"	Set string value... 24 size 12\n"
"	Set string value... 24 text die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT F\\U\"R EINEN\n"
"	# Row 25\n"
"	Set string value... 25 font Courier\n"
"	Set string value... 25 size 12\n"
"	Set string value... 25 text BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public License.\n"
"	# Row 26\n"
"	Set string value... 26 font Courier\n"
"	Set string value... 26 size 12\n"
"	Set string value... 26 text \n"
"	# Row 27\n"
"	Set string value... 27 font Courier\n"
"	Set string value... 27 size 12\n"
"	Set string value... 27 text Sie sollten ein Exemplar der GNU General Public License zusammen mit\n"
"	# Row 28\n"
"	Set string value... 28 font Courier\n"
"	Set string value... 28 size 12\n"
"	Set string value... 28 text diesem Programm erhalten haben. Falls nicht, siehe\n"
"	# Row 29\n"
"	Set string value... 29 font Courier\n"
"	Set string value... 29 size 12\n"
"	Set string value... 29 text <http://www.gnu.org/licenses/>.\n"
"	# Row 30\n"
"	Set string value... 30 font Courier\n"
"	Set string value... 30 size 12\n"
"	Set string value... 30 text  \n"
"	# Row 31\n"
"	Set string value... 31 font Helvetica\n"
"	Set string value... 31 size 8\n"
"	Set string value... 31 text %%V: 'build_SHA$'%\n"
"endproc\n"
"\n"
"procCreateCredits_EN$ = \"Credits_EN\"\n"
"procedure CreateCredits_EN\n"
"	Create Table with column names... Credits_EN 30\n"
"	... font size text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 font Helvetica\n"
"	Set string value... 1 size 12\n"
"	Set string value... 1 text  \n"
"	# Row 2\n"
"	Set string value... 2 font Helvetica\n"
"	Set string value... 2 size 16\n"
"	Set string value... 2 text NKI TE-VOICE ANALYSIS tool version 1.1\n"
"	# Row 3\n"
"	Set string value... 3 font Helvetica\n"
"	Set string value... 3 size 12\n"
"	Set string value... 3 text  \n"
"	# Row 4\n"
"	Set string value... 4 font Helvetica\n"
"	Set string value... 4 size 12\n"
"	Set string value... 4 text Netherlands Cancer Institute tool for Tracheoesophageal Voice Analysis\n"
"	# Row 5\n"
"	Set string value... 5 font Helvetica\n"
"	Set string value... 5 size 12\n"
"	Set string value... 5 text For more information, visit our websites: http://www.provoxweb.info/acoustic-analyses.html\n"
"	# Row 6\n"
"	Set string value... 6 font Helvetica\n"
"	Set string value... 6 size 12\n"
"	Set string value... 6 text and http://www.fon.hum.uva.nl/IFA-SpokenLanguageCorpora/NKIcorpora/NKI\\_ TEVA/\n"
"	# Row 7\n"
"	Set string value... 7 font Helvetica\n"
"	Set string value... 7 size 12\n"
"	Set string value... 7 text Based on Praat 'praatVersion$' (http://www.praat.org)\n"
"	# Row 8\n"
"	Set string value... 8 font Helvetica\n"
"	Set string value... 8 size 12\n"
"	Set string value... 8 text  \n"
"	# Row 9\n"
"	Set string value... 9 font Helvetica\n"
"	Set string value... 9 size 12\n"
"	Set string value... 9 text Created and Copyrights \\co 2010-'dateYear$' by Rob van Son and the NKI - R.J.J.H.vanSon@gmail.com\n"
"	# Row 10\n"
"	Set string value... 10 font Helvetica\n"
"	Set string value... 10 size 12\n"
"	Set string value... 10 text  \n"
"	# Row 11\n"
"	Set string value... 11 font Helvetica\n"
"	Set string value... 11 size 12\n"
"	Set string value... 11 text This application was made possible by an unrestricted research grant from\n"
"	# Row 12\n"
"	Set string value... 12 font Helvetica\n"
"	Set string value... 12 size 12\n"
"	Set string value... 12 text ATOS MEDICAL AB: P.O. BOX 183 SE-242 22 H\\O\"RBY SWEDEN\n"
"	# Row 13\n"
"	Set string value... 13 font Helvetica\n"
"	Set string value... 13 size 12\n"
"	Set string value... 13 text  \n"
"	# Row 14\n"
"	Set string value... 14 font Helvetica\n"
"	Set string value... 14 size 12\n"
"	Set string value... 14 text Japanese translation: Akiko Kanezaki and Chiharu Kamei\n"
"	# Row 15\n"
"	Set string value... 15 font Helvetica\n"
"	Set string value... 15 size 12\n"
"	Set string value... 15 text German translation: Irene Jacobi and Rob van Son\n"
"	# Row 16\n"
"	Set string value... 16 font Helvetica\n"
"	Set string value... 16 size 12\n"
"	Set string value... 16 text  \n"
"	# Row 17\n"
"	Set string value... 17 font Courier\n"
"	Set string value... 17 size 12\n"
"	Set string value... 17 text This program is free software: you can redistribute it and/or modify\n"
"	# Row 18\n"
"	Set string value... 18 font Courier\n"
"	Set string value... 18 size 12\n"
"	Set string value... 18 text it under the terms of the GNU General Public License as published by\n"
"	# Row 19\n"
"	Set string value... 19 font Courier\n"
"	Set string value... 19 size 12\n"
"	Set string value... 19 text the Free Software Foundation, either version 2 of the License, or\n"
"	# Row 20\n"
"	Set string value... 20 font Courier\n"
"	Set string value... 20 size 12\n"
"	Set string value... 20 text (at your option) any later version.\n"
"	# Row 21\n"
"	Set string value... 21 font Courier\n"
"	Set string value... 21 size 12\n"
"	Set string value... 21 text  \n"
"	# Row 22\n"
"	Set string value... 22 font Courier\n"
"	Set string value... 22 size 12\n"
"	Set string value... 22 text This program is distributed in the hope that it will be useful,\n"
"	# Row 23\n"
"	Set string value... 23 font Courier\n"
"	Set string value... 23 size 12\n"
"	Set string value... 23 text but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"	# Row 24\n"
"	Set string value... 24 font Courier\n"
"	Set string value... 24 size 12\n"
"	Set string value... 24 text MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"	# Row 25\n"
"	Set string value... 25 font Courier\n"
"	Set string value... 25 size 12\n"
"	Set string value... 25 text GNU General Public License for more details.\n"
"	# Row 26\n"
"	Set string value... 26 font Courier\n"
"	Set string value... 26 size 12\n"
"	Set string value... 26 text  \n"
"	# Row 27\n"
"	Set string value... 27 font Courier\n"
"	Set string value... 27 size 12\n"
"	Set string value... 27 text You should have received a copy of the GNU General Public License\n"
"	# Row 28\n"
"	Set string value... 28 font Courier\n"
"	Set string value... 28 size 12\n"
"	Set string value... 28 text along with this program.  If not, see <http://www.gnu.org/licenses/>.\n"
"	# Row 29\n"
"	Set string value... 29 font Courier\n"
"	Set string value... 29 size 12\n"
"	Set string value... 29 text  \n"
"	# Row 30\n"
"	Set string value... 30 font Helvetica\n"
"	Set string value... 30 size 8\n"
"	Set string value... 30 text %%V: 'build_SHA$'%\n"
"endproc\n"
"\n"
"procCreateCredits_ES$ = \"Credits_ES\"\n"
"procedure CreateCredits_ES\n"
"	Create Table with column names... Credits_ES 30\n"
"	... font size text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 font Helvetica\n"
"	Set string value... 1 size 12\n"
"	Set string value... 1 text  \n"
"	# Row 2\n"
"	Set string value... 2 font Helvetica\n"
"	Set string value... 2 size 16\n"
"	Set string value... 2 text NKI TE-VOICE ANALYSIS tool version 1.1\n"
"	# Row 3\n"
"	Set string value... 3 font Helvetica\n"
"	Set string value... 3 size 12\n"
"	Set string value... 3 text  \n"
"	# Row 4\n"
"	Set string value... 4 font Helvetica\n"
"	Set string value... 4 size 12\n"
"	Set string value... 4 text Netherlands Cancer Institute tool for Tracheoesophageal Voice Analysis\n"
"	# Row 5\n"
"	Set string value... 5 font Helvetica\n"
"	Set string value... 5 size 12\n"
"	Set string value... 5 text For more information, visit our websites: http://www.provoxweb.info/acoustic-analyses.html\n"
"	# Row 6\n"
"	Set string value... 6 font Helvetica\n"
"	Set string value... 6 size 12\n"
"	Set string value... 6 text and http://www.fon.hum.uva.nl/IFA-SpokenLanguageCorpora/NKIcorpora/NKI\\_ TEVA/\n"
"	# Row 7\n"
"	Set string value... 7 font Helvetica\n"
"	Set string value... 7 size 12\n"
"	Set string value... 7 text Based on Praat 'praatVersion$' (http://www.praat.org)\n"
"	# Row 8\n"
"	Set string value... 8 font Helvetica\n"
"	Set string value... 8 size 12\n"
"	Set string value... 8 text  \n"
"	# Row 9\n"
"	Set string value... 9 font Helvetica\n"
"	Set string value... 9 size 12\n"
"	Set string value... 9 text Created and Copyrights \\co 2010-'dateYear$' by Rob van Son and the NKI - R.J.J.H.vanSon@gmail.com\n"
"	# Row 10\n"
"	Set string value... 10 font Helvetica\n"
"	Set string value... 10 size 12\n"
"	Set string value... 10 text  \n"
"	# Row 11\n"
"	Set string value... 11 font Helvetica\n"
"	Set string value... 11 size 12\n"
"	Set string value... 11 text This application was made possible by an unrestricted research grant from\n"
"	# Row 12\n"
"	Set string value... 12 font Helvetica\n"
"	Set string value... 12 size 12\n"
"	Set string value... 12 text ATOS MEDICAL AB: P.O. BOX 183 SE-242 22 H\\O\"RBY SWEDEN\n"
"	# Row 13\n"
"	Set string value... 13 font Helvetica\n"
"	Set string value... 13 size 12\n"
"	Set string value... 13 text  \n"
"	# Row 14\n"
"	Set string value... 14 font Helvetica\n"
"	Set string value... 14 size 12\n"
"	Set string value... 14 text Japanese translation: Akiko Kanezaki and Chiharu Kamei\n"
"	# Row 15\n"
"	Set string value... 15 font Helvetica\n"
"	Set string value... 15 size 12\n"
"	Set string value... 15 text German translation: Irene Jacobi and Rob van Son\n"
"	# Row 16\n"
"	Set string value... 16 font Helvetica\n"
"	Set string value... 16 size 12\n"
"	Set string value... 16 text  \n"
"	# Row 17\n"
"	Set string value... 17 font Courier\n"
"	Set string value... 17 size 12\n"
"	Set string value... 17 text This program is free software: you can redistribute it and/or modify\n"
"	# Row 18\n"
"	Set string value... 18 font Courier\n"
"	Set string value... 18 size 12\n"
"	Set string value... 18 text it under the terms of the GNU General Public License as published by\n"
"	# Row 19\n"
"	Set string value... 19 font Courier\n"
"	Set string value... 19 size 12\n"
"	Set string value... 19 text the Free Software Foundation, either version 2 of the License, or\n"
"	# Row 20\n"
"	Set string value... 20 font Courier\n"
"	Set string value... 20 size 12\n"
"	Set string value... 20 text (at your option) any later version.\n"
"	# Row 21\n"
"	Set string value... 21 font Courier\n"
"	Set string value... 21 size 12\n"
"	Set string value... 21 text  \n"
"	# Row 22\n"
"	Set string value... 22 font Courier\n"
"	Set string value... 22 size 12\n"
"	Set string value... 22 text This program is distributed in the hope that it will be useful,\n"
"	# Row 23\n"
"	Set string value... 23 font Courier\n"
"	Set string value... 23 size 12\n"
"	Set string value... 23 text but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"	# Row 24\n"
"	Set string value... 24 font Courier\n"
"	Set string value... 24 size 12\n"
"	Set string value... 24 text MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"	# Row 25\n"
"	Set string value... 25 font Courier\n"
"	Set string value... 25 size 12\n"
"	Set string value... 25 text GNU General Public License for more details.\n"
"	# Row 26\n"
"	Set string value... 26 font Courier\n"
"	Set string value... 26 size 12\n"
"	Set string value... 26 text  \n"
"	# Row 27\n"
"	Set string value... 27 font Courier\n"
"	Set string value... 27 size 12\n"
"	Set string value... 27 text You should have received a copy of the GNU General Public License\n"
"	# Row 28\n"
"	Set string value... 28 font Courier\n"
"	Set string value... 28 size 12\n"
"	Set string value... 28 text along with this program.  If not, see <http://www.gnu.org/licenses/>.\n"
"	# Row 29\n"
"	Set string value... 29 font Courier\n"
"	Set string value... 29 size 12\n"
"	Set string value... 29 text  \n"
"	# Row 30\n"
"	Set string value... 30 font Helvetica\n"
"	Set string value... 30 size 8\n"
"	Set string value... 30 text %%V: 'build_SHA$'%\n"
"endproc\n"
"\n"
"procCreateCredits_JA$ = \"Credits_JA\"\n"
"procedure CreateCredits_JA\n"
"	Create Table with column names... Credits_JA 32\n"
"	... font size text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 font Helvetica\n"
"	Set string value... 1 size 12\n"
"	Set string value... 1 text  \n"
"	# Row 2\n"
"	Set string value... 2 font Helvetica\n"
"	Set string value... 2 size 16\n"
"	Set string value... 2 text NKI TE-VOICE ANALYSIS tool version 1.1\n"
"	# Row 3\n"
"	Set string value... 3 font Helvetica\n"
"	Set string value... 3 size 12\n"
"	Set string value... 3 text  \n"
"	# Row 4\n"
"	Set string value... 4 font Helvetica\n"
"	Set string value... 4 size 12\n"
"	Set string value... 4 text Netherlands Cancer Institute tool for Tracheoesophageal Voice Analysis\n"
"	# Row 5\n"
"	Set string value... 5 font Helvetica\n"
"	Set string value... 5 size 12\n"
"	Set string value... 5 text For more information, visit our websites: http://www.provoxweb.info/acoustic-analyses.html\n"
"	# Row 6\n"
"	Set string value... 6 font Helvetica\n"
"	Set string value... 6 size 12\n"
"	Set string value... 6 text and http://www.fon.hum.uva.nl/IFA-SpokenLanguageCorpora/NKIcorpora/NKI\\_ TEVA/\n"
"	# Row 7\n"
"	Set string value... 7 font Helvetica\n"
"	Set string value... 7 size 12\n"
"	Set string value... 7 text Based on Praat 'praatVersion$' (http://www.praat.org)\n"
"	# Row 8\n"
"	Set string value... 8 font Helvetica\n"
"	Set string value... 8 size 12\n"
"	Set string value... 8 text  \n"
"	# Row 9\n"
"	Set string value... 9 font Helvetica\n"
"	Set string value... 9 size 12\n"
"	Set string value... 9 text Created and Copyrights \\co 2010-'dateYear$' by Rob van Son and the NKI - R.J.J.H.vanSon@gmail.com\n"
"	# Row 10\n"
"	Set string value... 10 font Helvetica\n"
"	Set string value... 10 size 12\n"
"	Set string value... 10 text  \n"
"	# Row 11\n"
"	Set string value... 11 font Helvetica\n"
"	Set string value... 11 size 12\n"
"	Set string value... 11 text This application was made possible by an unrestricted research grant from\n"
"	# Row 12\n"
"	Set string value... 12 font Helvetica\n"
"	Set string value... 12 size 12\n"
"	Set string value... 12 text ATOS MEDICAL AB: P.O. BOX 183 SE-242 22 H\\O\"RBY SWEDEN\n"
"	# Row 13\n"
"	Set string value... 13 font Helvetica\n"
"	Set string value... 13 size 12\n"
"	Set string value... 13 text  \n"
"	# Row 14\n"
"	Set string value... 14 font Helvetica\n"
"	Set string value... 14 size 12\n"
"	Set string value... 14 text Japanese translation: Akiko Kanezaki and Chiharu Kamei\n"
"	# Row 15\n"
"	Set string value... 15 font Helvetica\n"
"	Set string value... 15 size 12\n"
"	Set string value... 15 text German translation: Irene Jacobi and Rob van Son\n"
"	# Row 16\n"
"	Set string value... 16 font Helvetica\n"
"	Set string value... 16 size 12\n"
"	Set string value... 16 text  \n"
"	# Row 17\n"
"	Set string value... 17 font Courier\n"
"	Set string value... 17 size 12\n"
"	Set string value... 17 text このプログラムはフリーソフトウェアです。あなたはこれを、フリーソフトウェ\n"
"	# Row 18\n"
"	Set string value... 18 font Courier\n"
"	Set string value... 18 size 12\n"
"	Set string value... 18 text ア財団によって発行された GNU 一般公衆利用許諾契約書(バージョン2か、希\n"
"	# Row 19\n"
"	Set string value... 19 font Courier\n"
"	Set string value... 19 size 12\n"
"	Set string value... 19 text 望によってはそれ以降のバージョンのうちどれか)の定める条件の下で再頒布\n"
"	# Row 20\n"
"	Set string value... 20 font Courier\n"
"	Set string value... 20 size 12\n"
"	Set string value... 20 text または改変することができます。\n"
"	# Row 21\n"
"	Set string value... 21 font Courier\n"
"	Set string value... 21 size 12\n"
"	Set string value... 21 text \n"
"	# Row 22\n"
"	Set string value... 22 font Courier\n"
"	Set string value... 22 size 12\n"
"	Set string value... 22 text このプログラムは有用であることを願って頒布されますが、*全くの無保証* \n"
"	# Row 23\n"
"	Set string value... 23 font Courier\n"
"	Set string value... 23 size 12\n"
"	Set string value... 23 text です。商業可能性の保証や特定の目的への適合性は、言外に示されたものも含\n"
"	# Row 24\n"
"	Set string value... 24 font Courier\n"
"	Set string value... 24 size 12\n"
"	Set string value... 24 text め全く存在しません。詳しくはGNU 一般公衆利用許諾契約書をご覧ください。\n"
"	# Row 25\n"
"	Set string value... 25 font Courier\n"
"	Set string value... 25 size 12\n"
"	Set string value... 25 text  \n"
"	# Row 26\n"
"	Set string value... 26 font Courier\n"
"	Set string value... 26 size 12\n"
"	Set string value... 26 text あなたはこのプログラムと共に、GNU 一般公衆利用許諾契約書の複製物を一部\n"
"	# Row 27\n"
"	Set string value... 27 font Courier\n"
"	Set string value... 27 size 12\n"
"	Set string value... 27 text 受け取ったはずです。もし受け取っていなければ、フリーソフトウェア財団ま\n"
"	# Row 28\n"
"	Set string value... 28 font Courier\n"
"	Set string value... 28 size 12\n"
"	Set string value... 28 text で請求してください(宛先は the Free Software Foundation, Inc., 59\n"
"	# Row 29\n"
"	Set string value... 29 font Courier\n"
"	Set string value... 29 size 12\n"
"	Set string value... 29 text Temple Place, Suite 330, Boston, MA 02111-1307 USA \n"
"	# Row 30\n"
"	Set string value... 30 font Courier\n"
"	Set string value... 30 size 12\n"
"	Set string value... 30 text <http://www.gnu.org/licenses/>)。\n"
"	# Row 31\n"
"	Set string value... 31 font Courier\n"
"	Set string value... 31 size 12\n"
"	Set string value... 31 text  \n"
"	# Row 32\n"
"	Set string value... 32 font Helvetica\n"
"	Set string value... 32 size 8\n"
"	Set string value... 32 text %%V: 'build_SHA$'%\n"
"endproc\n"
"\n"
"procCreateCredits_NL$ = \"Credits_NL\"\n"
"procedure CreateCredits_NL\n"
"	Create Table with column names... Credits_NL 30\n"
"	... font size text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 font Helvetica\n"
"	Set string value... 1 size 12\n"
"	Set string value... 1 text  \n"
"	# Row 2\n"
"	Set string value... 2 font Helvetica\n"
"	Set string value... 2 size 16\n"
"	Set string value... 2 text NKI TE-VOICE ANALYSIS tool versie 1.1\n"
"	# Row 3\n"
"	Set string value... 3 font Helvetica\n"
"	Set string value... 3 size 12\n"
"	Set string value... 3 text  \n"
"	# Row 4\n"
"	Set string value... 4 font Helvetica\n"
"	Set string value... 4 size 12\n"
"	Set string value... 4 text Nederlands Kanker Instituut aplicatie voor Tracheoesophageale Stemanalyse\n"
"	# Row 5\n"
"	Set string value... 5 font Helvetica\n"
"	Set string value... 5 size 12\n"
"	Set string value... 5 text Voor meer informatie, bezoek onze websites: http://www.provoxweb.info/acoustic-analyses.html\n"
"	# Row 6\n"
"	Set string value... 6 font Helvetica\n"
"	Set string value... 6 size 12\n"
"	Set string value... 6 text en http://www.fon.hum.uva.nl/IFA-SpokenLanguageCorpora/NKIcorpora/NKI\\_ TEVA/\n"
"	# Row 7\n"
"	Set string value... 7 font Helvetica\n"
"	Set string value... 7 size 12\n"
"	Set string value... 7 text Gebaseerd op Praat 'praatVersion$' (http://www.praat.org)\n"
"	# Row 8\n"
"	Set string value... 8 font Helvetica\n"
"	Set string value... 8 size 12\n"
"	Set string value... 8 text  \n"
"	# Row 9\n"
"	Set string value... 9 font Helvetica\n"
"	Set string value... 9 size 12\n"
"	Set string value... 9 text Productie en auteursrechten \\co 2010-'dateYear$' Rob van Son en het NKI - R.J.J.H.vanSon@gmail.com\n"
"	# Row 10\n"
"	Set string value... 10 font Helvetica\n"
"	Set string value... 10 size 12\n"
"	Set string value... 10 text  \n"
"	# Row 11\n"
"	Set string value... 11 font Helvetica\n"
"	Set string value... 11 size 12\n"
"	Set string value... 11 text Deze applicatie is mogelijk gemaakt door een vrije onderzoeksbeurs van\n"
"	# Row 12\n"
"	Set string value... 12 font Helvetica\n"
"	Set string value... 12 size 12\n"
"	Set string value... 12 text ATOS MEDICAL AB: P.O. BOX 183 SE-242 22 H\\O\"RBY SWEDEN\n"
"	# Row 13\n"
"	Set string value... 13 font Helvetica\n"
"	Set string value... 13 size 12\n"
"	Set string value... 13 text  \n"
"	# Row 14\n"
"	Set string value... 14 font Helvetica\n"
"	Set string value... 14 size 12\n"
"	Set string value... 14 text Japanse vertaling: Akiko Kanezaki en Chiharu Kamei\n"
"	# Row 15\n"
"	Set string value... 15 font Helvetica\n"
"	Set string value... 15 size 12\n"
"	Set string value... 15 text Duitse vertaling: Irene Jacobi en Rob van Son\n"
"	# Row 16\n"
"	Set string value... 16 font Helvetica\n"
"	Set string value... 16 size 12\n"
"	Set string value... 16 text  \n"
"	# Row 17\n"
"	Set string value... 17 font Courier\n"
"	Set string value... 17 size 12\n"
"	Set string value... 17 text Dit programma is vrije software: je mag het herdistribueren \n"
"	# Row 18\n"
"	Set string value... 18 font Courier\n"
"	Set string value... 18 size 12\n"
"	Set string value... 18 text en/of wijzigen onder de voorwaarden van de GNU Algemene\n"
"	# Row 19\n"
"	Set string value... 19 font Courier\n"
"	Set string value... 19 size 12\n"
"	Set string value... 19 text Publieke Licentie zoals gepubliceerd door de Free Software Foundation,\n"
"	# Row 20\n"
"	Set string value... 20 font Courier\n"
"	Set string value... 20 size 12\n"
"	Set string value... 20 text onder versie 2 van de Licentie of (naar jouw keuze)\n"
"	# Row 21\n"
"	Set string value... 21 font Courier\n"
"	Set string value... 21 size 12\n"
"	Set string value... 21 text elke latere versie.\n"
"	# Row 22\n"
"	Set string value... 22 font Courier\n"
"	Set string value... 22 size 12\n"
"	Set string value... 22 text Dit programma is gedistribueerd in de hoop dat het nuttig zal\n"
"	# Row 23\n"
"	Set string value... 23 font Courier\n"
"	Set string value... 23 size 12\n"
"	Set string value... 23 text zijn maar ZONDER ENIGE GARANTIE; zelfs zonder de impliciete garanties\n"
"	# Row 24\n"
"	Set string value... 24 font Courier\n"
"	Set string value... 24 size 12\n"
"	Set string value... 24 text die GEBRUIKELIJK ZIJN IN DE HANDEL of voor BRUIKBAARHEID VOOR EEN\n"
"	# Row 25\n"
"	Set string value... 25 font Courier\n"
"	Set string value... 25 size 12\n"
"	Set string value... 25 text SPECIFIEK DOEL. Zie de GNU Algemene Publieke Licentie voor meer details.\n"
"	# Row 26\n"
"	Set string value... 26 font Courier\n"
"	Set string value... 26 size 12\n"
"	Set string value... 26 text Je hoort een kopie van de GNU Algemene Publieke Licentie te hebben\n"
"	# Row 27\n"
"	Set string value... 27 font Courier\n"
"	Set string value... 27 size 12\n"
"	Set string value... 27 text ontvangen samen met dit programma. Als dat niet het geval is, zie\n"
"	# Row 28\n"
"	Set string value... 28 font Courier\n"
"	Set string value... 28 size 12\n"
"	Set string value... 28 text <http://www.gnu.org/licenses/>.\n"
"	# Row 29\n"
"	Set string value... 29 font Courier\n"
"	Set string value... 29 size 12\n"
"	Set string value... 29 text  \n"
"	# Row 30\n"
"	Set string value... 30 font Helvetica\n"
"	Set string value... 30 size 8\n"
"	Set string value... 30 text %%V: 'build_SHA$'%\n"
"endproc\n"
"\n"
"procCreateFeedback_DE$ = \"Feedback_DE\"\n"
"procedure CreateFeedback_DE\n"
"	Create Table with column names... Feedback_DE 33\n"
"	... Key Text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Key !Author\n"
"	Set string value... 1 Text Autor R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Key !Copyright\n"
"	Set string value... 2 Text Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Key !License\n"
"	Set string value... 3 Text Lizens GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Key Select1\n"
"	Set string value... 4 Text Selectiere eine neue Startzeit (oder dr\\u\"cke den Selectieren Knopf oder Taste um weiter zo gehen)\n"
"	# Row 5\n"
"	Set string value... 5 Key Select2\n"
"	Set string value... 5 Text Selectiere eine neue Endzeit, #- oder #+ f\\u\"r 1 oder 2 sec Fenster (stop mit %%Selectieren% oder jedige andere Taste)\n"
"	# Row 6\n"
"	Set string value... 6 Key SpectrumValues\n"
"	Set string value... 6 Text Formante - QF_1: QUALITYF1$ , QF_2: QUALITYF2$ , QF_3: QUALITYF3$ , QF_4: QUALITYF4$ [Median(F_i)/Median(B_i)]\n"
"	# Row 7\n"
"	Set string value... 7 Key PitchValues\n"
"	Set string value... 7 Text Tonh\\o\"he - MVD: MAXIMUMVOICINGDUR$ , Voiced: VOICEDFRACTIONS$ , Jitter: JITTER$ , Shimmer: SHIMMER$ , Mean: MEANPITCH$ Hz, SD: SDPITCH$ Hz, Median: MEDIANPITCH$ Hz\n"
"	# Row 8\n"
"	Set string value... 8 Key ShortPitchValues\n"
"	Set string value... 8 Text VF: VOICEDFRACTIONS$ , Jitter: JITTER$ , Schimmer: SHIMMER$ , Mittel: MEANPITCH$ Hz, SD: SDPITCH$ Hz\n"
"	# Row 9\n"
"	Set string value... 9 Key HarmonicityValues\n"
"	Set string value... 9 Text Harmonizit\\a\"t - Max.: MAXHARMONICITY$ dB, Min.: MINHARMONICITY$ dB, Mean: MEANHARMONICITY$ dB, SD: SDHARMONICITY$ dB, GNE: GNEVALUE$\n"
"	# Row 10\n"
"	Set string value... 10 Key ShortHarmonicityValues\n"
"	Set string value... 10 Text HNR: MEANHARMONICITY$ dB, SD: SDHARMONICITY$ dB, GNE: GNEVALUE$\n"
"	# Row 11\n"
"	Set string value... 11 Key IntensityValues\n"
"	Set string value... 11 Text Intensit\\a\"t - Max.: MAXINTENSITY$ dB, Min.: MININTENSITY$ dB, Mean: MEANINTENSITY$ dB, SD: SDINTENSITY$ dB\n"
"	# Row 12\n"
"	Set string value... 12 Key LtasValues\n"
"	Set string value... 12 Text Ltas - Max.: MAXFREQUENCY$ Hz, Min.: MINFREQUENCY$ Hz, BED: BED$ dB, CoG: COG$ Hz  [SELECTEDSTARTTIME$; SELECTEDENDTIME$] S\n"
"	# Row 13\n"
"	Set string value... 13 Key ShortLtasValues\n"
"	Set string value... 13 Text Ltas Max.: MAXFREQUENCY$ Hz, BED: BED$ dB, CoG: COG$ Hz\n"
"	# Row 14\n"
"	Set string value... 14 Key TimeValues\n"
"	Set string value... 14 Text Zeitinterval: SELECTEDSTARTTIME$ - SELECTEDENDTIME$ S (SELECTEDINTERVAL$ S)\n"
"	# Row 15\n"
"	Set string value... 15 Key Recording\n"
"	Set string value... 15 Text Aufname\n"
"	# Row 16\n"
"	Set string value... 16 Key RecordingTask\n"
"	Set string value... 16 Text Aufgaben\n"
"	# Row 17\n"
"	Set string value... 17 Key RecordingClear\n"
"	Set string value... 17 Text löschen\n"
"	# Row 18\n"
"	Set string value... 18 Key RecordingTarget\n"
"	Set string value... 18 Text Mappe\n"
"	# Row 19\n"
"	Set string value... 19 Key Cancel\n"
"	Set string value... 19 Text Zurück\n"
"	# Row 20\n"
"	Set string value... 20 Key Continue\n"
"	Set string value... 20 Text Weiter\n"
"	# Row 21\n"
"	Set string value... 21 Key Unsaved\n"
"	Set string value... 21 Text Nicht gespeicherte \\A\"nderungen\n"
"	# Row 22\n"
"	Set string value... 22 Key BrokenTable\n"
"	Set string value... 22 Text Nicht verwendbare Tabelle\n"
"	# Row 23\n"
"	Set string value... 23 Key Next\n"
"	Set string value... 23 Text >\n"
"	# Row 24\n"
"	Set string value... 24 Key Previous\n"
"	Set string value... 24 Text <\n"
"	# Row 25\n"
"	Set string value... 25 Key Current\n"
"	Set string value... 25 Text =\n"
"	# Row 26\n"
"	Set string value... 26 Key Speaker\n"
"	Set string value... 26 Text Sprecher ID\n"
"	# Row 27\n"
"	Set string value... 27 Key SpeakerID\n"
"	Set string value... 27 Text Aufnahme ID oder Zeilennummer\n"
"	# Row 28\n"
"	Set string value... 28 Key SpeakerText\n"
"	Set string value... 28 Text Sprecher daten\n"
"	# Row 29\n"
"	Set string value... 29 Key SpeakerDefault\n"
"	Set string value... 29 Text Sprecher ID, Namen, Geschlecht, und/oder Alter\n"
"	# Row 30\n"
"	Set string value... 30 Key SpeakerComments\n"
"	Set string value... 30 Text Kommentare\n"
"	# Row 31\n"
"	Set string value... 31 Key SpeakerAudio\n"
"	Set string value... 31 Text Audio\n"
"	# Row 32\n"
"	Set string value... 32 Key VoicingMarker\n"
"	Set string value... 32 Text Stimme\n"
"	# Row 33\n"
"	Set string value... 33 Key Ready\n"
"	Set string value... 33 Text Ende der Liste\n"
"endproc\n"
"\n"
"procCreateFeedback_EN$ = \"Feedback_EN\"\n"
"procedure CreateFeedback_EN\n"
"	Create Table with column names... Feedback_EN 33\n"
"	... Key Text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Key !Author\n"
"	Set string value... 1 Text Author R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Key !Copyright\n"
"	Set string value... 2 Text Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Key !License\n"
"	Set string value... 3 Text License GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Key Select1\n"
"	Set string value... 4 Text Select new start time (or press Select or a key to continue)\n"
"	# Row 5\n"
"	Set string value... 5 Key Select2\n"
"	Set string value... 5 Text Select new end time, #- or #+ for a 1 or 2 sec window (cancel with %%Select% or another key)\n"
"	# Row 6\n"
"	Set string value... 6 Key SpectrumValues\n"
"	Set string value... 6 Text Formants - QF_1: QUALITYF1$ , QF_2: QUALITYF2$ , QF_3: QUALITYF3$ , QF_4: QUALITYF4$ [Median(F_i)/Median(B_i)]\n"
"	# Row 7\n"
"	Set string value... 7 Key PitchValues\n"
"	Set string value... 7 Text Pitch - MVD: MAXIMUMVOICINGDUR$ , Voiced: VOICEDFRACTIONS$ , Jitter: JITTER$ , Shimmer: SHIMMER$ , Mean: MEANPITCH$ Hz, SD: SDPITCH$ Hz, Median: MEDIANPITCH$ Hz\n"
"	# Row 8\n"
"	Set string value... 8 Key ShortPitchValues\n"
"	Set string value... 8 Text VF: VOICEDFRACTIONS$ , Jitter: JITTER$ , Shimmer: SHIMMER$ , Mean: MEANPITCH$ Hz, SD: SDPITCH$ Hz\n"
"	# Row 9\n"
"	Set string value... 9 Key HarmonicityValues\n"
"	Set string value... 9 Text Harmonicity - Max.: MAXHARMONICITY$ dB, Min.: MINHARMONICITY$ dB, Mean: MEANHARMONICITY$ dB, SD: SDHARMONICITY$ dB, GNE: GNEVALUE$\n"
"	# Row 10\n"
"	Set string value... 10 Key ShortHarmonicityValues\n"
"	Set string value... 10 Text HNR: MEANHARMONICITY$ dB, SD: SDHARMONICITY$ dB, GNE: GNEVALUE$\n"
"	# Row 11\n"
"	Set string value... 11 Key IntensityValues\n"
"	Set string value... 11 Text Intensity - Max.: MAXINTENSITY$ dB, Min.: MININTENSITY$ dB, Mean: MEANINTENSITY$ dB, SD: SDINTENSITY$ dB\n"
"	# Row 12\n"
"	Set string value... 12 Key LtasValues\n"
"	Set string value... 12 Text Ltas - Max.: MAXFREQUENCY$ Hz, Min.: MINFREQUENCY$ Hz, BED: BED$ dB, CoG: COG$ Hz  [SELECTEDSTARTTIME$; SELECTEDENDTIME$] S\n"
"	# Row 13\n"
"	Set string value... 13 Key ShortLtasValues\n"
"	Set string value... 13 Text Ltas Max.: MAXFREQUENCY$ Hz, BED: BED$ dB, CoG: COG$ Hz\n"
"	# Row 14\n"
"	Set string value... 14 Key TimeValues\n"
"	Set string value... 14 Text Time interval: SELECTEDSTARTTIME$ - SELECTEDENDTIME$ S (SELECTEDINTERVAL$ S)\n"
"	# Row 15\n"
"	Set string value... 15 Key Recording\n"
"	Set string value... 15 Text Recording\n"
"	# Row 16\n"
"	Set string value... 16 Key RecordingTask\n"
"	Set string value... 16 Text Task\n"
"	# Row 17\n"
"	Set string value... 17 Key RecordingClear\n"
"	Set string value... 17 Text Clear\n"
"	# Row 18\n"
"	Set string value... 18 Key RecordingTarget\n"
"	Set string value... 18 Text Store\n"
"	# Row 19\n"
"	Set string value... 19 Key Cancel\n"
"	Set string value... 19 Text Cancel\n"
"	# Row 20\n"
"	Set string value... 20 Key Continue\n"
"	Set string value... 20 Text Continue\n"
"	# Row 21\n"
"	Set string value... 21 Key Unsaved\n"
"	Set string value... 21 Text Unsaved changes\n"
"	# Row 22\n"
"	Set string value... 22 Key BrokenTable\n"
"	Set string value... 22 Text Incomplete or corrupted table\n"
"	# Row 23\n"
"	Set string value... 23 Key Next\n"
"	Set string value... 23 Text >\n"
"	# Row 24\n"
"	Set string value... 24 Key Previous\n"
"	Set string value... 24 Text <\n"
"	# Row 25\n"
"	Set string value... 25 Key Current\n"
"	Set string value... 25 Text =\n"
"	# Row 26\n"
"	Set string value... 26 Key Speaker\n"
"	Set string value... 26 Text Speaker ID\n"
"	# Row 27\n"
"	Set string value... 27 Key SpeakerID\n"
"	Set string value... 27 Text Recording ID or row number\n"
"	# Row 28\n"
"	Set string value... 28 Key SpeakerText\n"
"	Set string value... 28 Text Speaker info\n"
"	# Row 29\n"
"	Set string value... 29 Key SpeakerDefault\n"
"	Set string value... 29 Text Speaker ID, name, sex, and/or age\n"
"	# Row 30\n"
"	Set string value... 30 Key SpeakerComments\n"
"	Set string value... 30 Text Comments\n"
"	# Row 31\n"
"	Set string value... 31 Key SpeakerAudio\n"
"	Set string value... 31 Text Audio\n"
"	# Row 32\n"
"	Set string value... 32 Key VoicingMarker\n"
"	Set string value... 32 Text Voice\n"
"	# Row 33\n"
"	Set string value... 33 Key Ready\n"
"	Set string value... 33 Text End of list\n"
"endproc\n"
"\n"
"procCreateFeedback_ES$ = \"Feedback_ES\"\n"
"procedure CreateFeedback_ES\n"
"	Create Table with column names... Feedback_ES 33\n"
"	... Key Text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Key !Author\n"
"	Set string value... 1 Text Author R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Key !Copyright\n"
"	Set string value... 2 Text Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Key !License\n"
"	Set string value... 3 Text License GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Key Select1\n"
"	Set string value... 4 Text Select new start time (or press Select or a key to continue)\n"
"	# Row 5\n"
"	Set string value... 5 Key Select2\n"
"	Set string value... 5 Text Select new end time, #- or #+ for a 1 or 2 sec window (cancel with %%Select% or another key)\n"
"	# Row 6\n"
"	Set string value... 6 Key SpectrumValues\n"
"	Set string value... 6 Text Formants - QF_1: QUALITYF1$ , QF_2: QUALITYF2$ , QF_3: QUALITYF3$ , QF_4: QUALITYF4$ [Median(F_i)/Median(B_i)]\n"
"	# Row 7\n"
"	Set string value... 7 Key PitchValues\n"
"	Set string value... 7 Text Pitch - MVD: MAXIMUMVOICINGDUR$ , Voiced: VOICEDFRACTIONS$ , Jitter: JITTER$ , Shimmer: SHIMMER$ , Mean: MEANPITCH$ Hz, SD: SDPITCH$ Hz, Median: MEDIANPITCH$ Hz\n"
"	# Row 8\n"
"	Set string value... 8 Key ShortPitchValues\n"
"	Set string value... 8 Text VF: VOICEDFRACTIONS$ , Jitter: JITTER$ , Shimmer: SHIMMER$ , Mean: MEANPITCH$ Hz, SD: SDPITCH$ Hz\n"
"	# Row 9\n"
"	Set string value... 9 Key HarmonicityValues\n"
"	Set string value... 9 Text Harmonicity - Max.: MAXHARMONICITY$ dB, Min.: MINHARMONICITY$ dB, Mean: MEANHARMONICITY$ dB, SD: SDHARMONICITY$ dB, GNE: GNEVALUE$\n"
"	# Row 10\n"
"	Set string value... 10 Key ShortHarmonicityValues\n"
"	Set string value... 10 Text HNR: MEANHARMONICITY$ dB, SD: SDHARMONICITY$ dB, GNE: GNEVALUE$\n"
"	# Row 11\n"
"	Set string value... 11 Key IntensityValues\n"
"	Set string value... 11 Text Intensity - Max.: MAXINTENSITY$ dB, Min.: MININTENSITY$ dB, Mean: MEANINTENSITY$ dB, SD: SDINTENSITY$ dB\n"
"	# Row 12\n"
"	Set string value... 12 Key LtasValues\n"
"	Set string value... 12 Text Ltas - Max.: MAXFREQUENCY$ Hz, Min.: MINFREQUENCY$ Hz, BED: BED$ dB, CoG: COG$ Hz  [SELECTEDSTARTTIME$; SELECTEDENDTIME$] S\n"
"	# Row 13\n"
"	Set string value... 13 Key ShortLtasValues\n"
"	Set string value... 13 Text Ltas Max.: MAXFREQUENCY$ Hz, BED: BED$ dB, CoG: COG$ Hz\n"
"	# Row 14\n"
"	Set string value... 14 Key TimeValues\n"
"	Set string value... 14 Text Time interval: SELECTEDSTARTTIME$ - SELECTEDENDTIME$ S (SELECTEDINTERVAL$ S)\n"
"	# Row 15\n"
"	Set string value... 15 Key Recording\n"
"	Set string value... 15 Text Recording\n"
"	# Row 16\n"
"	Set string value... 16 Key RecordingTask\n"
"	Set string value... 16 Text Task\n"
"	# Row 17\n"
"	Set string value... 17 Key RecordingClear\n"
"	Set string value... 17 Text Clear\n"
"	# Row 18\n"
"	Set string value... 18 Key RecordingTarget\n"
"	Set string value... 18 Text Store\n"
"	# Row 19\n"
"	Set string value... 19 Key Cancel\n"
"	Set string value... 19 Text Cancel\n"
"	# Row 20\n"
"	Set string value... 20 Key Continue\n"
"	Set string value... 20 Text Continue\n"
"	# Row 21\n"
"	Set string value... 21 Key Unsaved\n"
"	Set string value... 21 Text Unsaved changes\n"
"	# Row 22\n"
"	Set string value... 22 Key BrokenTable\n"
"	Set string value... 22 Text Incomplete or corrupted table\n"
"	# Row 23\n"
"	Set string value... 23 Key Next\n"
"	Set string value... 23 Text >\n"
"	# Row 24\n"
"	Set string value... 24 Key Previous\n"
"	Set string value... 24 Text <\n"
"	# Row 25\n"
"	Set string value... 25 Key Current\n"
"	Set string value... 25 Text =\n"
"	# Row 26\n"
"	Set string value... 26 Key Speaker\n"
"	Set string value... 26 Text Speaker ID\n"
"	# Row 27\n"
"	Set string value... 27 Key SpeakerID\n"
"	Set string value... 27 Text Recording ID or row number\n"
"	# Row 28\n"
"	Set string value... 28 Key SpeakerText\n"
"	Set string value... 28 Text Speaker info\n"
"	# Row 29\n"
"	Set string value... 29 Key SpeakerDefault\n"
"	Set string value... 29 Text Speaker ID, name, sex, and/or age\n"
"	# Row 30\n"
"	Set string value... 30 Key SpeakerComments\n"
"	Set string value... 30 Text Comments\n"
"	# Row 31\n"
"	Set string value... 31 Key SpeakerAudio\n"
"	Set string value... 31 Text Audio\n"
"	# Row 32\n"
"	Set string value... 32 Key VoicingMarker\n"
"	Set string value... 32 Text Voice\n"
"	# Row 33\n"
"	Set string value... 33 Key Ready\n"
"	Set string value... 33 Text End of list\n"
"endproc\n"
"\n"
"procCreateFeedback_JA$ = \"Feedback_JA\"\n"
"procedure CreateFeedback_JA\n"
"	Create Table with column names... Feedback_JA 33\n"
"	... Key Text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Key !Author\n"
"	Set string value... 1 Text 著者R.J.J.H. van Son, translation: Akiko Kanezaki\n"
"	# Row 2\n"
"	Set string value... 2 Key !Copyright\n"
"	Set string value... 2 Text 著作権 \\co 2010-2012 R.J.J.H. van Son \\& the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Key !License\n"
"	Set string value... 3 Text ライセンス GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Key Select1\n"
"	Set string value... 4 Text 新しい開始時間の選択 (もしくはSelectボタンを押して続ける)\n"
"	# Row 5\n"
"	Set string value... 5 Key Select2\n"
"	Set string value... 5 Text 新しい終了時間の選択, #- or #+ for a 1 or 2 sec window (キャンセルをする場合は%%Select%もしくは他のボタンを押す)\n"
"	# Row 6\n"
"	Set string value... 6 Key SpectrumValues\n"
"	Set string value... 6 Text フォルマント - QF_1: QUALITYF1$ , QF_2: QUALITYF2$ , QF_3: QUALITYF3$ , QF_4: QUALITYF4$ [Median(F_i)/Median(B_i)]\n"
"	# Row 7\n"
"	Set string value... 7 Key PitchValues\n"
"	Set string value... 7 Text ピッチ - MVD: 最長発声持続時間MAXIMUMVOICINGDUR$ , Voiced有声音: 有声音の一部分VOICEDFRACTIONS$ , Jitter: ジッターJITTER$ , Shimmer: シマ―SHIMMER$ , Mean平均: ピッチ平均MEANPITCH$ Hz, SD: SDPITCH$ Hz, Median: MEDIANPITCH$ Hz\n"
"	# Row 8\n"
"	Set string value... 8 Key ShortPitchValues\n"
"	Set string value... 8 Text VF: VOICEDFRACTIONS$ , Jitter: JITTER$ , Shimmer: SHIMMER$ , Mean: MEANPITCH$ Hz, SD: SDPITCH$ Hz\n"
"	# Row 9\n"
"	Set string value... 9 Key HarmonicityValues\n"
"	Set string value... 9 Text 調和音 - Max.: 最大調和音MAXHARMONICITY$ dB, Min.: 最小調和音MINHARMONICITY$ dB, Mean: 平均調和音MEANHARMONICITY$ dB, SD: 調和音標準偏差SDHARMONICITY$ dB, GNE: $\n"
"	# Row 10\n"
"	Set string value... 10 Key ShortHarmonicityValues\n"
"	Set string value... 10 Text HNR: 平均調和音MEANHARMONICITY$ dB, SD: SDHARMONICITY$ dB, GNE: GNEVALUE$\n"
"	# Row 11\n"
"	Set string value... 11 Key IntensityValues\n"
"	Set string value... 11 Text 強度 - Max.: 最大強度MAXINTENSITY$ dB, Min.: 最小強度MININTENSITY$ dB, Mean: 平均強度MEANINTENSITY$ dB, SD: 強度標準偏差SDINTENSITY$ dB\n"
"	# Row 12\n"
"	Set string value... 12 Key LtasValues\n"
"	Set string value... 12 Text 長期持続平均スペクトラム - Max.: 最大周波数MAXFREQUENCY$ Hz, Min.: 最小周波数MINFREQUENCY$ Hz, BED: BED$ dB, CoG: COG$ Hz [SELECTEDSTARTTIME$; SELECTEDENDTIME$] S\n"
"	# Row 13\n"
"	Set string value... 13 Key ShortLtasValues\n"
"	Set string value... 13 Text 長期持続平均スぺクラム最大Ltas Max.: 最大周波数MAXFREQUENCY$ Hz, BED: BED$ dB, CoG: COG$ Hz\n"
"	# Row 14\n"
"	Set string value... 14 Key TimeValues\n"
"	Set string value... 14 Text 間隔Time interval: 開始時間の選択SELECTEDSTARTTIME$ - 終了時間の選択SELECTEDENDTIME$ S (SELECTEDINTERVAL$ S)\n"
"	# Row 15\n"
"	Set string value... 15 Key Recording\n"
"	Set string value... 15 Text 録音\n"
"	# Row 16\n"
"	Set string value... 16 Key RecordingTask\n"
"	Set string value... 16 Text タスク\n"
"	# Row 17\n"
"	Set string value... 17 Key RecordingClear\n"
"	Set string value... 17 Text 消去\n"
"	# Row 18\n"
"	Set string value... 18 Key RecordingTarget\n"
"	Set string value... 18 Text 保存\n"
"	# Row 19\n"
"	Set string value... 19 Key Cancel\n"
"	Set string value... 19 Text キャンセル\n"
"	# Row 20\n"
"	Set string value... 20 Key Continue\n"
"	Set string value... 20 Text 続ける\n"
"	# Row 21\n"
"	Set string value... 21 Key Unsaved\n"
"	Set string value... 21 Text 変更を保存しない\n"
"	# Row 22\n"
"	Set string value... 22 Key BrokenTable\n"
"	Set string value... 22 Text 不完全または破損した表\n"
"	# Row 23\n"
"	Set string value... 23 Key Next\n"
"	Set string value... 23 Text >\n"
"	# Row 24\n"
"	Set string value... 24 Key Previous\n"
"	Set string value... 24 Text <\n"
"	# Row 25\n"
"	Set string value... 25 Key Current\n"
"	Set string value... 25 Text 現在\n"
"	# Row 26\n"
"	Set string value... 26 Key Speaker\n"
"	Set string value... 26 Text 被験者\n"
"	# Row 27\n"
"	Set string value... 27 Key SpeakerID\n"
"	Set string value... 27 Text 被験者IDまたは整列した数字\n"
"	# Row 28\n"
"	Set string value... 28 Key SpeakerText\n"
"	Set string value... 28 Text 被験者情報\n"
"	# Row 29\n"
"	Set string value... 29 Key SpeakerDefault\n"
"	Set string value... 29 Text 被験者ID、氏名、性別／年齢\n"
"	# Row 30\n"
"	Set string value... 30 Key SpeakerComments\n"
"	Set string value... 30 Text コメント\n"
"	# Row 31\n"
"	Set string value... 31 Key SpeakerAudio\n"
"	Set string value... 31 Text オーディオ\n"
"	# Row 32\n"
"	Set string value... 32 Key VoicingMarker\n"
"	Set string value... 32 Text 声\n"
"	# Row 33\n"
"	Set string value... 33 Key Ready\n"
"	Set string value... 33 Text リストの終了\n"
"endproc\n"
"\n"
"procCreateFeedback_NL$ = \"Feedback_NL\"\n"
"procedure CreateFeedback_NL\n"
"	Create Table with column names... Feedback_NL 33\n"
"	... Key Text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Key !Author\n"
"	Set string value... 1 Text Auteur R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Key !Copyright\n"
"	Set string value... 2 Text Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Key !License\n"
"	Set string value... 3 Text License GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Key Select1\n"
"	Set string value... 4 Text Selecteer nieuwe begintijd (of druk op Selecteer of een toets om verder te gaan)\n"
"	# Row 5\n"
"	Set string value... 5 Key Select2\n"
"	Set string value... 5 Text Selecteer nieuwe eindtijd, #- of #+ voor 1 of 2 sec venster (stop met %%Selecteer% of een andere toets)\n"
"	# Row 6\n"
"	Set string value... 6 Key SpectrumValues\n"
"	Set string value... 6 Text Formanten - QF_1: QUALITYF1$ , QF_2: QUALITYF2$ , QF_3: QUALITYF3$ , QF_4: QUALITYF4$ [Median(F_i)/Median(B_i)]\n"
"	# Row 7\n"
"	Set string value... 7 Key PitchValues\n"
"	Set string value... 7 Text Pitch - MVD: MAXIMUMVOICINGDUR$ , Voiced: VOICEDFRACTIONS$ , Jitter: JITTER$ , Shimmer: SHIMMER$ , Mean: MEANPITCH$ Hz, SD: SDPITCH$ Hz, Median: MEDIANPITCH$ Hz\n"
"	# Row 8\n"
"	Set string value... 8 Key ShortPitchValues\n"
"	Set string value... 8 Text VF: VOICEDFRACTIONS$ , Jitter: JITTER$ , Shimmer: SHIMMER$ , Mean: MEANPITCH$ Hz, SD: SDPITCH$ Hz\n"
"	# Row 9\n"
"	Set string value... 9 Key HarmonicityValues\n"
"	Set string value... 9 Text Harmonicity - Max.: MAXHARMONICITY$ dB, Min.: MINHARMONICITY$ dB, Mean: MEANHARMONICITY$ dB, SD: SDHARMONICITY$ dB, GNE: GNEVALUE$\n"
"	# Row 10\n"
"	Set string value... 10 Key ShortHarmonicityValues\n"
"	Set string value... 10 Text HNR: MEANHARMONICITY$ dB, SD: SDHARMONICITY$ dB, GNE: GNEVALUE$\n"
"	# Row 11\n"
"	Set string value... 11 Key IntensityValues\n"
"	Set string value... 11 Text Intensity - Max.: MAXINTENSITY$ dB, Min.: MININTENSITY$ dB, Mean: MEANINTENSITY$ dB, SD: SDINTENSITY$ dB\n"
"	# Row 12\n"
"	Set string value... 12 Key LtasValues\n"
"	Set string value... 12 Text Ltas - Max.: MAXFREQUENCY$ Hz, Min.: MINFREQUENCY$ Hz, BED: BED$ dB, CoG: COG$ Hz  [SELECTEDSTARTTIME$; SELECTEDENDTIME$] S\n"
"	# Row 13\n"
"	Set string value... 13 Key ShortLtasValues\n"
"	Set string value... 13 Text Ltas Max.: MAXFREQUENCY$ Hz, BED: BED$ dB, CoG: COG$ Hz\n"
"	# Row 14\n"
"	Set string value... 14 Key TimeValues\n"
"	Set string value... 14 Text Time interval: SELECTEDSTARTTIME$ - SELECTEDENDTIME$ S (SELECTEDINTERVAL$ S)\n"
"	# Row 15\n"
"	Set string value... 15 Key Recording\n"
"	Set string value... 15 Text Opname\n"
"	# Row 16\n"
"	Set string value... 16 Key RecordingTask\n"
"	Set string value... 16 Text Taak\n"
"	# Row 17\n"
"	Set string value... 17 Key RecordingClear\n"
"	Set string value... 17 Text Wis\n"
"	# Row 18\n"
"	Set string value... 18 Key RecordingTarget\n"
"	Set string value... 18 Text Map\n"
"	# Row 19\n"
"	Set string value... 19 Key Cancel\n"
"	Set string value... 19 Text Terug\n"
"	# Row 20\n"
"	Set string value... 20 Key Continue\n"
"	Set string value... 20 Text Verder\n"
"	# Row 21\n"
"	Set string value... 21 Key Unsaved\n"
"	Set string value... 21 Text Niet bewaarde veranderingen\n"
"	# Row 22\n"
"	Set string value... 22 Key BrokenTable\n"
"	Set string value... 22 Text Incomplete of beschadigde tabel\n"
"	# Row 23\n"
"	Set string value... 23 Key Next\n"
"	Set string value... 23 Text >\n"
"	# Row 24\n"
"	Set string value... 24 Key Previous\n"
"	Set string value... 24 Text <\n"
"	# Row 25\n"
"	Set string value... 25 Key Current\n"
"	Set string value... 25 Text =\n"
"	# Row 26\n"
"	Set string value... 26 Key Speaker\n"
"	Set string value... 26 Text Spreker ID\n"
"	# Row 27\n"
"	Set string value... 27 Key SpeakerID\n"
"	Set string value... 27 Text Opname ID of regelnummer\n"
"	# Row 28\n"
"	Set string value... 28 Key SpeakerText\n"
"	Set string value... 28 Text Spreker info\n"
"	# Row 29\n"
"	Set string value... 29 Key SpeakerDefault\n"
"	Set string value... 29 Text Spreker ID, naam, geslacht en/of leeftijd\n"
"	# Row 30\n"
"	Set string value... 30 Key SpeakerComments\n"
"	Set string value... 30 Text Opmerkingen\n"
"	# Row 31\n"
"	Set string value... 31 Key SpeakerAudio\n"
"	Set string value... 31 Text Audio\n"
"	# Row 32\n"
"	Set string value... 32 Key VoicingMarker\n"
"	Set string value... 32 Text Stem\n"
"	# Row 33\n"
"	Set string value... 33 Key Ready\n"
"	Set string value... 33 Text Einde van de lijst\n"
"endproc\n"
"\n"
"procCreateInstruction_DE$ = \"Instruction_DE\"\n"
"procedure CreateInstruction_DE\n"
"	Create Table with column names... Instruction_DE 37\n"
"	... font size text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 font Times\n"
"	Set string value... 1 size 16\n"
"	Set string value... 1 text Acoustic Signal Types\n"
"	# Row 2\n"
"	Set string value... 2 font Times\n"
"	Set string value... 2 size 10\n"
"	Set string value... 2 text (Pathology types will be displayed in the main window, press a number key to set the type)\n"
"	# Row 3\n"
"	Set string value... 3 font Times\n"
"	Set string value... 3 size 12\n"
"	Set string value... 3 text   \n"
"	# Row 4\n"
"	Set string value... 4 font Times\n"
"	Set string value... 4 size 14\n"
"	Set string value... 4 text %%Type I - Stable \\&  Harmonic% \\s{(press 1)}\n"
"	# Row 5\n"
"	Set string value... 5 font Times\n"
"	Set string value... 5 size 12\n"
"	Set string value... 5 text - Stable signal for longer than two seconds, and\n"
"	# Row 6\n"
"	Set string value... 6 font Times\n"
"	Set string value... 6 size 12\n"
"	Set string value... 6 text - Clear harmonics up to at least 1000 Hz\n"
"	# Row 7\n"
"	Set string value... 7 font Times\n"
"	Set string value... 7 size 12\n"
"	Set string value... 7 text  \n"
"	# Row 8\n"
"	Set string value... 8 font Times\n"
"	Set string value... 8 size 14\n"
"	Set string value... 8 text %%Type II - Stable \\&  At least one harmonic% \\s{(press 2)}\n"
"	# Row 9\n"
"	Set string value... 9 font Times\n"
"	Set string value... 9 size 12\n"
"	Set string value... 9 text - Stable signal for longer than two seconds, and\n"
"	# Row 10\n"
"	Set string value... 10 font Times\n"
"	Set string value... 10 size 12\n"
"	Set string value... 10 text - At least one stable harmonic at the fundamental frequency for longer than two seconds\n"
"	# Row 11\n"
"	Set string value... 11 font Times\n"
"	Set string value... 11 size 12\n"
"	Set string value... 11 text  \n"
"	# Row 12\n"
"	Set string value... 12 font Times\n"
"	Set string value... 12 size 14\n"
"	Set string value... 12 text %%Type III - Unstable or Partly harmonic% \\s{(press 3)}\n"
"	# Row 13\n"
"	Set string value... 13 font Times\n"
"	Set string value... 13 size 12\n"
"	Set string value... 13 text - No stable signal for longer than two seconds, or\n"
"	# Row 14\n"
"	Set string value... 14 font Times\n"
"	Set string value... 14 size 12\n"
"	Set string value... 14 text - Harmonics in only part of the sample (for longer than 1 second)\n"
"	# Row 15\n"
"	Set string value... 15 font Times\n"
"	Set string value... 15 size 12\n"
"	Set string value... 15 text  \n"
"	# Row 16\n"
"	Set string value... 16 font Times\n"
"	Set string value... 16 size 14\n"
"	Set string value... 16 text %%Type IV - Barely harmonic% \\s{(press 4)}\n"
"	# Row 17\n"
"	Set string value... 17 font Times\n"
"	Set string value... 17 size 12\n"
"	Set string value... 17 text - No or only short-term detectable harmonics (for shorter than 1 second)\n"
"	# Row 18\n"
"	Set string value... 18 font Times\n"
"	Set string value... 18 size 12\n"
"	Set string value... 18 text   \n"
"	# Row 19\n"
"	Set string value... 19 font Times\n"
"	Set string value... 19 size 12\n"
"	Set string value... 19 text %%Table of the relation between the four types of acoustic signal typing%\n"
"	# Row 20\n"
"	Set string value... 20 font Times\n"
"	Set string value... 20 size 12\n"
"	Set string value... 20 text %%and the perceptual judgment of overall voice quality for 39 speakers%\n"
"	# Row 21\n"
"	Set string value... 21 font Times\n"
"	Set string value... 21 size 12\n"
"	Set string value... 21 text %%(converted to percentages).%\n"
"	# Row 22\n"
"	Set string value... 22 font Courier\n"
"	Set string value... 22 size 12\n"
"	Set string value... 22 text |  Perceptual judgment of overall voice quality |\n"
"	# Row 23\n"
"	Set string value... 23 font Courier\n"
"	Set string value... 23 size 12\n"
"	Set string value... 23 text |         Good     Reasonable  Poor             |\n"
"	# Row 24\n"
"	Set string value... 24 font Courier\n"
"	Set string value... 24 size 12\n"
"	Set string value... 24 text | Type I    70\\%       40\\%          0\\%              |  \n"
"	# Row 25\n"
"	Set string value... 25 font Courier\n"
"	Set string value... 25 size 12\n"
"	Set string value... 25 text | Type II   45\\%       45\\%         10\\%              |\n"
"	# Row 26\n"
"	Set string value... 26 font Courier\n"
"	Set string value... 26 size 12\n"
"	Set string value... 26 text | Type III  20\\%       35\\%         45\\%              |\n"
"	# Row 27\n"
"	Set string value... 27 font Courier\n"
"	Set string value... 27 size 12\n"
"	Set string value... 27 text | Type IV    0\\%       25\\%         75\\%              |\n"
"	# Row 28\n"
"	Set string value... 28 font Times\n"
"	Set string value... 28 size 12\n"
"	Set string value... 28 text   \n"
"	# Row 29\n"
"	Set string value... 29 font Helvetica\n"
"	Set string value... 29 size 10\n"
"	Set string value... 29 text References:\n"
"	# Row 30\n"
"	Set string value... 30 font Helvetica\n"
"	Set string value... 30 size 10\n"
"	Set string value... 30 text \\bu Van As, C.J. (##2001#), %%Tracheoesophageal Speech. A Multidimensional Assessment of Voice Quality%, \n"
"	# Row 31\n"
"	Set string value... 31 font Helvetica\n"
"	Set string value... 31 size 10\n"
"	Set string value... 31 text Ph.D.-thesis, University of Amsterdam, 209 pag.\n"
"	# Row 32\n"
"	Set string value... 32 font Helvetica\n"
"	Set string value... 32 size 10\n"
"	Set string value... 32 text \\bu van As-Brooks, C.J., Koopmans-van Beinum, F.J., Pols, L.C.W., and Hilgers, F.J.M. (##2006#),\n"
"	# Row 33\n"
"	Set string value... 33 font Helvetica\n"
"	Set string value... 33 size 10\n"
"	Set string value... 33 text %%Acoustic Signal Typing for Evaluation of Voice Quality in Tracheoesophageal Speech%\n"
"	# Row 34\n"
"	Set string value... 34 font Helvetica\n"
"	Set string value... 34 size 10\n"
"	Set string value... 34 text Journal of Voice, Volume ##20# (3), p355-368\n"
"	# Row 35\n"
"	Set string value... 35 font Helvetica\n"
"	Set string value... 35 size 10\n"
"	Set string value... 35 text \\bu Van As, C.J. (##2008#), %%Acoustic analyses of postlaryngectomy voice and their perceptual relevance%\n"
"	# Row 36\n"
"	Set string value... 36 font Helvetica\n"
"	Set string value... 36 size 10\n"
"	Set string value... 36 text Invitational Round Table \"Evidence-based Voice and Speech Rehabilitation in Head and Neck Cancer\", p8-14\n"
"	# Row 37\n"
"	Set string value... 37 font Helvetica\n"
"	Set string value... 37 size 10\n"
"	Set string value... 37 text <http://dare.uva.nl/document/130984>\n"
"endproc\n"
"\n"
"procCreateInstruction_EN$ = \"Instruction_EN\"\n"
"procedure CreateInstruction_EN\n"
"	Create Table with column names... Instruction_EN 37\n"
"	... font size text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 font Times\n"
"	Set string value... 1 size 16\n"
"	Set string value... 1 text Acoustic Signal Types\n"
"	# Row 2\n"
"	Set string value... 2 font Times\n"
"	Set string value... 2 size 10\n"
"	Set string value... 2 text (Pathology types will be displayed in the main window, press a number key to set the type)\n"
"	# Row 3\n"
"	Set string value... 3 font Times\n"
"	Set string value... 3 size 12\n"
"	Set string value... 3 text   \n"
"	# Row 4\n"
"	Set string value... 4 font Times\n"
"	Set string value... 4 size 14\n"
"	Set string value... 4 text %%Type I - Stable \\&  Harmonic% \\s{(press 1)}\n"
"	# Row 5\n"
"	Set string value... 5 font Times\n"
"	Set string value... 5 size 12\n"
"	Set string value... 5 text - Stable signal for longer than two seconds, and\n"
"	# Row 6\n"
"	Set string value... 6 font Times\n"
"	Set string value... 6 size 12\n"
"	Set string value... 6 text - Clear harmonics up to at least 1000 Hz\n"
"	# Row 7\n"
"	Set string value... 7 font Times\n"
"	Set string value... 7 size 12\n"
"	Set string value... 7 text  \n"
"	# Row 8\n"
"	Set string value... 8 font Times\n"
"	Set string value... 8 size 14\n"
"	Set string value... 8 text %%Type II - Stable \\&  At least one harmonic% \\s{(press 2)}\n"
"	# Row 9\n"
"	Set string value... 9 font Times\n"
"	Set string value... 9 size 12\n"
"	Set string value... 9 text - Stable signal for longer than two seconds, and\n"
"	# Row 10\n"
"	Set string value... 10 font Times\n"
"	Set string value... 10 size 12\n"
"	Set string value... 10 text - At least one stable harmonic at the fundamental frequency for longer than two seconds\n"
"	# Row 11\n"
"	Set string value... 11 font Times\n"
"	Set string value... 11 size 12\n"
"	Set string value... 11 text  \n"
"	# Row 12\n"
"	Set string value... 12 font Times\n"
"	Set string value... 12 size 14\n"
"	Set string value... 12 text %%Type III - Unstable or Partly harmonic% \\s{(press 3)}\n"
"	# Row 13\n"
"	Set string value... 13 font Times\n"
"	Set string value... 13 size 12\n"
"	Set string value... 13 text - No stable signal for longer than two seconds, or\n"
"	# Row 14\n"
"	Set string value... 14 font Times\n"
"	Set string value... 14 size 12\n"
"	Set string value... 14 text - Harmonics in only part of the sample (for longer than 1 second)\n"
"	# Row 15\n"
"	Set string value... 15 font Times\n"
"	Set string value... 15 size 12\n"
"	Set string value... 15 text  \n"
"	# Row 16\n"
"	Set string value... 16 font Times\n"
"	Set string value... 16 size 14\n"
"	Set string value... 16 text %%Type IV - Barely harmonic% \\s{(press 4)}\n"
"	# Row 17\n"
"	Set string value... 17 font Times\n"
"	Set string value... 17 size 12\n"
"	Set string value... 17 text - No or only short-term detectable harmonics (for shorter than 1 second)\n"
"	# Row 18\n"
"	Set string value... 18 font Times\n"
"	Set string value... 18 size 12\n"
"	Set string value... 18 text   \n"
"	# Row 19\n"
"	Set string value... 19 font Times\n"
"	Set string value... 19 size 12\n"
"	Set string value... 19 text %%Table of the relation between the four types of acoustic signal typing%\n"
"	# Row 20\n"
"	Set string value... 20 font Times\n"
"	Set string value... 20 size 12\n"
"	Set string value... 20 text %%and the perceptual judgment of overall voice quality for 39 speakers%\n"
"	# Row 21\n"
"	Set string value... 21 font Times\n"
"	Set string value... 21 size 12\n"
"	Set string value... 21 text %%(converted to percentages).%\n"
"	# Row 22\n"
"	Set string value... 22 font Courier\n"
"	Set string value... 22 size 12\n"
"	Set string value... 22 text |  Perceptual judgment of overall voice quality |\n"
"	# Row 23\n"
"	Set string value... 23 font Courier\n"
"	Set string value... 23 size 12\n"
"	Set string value... 23 text |         Good     Reasonable  Poor             |\n"
"	# Row 24\n"
"	Set string value... 24 font Courier\n"
"	Set string value... 24 size 12\n"
"	Set string value... 24 text | Type I    70\\%       40\\%          0\\%              |  \n"
"	# Row 25\n"
"	Set string value... 25 font Courier\n"
"	Set string value... 25 size 12\n"
"	Set string value... 25 text | Type II   45\\%       45\\%         10\\%              |\n"
"	# Row 26\n"
"	Set string value... 26 font Courier\n"
"	Set string value... 26 size 12\n"
"	Set string value... 26 text | Type III  20\\%       35\\%         45\\%              |\n"
"	# Row 27\n"
"	Set string value... 27 font Courier\n"
"	Set string value... 27 size 12\n"
"	Set string value... 27 text | Type IV    0\\%       25\\%         75\\%              |\n"
"	# Row 28\n"
"	Set string value... 28 font Times\n"
"	Set string value... 28 size 12\n"
"	Set string value... 28 text   \n"
"	# Row 29\n"
"	Set string value... 29 font Helvetica\n"
"	Set string value... 29 size 10\n"
"	Set string value... 29 text References:\n"
"	# Row 30\n"
"	Set string value... 30 font Helvetica\n"
"	Set string value... 30 size 10\n"
"	Set string value... 30 text \\bu Van As, C.J. (##2001#), %%Tracheoesophageal Speech. A Multidimensional Assessment of Voice Quality%, \n"
"	# Row 31\n"
"	Set string value... 31 font Helvetica\n"
"	Set string value... 31 size 10\n"
"	Set string value... 31 text Ph.D.-thesis, University of Amsterdam, 209 pag.\n"
"	# Row 32\n"
"	Set string value... 32 font Helvetica\n"
"	Set string value... 32 size 10\n"
"	Set string value... 32 text \\bu van As-Brooks, C.J., Koopmans-van Beinum, F.J., Pols, L.C.W., and Hilgers, F.J.M. (##2006#),\n"
"	# Row 33\n"
"	Set string value... 33 font Helvetica\n"
"	Set string value... 33 size 10\n"
"	Set string value... 33 text %%Acoustic Signal Typing for Evaluation of Voice Quality in Tracheoesophageal Speech%\n"
"	# Row 34\n"
"	Set string value... 34 font Helvetica\n"
"	Set string value... 34 size 10\n"
"	Set string value... 34 text Journal of Voice, Volume ##20# (3), p355-368\n"
"	# Row 35\n"
"	Set string value... 35 font Helvetica\n"
"	Set string value... 35 size 10\n"
"	Set string value... 35 text \\bu Van As, C.J. (##2008#), %%Acoustic analyses of postlaryngectomy voice and their perceptual relevance%\n"
"	# Row 36\n"
"	Set string value... 36 font Helvetica\n"
"	Set string value... 36 size 10\n"
"	Set string value... 36 text Invitational Round Table \"Evidence-based Voice and Speech Rehabilitation in Head and Neck Cancer\", p8-14\n"
"	# Row 37\n"
"	Set string value... 37 font Helvetica\n"
"	Set string value... 37 size 10\n"
"	Set string value... 37 text <http://dare.uva.nl/document/130984>\n"
"endproc\n"
"\n"
"procCreateInstruction_ES$ = \"Instruction_ES\"\n"
"procedure CreateInstruction_ES\n"
"	Create Table with column names... Instruction_ES 37\n"
"	... font size text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 font Times\n"
"	Set string value... 1 size 16\n"
"	Set string value... 1 text Acoustic Signal Types\n"
"	# Row 2\n"
"	Set string value... 2 font Times\n"
"	Set string value... 2 size 10\n"
"	Set string value... 2 text (Pathology types will be displayed in the main window, press a number key to set the type)\n"
"	# Row 3\n"
"	Set string value... 3 font Times\n"
"	Set string value... 3 size 12\n"
"	Set string value... 3 text   \n"
"	# Row 4\n"
"	Set string value... 4 font Times\n"
"	Set string value... 4 size 14\n"
"	Set string value... 4 text %%Type I - Stable \\&  Harmonic% \\s{(press 1)}\n"
"	# Row 5\n"
"	Set string value... 5 font Times\n"
"	Set string value... 5 size 12\n"
"	Set string value... 5 text - Stable signal for longer than two seconds, and\n"
"	# Row 6\n"
"	Set string value... 6 font Times\n"
"	Set string value... 6 size 12\n"
"	Set string value... 6 text - Clear harmonics up to at least 1000 Hz\n"
"	# Row 7\n"
"	Set string value... 7 font Times\n"
"	Set string value... 7 size 12\n"
"	Set string value... 7 text  \n"
"	# Row 8\n"
"	Set string value... 8 font Times\n"
"	Set string value... 8 size 14\n"
"	Set string value... 8 text %%Type II - Stable \\&  At least one harmonic% \\s{(press 2)}\n"
"	# Row 9\n"
"	Set string value... 9 font Times\n"
"	Set string value... 9 size 12\n"
"	Set string value... 9 text - Stable signal for longer than two seconds, and\n"
"	# Row 10\n"
"	Set string value... 10 font Times\n"
"	Set string value... 10 size 12\n"
"	Set string value... 10 text - At least one stable harmonic at the fundamental frequency for longer than two seconds\n"
"	# Row 11\n"
"	Set string value... 11 font Times\n"
"	Set string value... 11 size 12\n"
"	Set string value... 11 text  \n"
"	# Row 12\n"
"	Set string value... 12 font Times\n"
"	Set string value... 12 size 14\n"
"	Set string value... 12 text %%Type III - Unstable or Partly harmonic% \\s{(press 3)}\n"
"	# Row 13\n"
"	Set string value... 13 font Times\n"
"	Set string value... 13 size 12\n"
"	Set string value... 13 text - No stable signal for longer than two seconds, or\n"
"	# Row 14\n"
"	Set string value... 14 font Times\n"
"	Set string value... 14 size 12\n"
"	Set string value... 14 text - Harmonics in only part of the sample (for longer than 1 second)\n"
"	# Row 15\n"
"	Set string value... 15 font Times\n"
"	Set string value... 15 size 12\n"
"	Set string value... 15 text  \n"
"	# Row 16\n"
"	Set string value... 16 font Times\n"
"	Set string value... 16 size 14\n"
"	Set string value... 16 text %%Type IV - Barely harmonic% \\s{(press 4)}\n"
"	# Row 17\n"
"	Set string value... 17 font Times\n"
"	Set string value... 17 size 12\n"
"	Set string value... 17 text - No or only short-term detectable harmonics (for shorter than 1 second)\n"
"	# Row 18\n"
"	Set string value... 18 font Times\n"
"	Set string value... 18 size 12\n"
"	Set string value... 18 text   \n"
"	# Row 19\n"
"	Set string value... 19 font Times\n"
"	Set string value... 19 size 12\n"
"	Set string value... 19 text %%Table of the relation between the four types of acoustic signal typing%\n"
"	# Row 20\n"
"	Set string value... 20 font Times\n"
"	Set string value... 20 size 12\n"
"	Set string value... 20 text %%and the perceptual judgment of overall voice quality for 39 speakers%\n"
"	# Row 21\n"
"	Set string value... 21 font Times\n"
"	Set string value... 21 size 12\n"
"	Set string value... 21 text %%(converted to percentages).%\n"
"	# Row 22\n"
"	Set string value... 22 font Courier\n"
"	Set string value... 22 size 12\n"
"	Set string value... 22 text |  Perceptual judgment of overall voice quality |\n"
"	# Row 23\n"
"	Set string value... 23 font Courier\n"
"	Set string value... 23 size 12\n"
"	Set string value... 23 text |         Good     Reasonable  Poor             |\n"
"	# Row 24\n"
"	Set string value... 24 font Courier\n"
"	Set string value... 24 size 12\n"
"	Set string value... 24 text | Type I    70\\%       40\\%          0\\%              |  \n"
"	# Row 25\n"
"	Set string value... 25 font Courier\n"
"	Set string value... 25 size 12\n"
"	Set string value... 25 text | Type II   45\\%       45\\%         10\\%              |\n"
"	# Row 26\n"
"	Set string value... 26 font Courier\n"
"	Set string value... 26 size 12\n"
"	Set string value... 26 text | Type III  20\\%       35\\%         45\\%              |\n"
"	# Row 27\n"
"	Set string value... 27 font Courier\n"
"	Set string value... 27 size 12\n"
"	Set string value... 27 text | Type IV    0\\%       25\\%         75\\%              |\n"
"	# Row 28\n"
"	Set string value... 28 font Times\n"
"	Set string value... 28 size 12\n"
"	Set string value... 28 text   \n"
"	# Row 29\n"
"	Set string value... 29 font Helvetica\n"
"	Set string value... 29 size 10\n"
"	Set string value... 29 text References:\n"
"	# Row 30\n"
"	Set string value... 30 font Helvetica\n"
"	Set string value... 30 size 10\n"
"	Set string value... 30 text \\bu Van As, C.J. (##2001#), %%Tracheoesophageal Speech. A Multidimensional Assessment of Voice Quality%, \n"
"	# Row 31\n"
"	Set string value... 31 font Helvetica\n"
"	Set string value... 31 size 10\n"
"	Set string value... 31 text Ph.D.-thesis, University of Amsterdam, 209 pag.\n"
"	# Row 32\n"
"	Set string value... 32 font Helvetica\n"
"	Set string value... 32 size 10\n"
"	Set string value... 32 text \\bu van As-Brooks, C.J., Koopmans-van Beinum, F.J., Pols, L.C.W., and Hilgers, F.J.M. (##2006#),\n"
"	# Row 33\n"
"	Set string value... 33 font Helvetica\n"
"	Set string value... 33 size 10\n"
"	Set string value... 33 text %%Acoustic Signal Typing for Evaluation of Voice Quality in Tracheoesophageal Speech%\n"
"	# Row 34\n"
"	Set string value... 34 font Helvetica\n"
"	Set string value... 34 size 10\n"
"	Set string value... 34 text Journal of Voice, Volume ##20# (3), p355-368\n"
"	# Row 35\n"
"	Set string value... 35 font Helvetica\n"
"	Set string value... 35 size 10\n"
"	Set string value... 35 text \\bu Van As, C.J. (##2008#), %%Acoustic analyses of postlaryngectomy voice and their perceptual relevance%\n"
"	# Row 36\n"
"	Set string value... 36 font Helvetica\n"
"	Set string value... 36 size 10\n"
"	Set string value... 36 text Invitational Round Table \"Evidence-based Voice and Speech Rehabilitation in Head and Neck Cancer\", p8-14\n"
"	# Row 37\n"
"	Set string value... 37 font Helvetica\n"
"	Set string value... 37 size 10\n"
"	Set string value... 37 text <http://dare.uva.nl/document/130984>\n"
"endproc\n"
"\n"
"procCreateInstruction_JA$ = \"Instruction_JA\"\n"
"procedure CreateInstruction_JA\n"
"	Create Table with column names... Instruction_JA 37\n"
"	... font size text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 font Times\n"
"	Set string value... 1 size 16\n"
"	Set string value... 1 text Acoustic Signal Types\n"
"	# Row 2\n"
"	Set string value... 2 font Times\n"
"	Set string value... 2 size 10\n"
"	Set string value... 2 text (Pathology types will be displayed in the main window, press a number key to set the type)\n"
"	# Row 3\n"
"	Set string value... 3 font Times\n"
"	Set string value... 3 size 12\n"
"	Set string value... 3 text   \n"
"	# Row 4\n"
"	Set string value... 4 font Times\n"
"	Set string value... 4 size 14\n"
"	Set string value... 4 text %%Type I - Stable \\&  Harmonic% \\s{(press 1)}\n"
"	# Row 5\n"
"	Set string value... 5 font Times\n"
"	Set string value... 5 size 12\n"
"	Set string value... 5 text - Stable signal for longer than two seconds, and\n"
"	# Row 6\n"
"	Set string value... 6 font Times\n"
"	Set string value... 6 size 12\n"
"	Set string value... 6 text - Clear harmonics up to at least 1000 Hz\n"
"	# Row 7\n"
"	Set string value... 7 font Times\n"
"	Set string value... 7 size 12\n"
"	Set string value... 7 text  \n"
"	# Row 8\n"
"	Set string value... 8 font Times\n"
"	Set string value... 8 size 14\n"
"	Set string value... 8 text %%Type II - Stable \\&  At least one harmonic% \\s{(press 2)}\n"
"	# Row 9\n"
"	Set string value... 9 font Times\n"
"	Set string value... 9 size 12\n"
"	Set string value... 9 text - Stable signal for longer than two seconds, and\n"
"	# Row 10\n"
"	Set string value... 10 font Times\n"
"	Set string value... 10 size 12\n"
"	Set string value... 10 text - At least one stable harmonic at the fundamental frequency for longer than two seconds\n"
"	# Row 11\n"
"	Set string value... 11 font Times\n"
"	Set string value... 11 size 12\n"
"	Set string value... 11 text  \n"
"	# Row 12\n"
"	Set string value... 12 font Times\n"
"	Set string value... 12 size 14\n"
"	Set string value... 12 text %%Type III - Unstable or Partly harmonic% \\s{(press 3)}\n"
"	# Row 13\n"
"	Set string value... 13 font Times\n"
"	Set string value... 13 size 12\n"
"	Set string value... 13 text - No stable signal for longer than two seconds, or\n"
"	# Row 14\n"
"	Set string value... 14 font Times\n"
"	Set string value... 14 size 12\n"
"	Set string value... 14 text - Harmonics in only part of the sample (for longer than 1 second)\n"
"	# Row 15\n"
"	Set string value... 15 font Times\n"
"	Set string value... 15 size 12\n"
"	Set string value... 15 text  \n"
"	# Row 16\n"
"	Set string value... 16 font Times\n"
"	Set string value... 16 size 14\n"
"	Set string value... 16 text %%Type IV - Barely harmonic% \\s{(press 4)}\n"
"	# Row 17\n"
"	Set string value... 17 font Times\n"
"	Set string value... 17 size 12\n"
"	Set string value... 17 text - No or only short-term detectable harmonics (for shorter than 1 second)\n"
"	# Row 18\n"
"	Set string value... 18 font Times\n"
"	Set string value... 18 size 12\n"
"	Set string value... 18 text   \n"
"	# Row 19\n"
"	Set string value... 19 font Times\n"
"	Set string value... 19 size 12\n"
"	Set string value... 19 text %%Table of the relation between the four types of acoustic signal typing%\n"
"	# Row 20\n"
"	Set string value... 20 font Times\n"
"	Set string value... 20 size 12\n"
"	Set string value... 20 text %%and the perceptual judgment of overall voice quality for 39 speakers%\n"
"	# Row 21\n"
"	Set string value... 21 font Times\n"
"	Set string value... 21 size 12\n"
"	Set string value... 21 text %%(converted to percentages).%\n"
"	# Row 22\n"
"	Set string value... 22 font Courier\n"
"	Set string value... 22 size 12\n"
"	Set string value... 22 text |  Perceptual judgment of overall voice quality |\n"
"	# Row 23\n"
"	Set string value... 23 font Courier\n"
"	Set string value... 23 size 12\n"
"	Set string value... 23 text |         Good     Reasonable  Poor             |\n"
"	# Row 24\n"
"	Set string value... 24 font Courier\n"
"	Set string value... 24 size 12\n"
"	Set string value... 24 text | Type I    70\\%       40\\%          0\\%              |  \n"
"	# Row 25\n"
"	Set string value... 25 font Courier\n"
"	Set string value... 25 size 12\n"
"	Set string value... 25 text | Type II   45\\%       45\\%         10\\%              |\n"
"	# Row 26\n"
"	Set string value... 26 font Courier\n"
"	Set string value... 26 size 12\n"
"	Set string value... 26 text | Type III  20\\%       35\\%         45\\%              |\n"
"	# Row 27\n"
"	Set string value... 27 font Courier\n"
"	Set string value... 27 size 12\n"
"	Set string value... 27 text | Type IV    0\\%       25\\%         75\\%              |\n"
"	# Row 28\n"
"	Set string value... 28 font Times\n"
"	Set string value... 28 size 12\n"
"	Set string value... 28 text   \n"
"	# Row 29\n"
"	Set string value... 29 font Helvetica\n"
"	Set string value... 29 size 10\n"
"	Set string value... 29 text References:\n"
"	# Row 30\n"
"	Set string value... 30 font Helvetica\n"
"	Set string value... 30 size 10\n"
"	Set string value... 30 text \\bu Van As, C.J. (##2001#), %%Tracheoesophageal Speech. A Multidimensional Assessment of Voice Quality%, \n"
"	# Row 31\n"
"	Set string value... 31 font Helvetica\n"
"	Set string value... 31 size 10\n"
"	Set string value... 31 text Ph.D.-thesis, University of Amsterdam, 209 pag.\n"
"	# Row 32\n"
"	Set string value... 32 font Helvetica\n"
"	Set string value... 32 size 10\n"
"	Set string value... 32 text \\bu van As-Brooks, C.J., Koopmans-van Beinum, F.J., Pols, L.C.W., and Hilgers, F.J.M. (##2006#),\n"
"	# Row 33\n"
"	Set string value... 33 font Helvetica\n"
"	Set string value... 33 size 10\n"
"	Set string value... 33 text %%Acoustic Signal Typing for Evaluation of Voice Quality in Tracheoesophageal Speech%\n"
"	# Row 34\n"
"	Set string value... 34 font Helvetica\n"
"	Set string value... 34 size 10\n"
"	Set string value... 34 text Journal of Voice, Volume ##20# (3), p355-368\n"
"	# Row 35\n"
"	Set string value... 35 font Helvetica\n"
"	Set string value... 35 size 10\n"
"	Set string value... 35 text \\bu Van As, C.J. (##2008#), %%Acoustic analyses of postlaryngectomy voice and their perceptual relevance%\n"
"	# Row 36\n"
"	Set string value... 36 font Helvetica\n"
"	Set string value... 36 size 10\n"
"	Set string value... 36 text Invitational Round Table \"Evidence-based Voice and Speech Rehabilitation in Head and Neck Cancer\", p8-14\n"
"	# Row 37\n"
"	Set string value... 37 font Helvetica\n"
"	Set string value... 37 size 10\n"
"	Set string value... 37 text <http://dare.uva.nl/document/130984>\n"
"endproc\n"
"\n"
"procCreateInstruction_NL$ = \"Instruction_NL\"\n"
"procedure CreateInstruction_NL\n"
"	Create Table with column names... Instruction_NL 37\n"
"	... font size text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 font Times\n"
"	Set string value... 1 size 16\n"
"	Set string value... 1 text Acoustic Signal Types\n"
"	# Row 2\n"
"	Set string value... 2 font Times\n"
"	Set string value... 2 size 10\n"
"	Set string value... 2 text (Pathology types will be displayed in the main window, press a number key to set the type)\n"
"	# Row 3\n"
"	Set string value... 3 font Times\n"
"	Set string value... 3 size 12\n"
"	Set string value... 3 text   \n"
"	# Row 4\n"
"	Set string value... 4 font Times\n"
"	Set string value... 4 size 14\n"
"	Set string value... 4 text %%Type I - Stable \\&  Harmonic% \\s{(press 1)}\n"
"	# Row 5\n"
"	Set string value... 5 font Times\n"
"	Set string value... 5 size 12\n"
"	Set string value... 5 text - Stable signal for longer than two seconds, and\n"
"	# Row 6\n"
"	Set string value... 6 font Times\n"
"	Set string value... 6 size 12\n"
"	Set string value... 6 text - Clear harmonics up to at least 1000 Hz\n"
"	# Row 7\n"
"	Set string value... 7 font Times\n"
"	Set string value... 7 size 12\n"
"	Set string value... 7 text  \n"
"	# Row 8\n"
"	Set string value... 8 font Times\n"
"	Set string value... 8 size 14\n"
"	Set string value... 8 text %%Type II - Stable \\&  At least one harmonic% \\s{(press 2)}\n"
"	# Row 9\n"
"	Set string value... 9 font Times\n"
"	Set string value... 9 size 12\n"
"	Set string value... 9 text - Stable signal for longer than two seconds, and\n"
"	# Row 10\n"
"	Set string value... 10 font Times\n"
"	Set string value... 10 size 12\n"
"	Set string value... 10 text - At least one stable harmonic at the fundamental frequency for longer than two seconds\n"
"	# Row 11\n"
"	Set string value... 11 font Times\n"
"	Set string value... 11 size 12\n"
"	Set string value... 11 text  \n"
"	# Row 12\n"
"	Set string value... 12 font Times\n"
"	Set string value... 12 size 14\n"
"	Set string value... 12 text %%Type III - Unstable or Partly harmonic% \\s{(press 3)}\n"
"	# Row 13\n"
"	Set string value... 13 font Times\n"
"	Set string value... 13 size 12\n"
"	Set string value... 13 text - No stable signal for longer than two seconds, or\n"
"	# Row 14\n"
"	Set string value... 14 font Times\n"
"	Set string value... 14 size 12\n"
"	Set string value... 14 text - Harmonics in only part of the sample (for longer than 1 second)\n"
"	# Row 15\n"
"	Set string value... 15 font Times\n"
"	Set string value... 15 size 12\n"
"	Set string value... 15 text  \n"
"	# Row 16\n"
"	Set string value... 16 font Times\n"
"	Set string value... 16 size 14\n"
"	Set string value... 16 text %%Type IV - Barely harmonic% \\s{(press 4)}\n"
"	# Row 17\n"
"	Set string value... 17 font Times\n"
"	Set string value... 17 size 12\n"
"	Set string value... 17 text - No or only short-term detectable harmonics (for shorter than 1 second)\n"
"	# Row 18\n"
"	Set string value... 18 font Times\n"
"	Set string value... 18 size 12\n"
"	Set string value... 18 text   \n"
"	# Row 19\n"
"	Set string value... 19 font Times\n"
"	Set string value... 19 size 12\n"
"	Set string value... 19 text %%Table of the relation between the four types of acoustic signal typing%\n"
"	# Row 20\n"
"	Set string value... 20 font Times\n"
"	Set string value... 20 size 12\n"
"	Set string value... 20 text %%and the perceptual judgment of overall voice quality for 39 speakers%\n"
"	# Row 21\n"
"	Set string value... 21 font Times\n"
"	Set string value... 21 size 12\n"
"	Set string value... 21 text %%(converted to percentages).%\n"
"	# Row 22\n"
"	Set string value... 22 font Courier\n"
"	Set string value... 22 size 12\n"
"	Set string value... 22 text |  Perceptual judgment of overall voice quality |\n"
"	# Row 23\n"
"	Set string value... 23 font Courier\n"
"	Set string value... 23 size 12\n"
"	Set string value... 23 text |         Good     Reasonable  Poor             |\n"
"	# Row 24\n"
"	Set string value... 24 font Courier\n"
"	Set string value... 24 size 12\n"
"	Set string value... 24 text | Type I    70\\%       40\\%          0\\%              |  \n"
"	# Row 25\n"
"	Set string value... 25 font Courier\n"
"	Set string value... 25 size 12\n"
"	Set string value... 25 text | Type II   45\\%       45\\%         10\\%              |\n"
"	# Row 26\n"
"	Set string value... 26 font Courier\n"
"	Set string value... 26 size 12\n"
"	Set string value... 26 text | Type III  20\\%       35\\%         45\\%              |\n"
"	# Row 27\n"
"	Set string value... 27 font Courier\n"
"	Set string value... 27 size 12\n"
"	Set string value... 27 text | Type IV    0\\%       25\\%         75\\%              |\n"
"	# Row 28\n"
"	Set string value... 28 font Times\n"
"	Set string value... 28 size 12\n"
"	Set string value... 28 text   \n"
"	# Row 29\n"
"	Set string value... 29 font Helvetica\n"
"	Set string value... 29 size 10\n"
"	Set string value... 29 text References:\n"
"	# Row 30\n"
"	Set string value... 30 font Helvetica\n"
"	Set string value... 30 size 10\n"
"	Set string value... 30 text \\bu Van As, C.J. (##2001#), %%Tracheoesophageal Speech. A Multidimensional Assessment of Voice Quality%, \n"
"	# Row 31\n"
"	Set string value... 31 font Helvetica\n"
"	Set string value... 31 size 10\n"
"	Set string value... 31 text Ph.D.-thesis, University of Amsterdam, 209 pag.\n"
"	# Row 32\n"
"	Set string value... 32 font Helvetica\n"
"	Set string value... 32 size 10\n"
"	Set string value... 32 text \\bu van As-Brooks, C.J., Koopmans-van Beinum, F.J., Pols, L.C.W., and Hilgers, F.J.M. (##2006#),\n"
"	# Row 33\n"
"	Set string value... 33 font Helvetica\n"
"	Set string value... 33 size 10\n"
"	Set string value... 33 text %%Acoustic Signal Typing for Evaluation of Voice Quality in Tracheoesophageal Speech%\n"
"	# Row 34\n"
"	Set string value... 34 font Helvetica\n"
"	Set string value... 34 size 10\n"
"	Set string value... 34 text Journal of Voice, Volume ##20# (3), p355-368\n"
"	# Row 35\n"
"	Set string value... 35 font Helvetica\n"
"	Set string value... 35 size 10\n"
"	Set string value... 35 text \\bu Van As, C.J. (##2008#), %%Acoustic analyses of postlaryngectomy voice and their perceptual relevance%\n"
"	# Row 36\n"
"	Set string value... 36 font Helvetica\n"
"	Set string value... 36 size 10\n"
"	Set string value... 36 text Invitational Round Table \"Evidence-based Voice and Speech Rehabilitation in Head and Neck Cancer\", p8-14\n"
"	# Row 37\n"
"	Set string value... 37 font Helvetica\n"
"	Set string value... 37 size 10\n"
"	Set string value... 37 text <http://dare.uva.nl/document/130984>\n"
"endproc\n"
"\n"
"procCreateMainPage$ = \"MainPage\"\n"
"procedure CreateMainPage\n"
"	Create Table with column names... MainPage 30\n"
"	... Label LeftX RightX LowY HighY Color Draw\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 LeftX 0\n"
"	Set string value... 1 RightX 0\n"
"	Set string value... 1 LowY 0\n"
"	Set string value... 1 HighY 0\n"
"	Set string value... 1 Color Black\n"
"	Set string value... 1 Draw DrawNull\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 LeftX 0\n"
"	Set string value... 2 RightX 0\n"
"	Set string value... 2 LowY 0\n"
"	Set string value... 2 HighY 0\n"
"	Set string value... 2 Color Black\n"
"	Set string value... 2 Draw DrawNull\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 LeftX 0\n"
"	Set string value... 3 RightX 0\n"
"	Set string value... 3 LowY 0\n"
"	Set string value... 3 HighY 0\n"
"	Set string value... 3 Color Black\n"
"	Set string value... 3 Draw DrawNull\n"
"	# Row 4\n"
"	Set string value... 4 Label !WindowTitle\n"
"	Set string value... 4 LeftX 0\n"
"	Set string value... 4 RightX 0\n"
"	Set string value... 4 LowY 0\n"
"	Set string value... 4 HighY 0\n"
"	Set string value... 4 Color Black\n"
"	Set string value... 4 Draw DrawNull\n"
"	# Row 5\n"
"	Set string value... 5 Label !CANVAS\n"
"	Set string value... 5 LeftX 5\n"
"	Set string value... 5 RightX 85\n"
"	Set string value... 5 LowY 25\n"
"	Set string value... 5 HighY 95\n"
"	Set string value... 5 Color Black\n"
"	Set string value... 5 Draw DrawNull\n"
"	# Row 6\n"
"	Set string value... 6 Label !PathologicalType\n"
"	Set string value... 6 LeftX 20\n"
"	Set string value... 6 RightX 80\n"
"	Set string value... 6 LowY 90\n"
"	Set string value... 6 HighY 120\n"
"	Set string value... 6 Color Black\n"
"	Set string value... 6 Draw DrawNull\n"
"	# Row 7\n"
"	Set string value... 7 Label Speaker\n"
"	Set string value... 7 LeftX 0\n"
"	Set string value... 7 RightX 5\n"
"	Set string value... 7 LowY 0\n"
"	Set string value... 7 HighY 10\n"
"	Set string value... 7 Color Black\n"
"	Set string value... 7 Draw DrawNull\n"
"	# Row 8\n"
"	Set string value... 8 Label !NextItem\n"
"	Set string value... 8 LeftX 0\n"
"	Set string value... 8 RightX 5\n"
"	Set string value... 8 LowY 0\n"
"	Set string value... 8 HighY 10\n"
"	Set string value... 8 Color Blue\n"
"	Set string value... 8 Draw DrawNext\n"
"	# Row 9\n"
"	Set string value... 9 Label !PreviousItem\n"
"	Set string value... 9 LeftX 0\n"
"	Set string value... 9 RightX 5\n"
"	Set string value... 9 LowY 0\n"
"	Set string value... 9 HighY 10\n"
"	Set string value... 9 Color Blue\n"
"	Set string value... 9 Draw DrawPrevious\n"
"	# Row 10\n"
"	Set string value... 10 Label File\n"
"	Set string value... 10 LeftX 7\n"
"	Set string value... 10 RightX 17\n"
"	Set string value... 10 LowY 0\n"
"	Set string value... 10 HighY 10\n"
"	Set string value... 10 Color Black\n"
"	Set string value... 10 Draw DrawNull\n"
"	# Row 11\n"
"	Set string value... 11 Label Record\n"
"	Set string value... 11 LeftX 19\n"
"	Set string value... 11 RightX 29\n"
"	Set string value... 11 LowY 0\n"
"	Set string value... 11 HighY 10\n"
"	Set string value... 11 Color Red\n"
"	Set string value... 11 Draw DrawRecord\n"
"	# Row 12\n"
"	Set string value... 12 Label Play\n"
"	Set string value... 12 LeftX 31\n"
"	Set string value... 12 RightX 41\n"
"	Set string value... 12 LowY 0\n"
"	Set string value... 12 HighY 10\n"
"	Set string value... 12 Color Red\n"
"	Set string value... 12 Draw DrawPlay\n"
"	# Row 13\n"
"	Set string value... 13 Label Quit\n"
"	Set string value... 13 LeftX 90\n"
"	Set string value... 13 RightX 100\n"
"	Set string value... 13 LowY 90\n"
"	Set string value... 13 HighY 100\n"
"	Set string value... 13 Color Red\n"
"	Set string value... 13 Draw DrawQuit\n"
"	# Row 14\n"
"	Set string value... 14 Label Config\n"
"	Set string value... 14 LeftX 90\n"
"	Set string value... 14 RightX 100\n"
"	Set string value... 14 LowY 78\n"
"	Set string value... 14 HighY 88\n"
"	Set string value... 14 Color Black\n"
"	Set string value... 14 Draw DrawConfig\n"
"	# Row 15\n"
"	Set string value... 15 Label Refresh\n"
"	Set string value... 15 LeftX 90\n"
"	Set string value... 15 RightX 100\n"
"	Set string value... 15 LowY 66\n"
"	Set string value... 15 HighY 76\n"
"	Set string value... 15 Color Black\n"
"	Set string value... 15 Draw DrawRefresh\n"
"	# Row 16\n"
"	Set string value... 16 Label Help\n"
"	Set string value... 16 LeftX 90\n"
"	Set string value... 16 RightX 100\n"
"	Set string value... 16 LowY 54\n"
"	Set string value... 16 HighY 64\n"
"	Set string value... 16 Color Black\n"
"	Set string value... 16 Draw DrawHelp\n"
"	# Row 17\n"
"	Set string value... 17 Label Save\n"
"	Set string value... 17 LeftX 90\n"
"	Set string value... 17 RightX 100\n"
"	Set string value... 17 LowY 47\n"
"	Set string value... 17 HighY 52\n"
"	Set string value... 17 Color Black\n"
"	Set string value... 17 Draw DrawSave\n"
"	# Row 18\n"
"	Set string value... 18 Label Draw_Sound\n"
"	Set string value... 18 LeftX 90\n"
"	Set string value... 18 RightX 100\n"
"	Set string value... 18 LowY 41\n"
"	Set string value... 18 HighY 46\n"
"	Set string value... 18 Color Black\n"
"	Set string value... 18 Draw DrawNull\n"
"	# Row 19\n"
"	Set string value... 19 Label Draw_Pitch\n"
"	Set string value... 19 LeftX 90\n"
"	Set string value... 19 RightX 100\n"
"	Set string value... 19 LowY 35\n"
"	Set string value... 19 HighY 40\n"
"	Set string value... 19 Color Black\n"
"	Set string value... 19 Draw DrawNull\n"
"	# Row 20\n"
"	Set string value... 20 Label Draw_Spectrogram\n"
"	Set string value... 20 LeftX 90\n"
"	Set string value... 20 RightX 100\n"
"	Set string value... 20 LowY 29\n"
"	Set string value... 20 HighY 34\n"
"	Set string value... 20 Color Black\n"
"	Set string value... 20 Draw DrawNull\n"
"	# Row 21\n"
"	Set string value... 21 Label Draw_Ltas\n"
"	Set string value... 21 LeftX 90\n"
"	Set string value... 21 RightX 100\n"
"	Set string value... 21 LowY 23\n"
"	Set string value... 21 HighY 28\n"
"	Set string value... 21 Color Black\n"
"	Set string value... 21 Draw DrawNull\n"
"	# Row 22\n"
"	Set string value... 22 Label Draw_Intensity\n"
"	Set string value... 22 LeftX 90\n"
"	Set string value... 22 RightX 100\n"
"	Set string value... 22 LowY 17\n"
"	Set string value... 22 HighY 22\n"
"	Set string value... 22 Color Black\n"
"	Set string value... 22 Draw DrawNull\n"
"	# Row 23\n"
"	Set string value... 23 Label Draw_Harmonicity\n"
"	Set string value... 23 LeftX 90\n"
"	Set string value... 23 RightX 100\n"
"	Set string value... 23 LowY 11\n"
"	Set string value... 23 HighY 16\n"
"	Set string value... 23 Color Black\n"
"	Set string value... 23 Draw DrawNull\n"
"	# Row 24\n"
"	Set string value... 24 Label Draw_Rating\n"
"	Set string value... 24 LeftX 90\n"
"	Set string value... 24 RightX 100\n"
"	Set string value... 24 LowY 5\n"
"	Set string value... 24 HighY 10\n"
"	Set string value... 24 Color Black\n"
"	Set string value... 24 Draw DrawNull\n"
"	# Row 25\n"
"	Set string value... 25 Label Select\n"
"	Set string value... 25 LeftX 60\n"
"	Set string value... 25 RightX 70\n"
"	Set string value... 25 LowY 7\n"
"	Set string value... 25 HighY 12\n"
"	Set string value... 25 Color Black\n"
"	Set string value... 25 Draw DrawNull\n"
"	# Row 26\n"
"	Set string value... 26 Label ToSelection\n"
"	Set string value... 26 LeftX 60\n"
"	Set string value... 26 RightX 70\n"
"	Set string value... 26 LowY 0\n"
"	Set string value... 26 HighY 5\n"
"	Set string value... 26 Color Black\n"
"	Set string value... 26 Draw DrawNull\n"
"	# Row 27\n"
"	Set string value... 27 Label ZoomOut\n"
"	Set string value... 27 LeftX 75\n"
"	Set string value... 27 RightX 85\n"
"	Set string value... 27 LowY 7\n"
"	Set string value... 27 HighY 12\n"
"	Set string value... 27 Color Black\n"
"	Set string value... 27 Draw DrawNull\n"
"	# Row 28\n"
"	Set string value... 28 Label ZoomIn\n"
"	Set string value... 28 LeftX 45\n"
"	Set string value... 28 RightX 55\n"
"	Set string value... 28 LowY 7\n"
"	Set string value... 28 HighY 12\n"
"	Set string value... 28 Color Black\n"
"	Set string value... 28 Draw DrawNull\n"
"	# Row 29\n"
"	Set string value... 29 Label Previous\n"
"	Set string value... 29 LeftX 45\n"
"	Set string value... 29 RightX 55\n"
"	Set string value... 29 LowY 0\n"
"	Set string value... 29 HighY 5\n"
"	Set string value... 29 Color Black\n"
"	Set string value... 29 Draw DrawPrevious\n"
"	# Row 30\n"
"	Set string value... 30 Label Next\n"
"	Set string value... 30 LeftX 75\n"
"	Set string value... 30 RightX 85\n"
"	Set string value... 30 LowY 0\n"
"	Set string value... 30 HighY 5\n"
"	Set string value... 30 Color Black\n"
"	Set string value... 30 Draw DrawNext\n"
"endproc\n"
"\n"
"procCreateMainPage_DE$ = \"MainPage_DE\"\n"
"procedure CreateMainPage_DE\n"
"	Create Table with column names... MainPage_DE 30\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Autor\n"
"	Set string value... 1 Key §\n"
"	Set string value... 1 Helptext R.J.J.H. van Son, \\U\"bersetzung: Irene Jacobi\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key §\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text Lizenz\n"
"	Set string value... 3 Key §\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !WindowTitle\n"
"	Set string value... 4 Text DemoVersion: Hauptseite\n"
"	Set string value... 4 Key §\n"
"	Set string value... 4 Helptext DemoVersion: Hauptseite\n"
"	# Row 5\n"
"	Set string value... 5 Label !CANVAS\n"
"	Set string value... 5 Text Fenster\n"
"	Set string value... 5 Key §\n"
"	Set string value... 5 Helptext Zeichenbereich\n"
"	# Row 6\n"
"	Set string value... 6 Label !PathologicalType\n"
"	Set string value... 6 Text - Signal Typos:\n"
"	Set string value... 6 Key 012349\n"
"	Set string value... 6 Helptext Pathologischer Signal Typos (AST) in \\U\"berschrift I-IV, Taste 1-4, 0 l\\o\"scht\n"
"	# Row 7\n"
"	Set string value... 7 Label Speaker\n"
"	Set string value... 7 Text !90!Sprecher\n"
"	Set string value... 7 Key p\n"
"	Set string value... 7 Helptext Eingabe Sprecher daten\n"
"	# Row 8\n"
"	Set string value... 8 Label !NextItem\n"
"	Set string value... 8 Text Spr\n"
"	Set string value... 8 Key x|\\\\\n"
"	Set string value... 8 Helptext N\\a\"chste Aufname w\\a\"hrend seriele Eingabe\n"
"	# Row 9\n"
"	Set string value... 9 Label !PreviousItem\n"
"	Set string value... 9 Text Spr\n"
"	Set string value... 9 Key x|\\\\\n"
"	Set string value... 9 Helptext Vorherige Aufnahme w\\a\"hrend seriele Eingabe\n"
"	# Row 10\n"
"	Set string value... 10 Label File\n"
"	Set string value... 10 Text \\O\"ffnen\n"
"	Set string value... 10 Key f\n"
"	Set string value... 10 Helptext Laden einer Audio-Datei\n"
"	# Row 11\n"
"	Set string value... 11 Label Record\n"
"	Set string value... 11 Text Aufnahme\n"
"	Set string value... 11 Key A\n"
"	Set string value... 11 Helptext Machen Sie eine Sprachaufnahme. Sie haben 4 Sekunden bevor die Aufnahme beginnt; achten Sie auf das rote Licht.\n"
"	# Row 12\n"
"	Set string value... 12 Label Play\n"
"	Set string value... 12 Text Wiedergabe\n"
"	Set string value... 12 Key W\n"
"	Set string value... 12 Helptext Abspielen der Aufnahme\n"
"	# Row 13\n"
"	Set string value... 13 Label Quit\n"
"	Set string value... 13 Text Ende\n"
"	Set string value... 13 Key E\n"
"	Set string value... 13 Helptext Das Programm beenden\n"
"	# Row 14\n"
"	Set string value... 14 Label Config\n"
"	Set string value... 14 Text Einstellungen\n"
"	Set string value... 14 Key g\n"
"	Set string value... 14 Helptext Zur Seite \"Einstellungen\"\n"
"	# Row 15\n"
"	Set string value... 15 Label Refresh\n"
"	Set string value... 15 Text Aktualisieren\n"
"	Set string value... 15 Key u\n"
"	Set string value... 15 Helptext Der aktuelle Bildschirm wird abgebildet. Mit der Leertaste kann der Bildschirm aktualisiert werden.\n"
"	# Row 16\n"
"	Set string value... 16 Label Help\n"
"	Set string value... 16 Text Hilfe\n"
"	Set string value... 16 Key ?/\n"
"	Set string value... 16 Helptext Dr\\u\"cken Sie auf den Knopf \\u\"ber den Sie Informationen m\\o\"chten. Dr\\u\"cken Sie danach auf \"Hilfe\".\n"
"	# Row 17\n"
"	Set string value... 17 Label Save\n"
"	Set string value... 17 Text Drucken \\#\n"
"	Set string value... 17 Key #\n"
"	Set string value... 17 Helptext Speichern der Daten zum abdrucken\n"
"	# Row 18\n"
"	Set string value... 18 Label Draw_Sound\n"
"	Set string value... 18 Text Audio\n"
"	Set string value... 18 Key d\n"
"	Set string value... 18 Helptext Abbildung des Audiosignals\n"
"	# Row 19\n"
"	Set string value... 19 Label Draw_Pitch\n"
"	Set string value... 19 Text Tonh\\o\"he\n"
"	Set string value... 19 Key T\n"
"	Set string value... 19 Helptext Abbildung der Tonh\\o\"he\n"
"	# Row 20\n"
"	Set string value... 20 Label Draw_Harmonicity\n"
"	Set string value... 20 Text Harmonizit\\a\"t\n"
"	Set string value... 20 Key H\n"
"	Set string value... 20 Helptext Abbildung des Harmonicity-to-Noise Verh\\a\"ltnis\n"
"	# Row 21\n"
"	Set string value... 21 Label Draw_Spectrogram\n"
"	Set string value... 21 Text Spektrogramm\n"
"	Set string value... 21 Key S\n"
"	Set string value... 21 Helptext Abbildung des Schmalband-Spektrogramms (100 ms) mit Formante\n"
"	# Row 22\n"
"	Set string value... 22 Label Draw_Ltas\n"
"	Set string value... 22 Text Ltas\n"
"	Set string value... 22 Key L\n"
"	Set string value... 22 Helptext Abbildung des gemittelten Langzeitspektrums\n"
"	# Row 23\n"
"	Set string value... 23 Label Draw_Intensity\n"
"	Set string value... 23 Text Intensit\\a\"t\n"
"	Set string value... 23 Key I\n"
"	Set string value... 23 Helptext Abbildung der Intensit\\a\"t\n"
"	# Row 24\n"
"	Set string value... 24 Label Draw_Rating\n"
"	Set string value... 24 Text Wertung\n"
"	Set string value... 24 Key #\n"
"	Set string value... 24 Helptext Bewerten Sie die Sprache \n"
"	# Row 25\n"
"	Set string value... 25 Label Select\n"
"	Set string value... 25 Text Selektieren\n"
"	Set string value... 25 Key r\n"
"	Set string value... 25 Helptext Selektieren von Start- und Endzeiten\n"
"	# Row 26\n"
"	Set string value... 26 Label ToSelection\n"
"	Set string value... 26 Text Zur Selektion\n"
"	Set string value... 26 Key Z\n"
"	Set string value... 26 Helptext Gehe zum selektierten Abschnitt\n"
"	# Row 27\n"
"	Set string value... 27 Label ZoomOut\n"
"	Set string value... 27 Text Zoom out +\n"
"	Set string value... 27 Key o+=\n"
"	Set string value... 27 Helptext Verdoppelung der Fenstergr\\o\"sse / Verkleinern\n"
"	# Row 28\n"
"	Set string value... 28 Label ZoomIn\n"
"	Set string value... 28 Text Zoom in -\n"
"	Set string value... 28 Key m\\-_\n"
"	Set string value... 28 Helptext Halbierung der Fenstergr\\o\"sse / Vergr\\o\"ssern\n"
"	# Row 29\n"
"	Set string value... 29 Label Previous\n"
"	Set string value... 29 Text < Zur\\u\"ck\n"
"	Set string value... 29 Key \\<\\,\n"
"	Set string value... 29 Helptext zum vorigen Abschnitt\n"
"	# Row 30\n"
"	Set string value... 30 Label Next\n"
"	Set string value... 30 Text Voraus >\n"
"	Set string value... 30 Key \\>\\.\n"
"	Set string value... 30 Helptext zum n\\a\"chsten Abschnitt\n"
"endproc\n"
"\n"
"procCreateMainPage_EN$ = \"MainPage_EN\"\n"
"procedure CreateMainPage_EN\n"
"	Create Table with column names... MainPage_EN 30\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !WindowTitle\n"
"	Set string value... 4 Text NKI TE-VOICE ANALYSIS tool: Main page\n"
"	Set string value... 4 Key !\n"
"	Set string value... 4 Helptext NKI TE-VOICE ANALYSIS tool: Main page\n"
"	# Row 5\n"
"	Set string value... 5 Label !CANVAS\n"
"	Set string value... 5 Text Display\n"
"	Set string value... 5 Key ¤\n"
"	Set string value... 5 Helptext Display area\n"
"	# Row 6\n"
"	Set string value... 6 Label !PathologicalType\n"
"	Set string value... 6 Text - Signal Type:\n"
"	Set string value... 6 Key 012349\n"
"	Set string value... 6 Helptext Pathological Signal Type (AST) in window title I-IV, type 1-4, 0 erases\n"
"	# Row 7\n"
"	Set string value... 7 Label Speaker\n"
"	Set string value... 7 Text !90!Speaker\n"
"	Set string value... 7 Key k\n"
"	Set string value... 7 Helptext Input speaker data\n"
"	# Row 8\n"
"	Set string value... 8 Label !NextItem\n"
"	Set string value... 8 Text Spk\n"
"	Set string value... 8 Key x|\\\\\n"
"	Set string value... 8 Helptext Next recording in %serial mode\n"
"	# Row 9\n"
"	Set string value... 9 Label !PreviousItem\n"
"	Set string value... 9 Text Spk\n"
"	Set string value... 9 Key x|\\\\\n"
"	Set string value... 9 Helptext Previous recording in %serial mode\n"
"	# Row 10\n"
"	Set string value... 10 Label File\n"
"	Set string value... 10 Text Open\n"
"	Set string value... 10 Key O\n"
"	Set string value... 10 Helptext Open sound file\n"
"	# Row 11\n"
"	Set string value... 11 Label Record\n"
"	Set string value... 11 Text Record\n"
"	Set string value... 11 Key R\n"
"	Set string value... 11 Helptext Record your speech. You have 4 seconds, watch the recording \"light\"\n"
"	# Row 12\n"
"	Set string value... 12 Label Play\n"
"	Set string value... 12 Text Play\n"
"	Set string value... 12 Key P\n"
"	Set string value... 12 Helptext Play back of your recorded pronunciation\n"
"	# Row 13\n"
"	Set string value... 13 Label Quit\n"
"	Set string value... 13 Text Quit\n"
"	Set string value... 13 Key Q\n"
"	Set string value... 13 Helptext Quit TEVA\n"
"	# Row 14\n"
"	Set string value... 14 Label Config\n"
"	Set string value... 14 Text Settings\n"
"	Set string value... 14 Key S\n"
"	Set string value... 14 Helptext Go to %%Configuration% page\n"
"	# Row 15\n"
"	Set string value... 15 Label Refresh\n"
"	Set string value... 15 Text Refresh\n"
"	Set string value... 15 Key h\n"
"	Set string value... 15 Helptext Redraw the current screen, the space-bar always refreshes screen\n"
"	# Row 16\n"
"	Set string value... 16 Label Help\n"
"	Set string value... 16 Text Help\n"
"	Set string value... 16 Key ?/\n"
"	Set string value... 16 Helptext Press the button you want information on, \"Help\" to continue\n"
"	# Row 17\n"
"	Set string value... 17 Label Save\n"
"	Set string value... 17 Text Print \\# \n"
"	Set string value... 17 Key #\n"
"	Set string value... 17 Helptext Save a report in printer format\n"
"	# Row 18\n"
"	Set string value... 18 Label Draw_Sound\n"
"	Set string value... 18 Text Sound\n"
"	Set string value... 18 Key S\n"
"	Set string value... 18 Helptext Draw the Sound\n"
"	# Row 19\n"
"	Set string value... 19 Label Draw_Pitch\n"
"	Set string value... 19 Text Pitch\n"
"	Set string value... 19 Key t\n"
"	Set string value... 19 Helptext Draw Pitch\n"
"	# Row 20\n"
"	Set string value... 20 Label Draw_Harmonicity\n"
"	Set string value... 20 Text Harmonicity\n"
"	Set string value... 20 Key H\n"
"	Set string value... 20 Helptext Draw the Harmonicity to Noise ratio\n"
"	# Row 21\n"
"	Set string value... 21 Label Draw_Spectrogram\n"
"	Set string value... 21 Text Spectrogram\n"
"	Set string value... 21 Key L\n"
"	Set string value... 21 Helptext Narrow band spectrogram (100 ms) with formants superimposed\n"
"	# Row 22\n"
"	Set string value... 22 Label Draw_Ltas\n"
"	Set string value... 22 Text Ltas\n"
"	Set string value... 22 Key L\n"
"	Set string value... 22 Helptext Long time average spectrum\n"
"	# Row 23\n"
"	Set string value... 23 Label Draw_Intensity\n"
"	Set string value... 23 Text Intensity\n"
"	Set string value... 23 Key I\n"
"	Set string value... 23 Helptext Draw Intensity\n"
"	# Row 24\n"
"	Set string value... 24 Label Draw_Rating\n"
"	Set string value... 24 Text Rating\n"
"	Set string value... 24 Key #\n"
"	Set string value... 24 Helptext Rate the speech on scales \n"
"	# Row 25\n"
"	Set string value... 25 Label Select\n"
"	Set string value... 25 Text Select\n"
"	Set string value... 25 Key e\n"
"	Set string value... 25 Helptext Select new start and endtime\n"
"	# Row 26\n"
"	Set string value... 26 Label ToSelection\n"
"	Set string value... 26 Text To selection\n"
"	Set string value... 26 Key c\n"
"	Set string value... 26 Helptext Go to selected start and endtime\n"
"	# Row 27\n"
"	Set string value... 27 Label ZoomOut\n"
"	Set string value... 27 Text Zoom out -\n"
"	Set string value... 27 Key u\\-_\n"
"	Set string value... 27 Helptext Double the current time window\n"
"	# Row 28\n"
"	Set string value... 28 Label ZoomIn\n"
"	Set string value... 28 Text Zoom in +\n"
"	Set string value... 28 Key n+=\n"
"	Set string value... 28 Helptext Halve the current time window\n"
"	# Row 29\n"
"	Set string value... 29 Label Previous\n"
"	Set string value... 29 Text < Previous\n"
"	Set string value... 29 Key \\<\\,\n"
"	Set string value... 29 Helptext Previous interval, or shift current time window to the left\n"
"	# Row 30\n"
"	Set string value... 30 Label Next\n"
"	Set string value... 30 Text Next >\n"
"	Set string value... 30 Key \\>\\.\n"
"	Set string value... 30 Helptext Next interval, or shift the current time window to the right\n"
"endproc\n"
"\n"
"procCreateMainPage_ES$ = \"MainPage_ES\"\n"
"procedure CreateMainPage_ES\n"
"	Create Table with column names... MainPage_ES 30\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son \\& Nieves Broquetas\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !WindowTitle\n"
"	Set string value... 4 Text NKI TE-VOICE ANALYSIS Herramienta: Página principal\n"
"	Set string value... 4 Key !\n"
"	Set string value... 4 Helptext NKI TE-VOICE ANALYSIS Herramienta: Página principal\n"
"	# Row 5\n"
"	Set string value... 5 Label !CANVAS\n"
"	Set string value... 5 Text Display\n"
"	Set string value... 5 Key ¤\n"
"	Set string value... 5 Helptext Display area\n"
"	# Row 6\n"
"	Set string value... 6 Label !PathologicalType\n"
"	Set string value... 6 Text - Pathological Type:\n"
"	Set string value... 6 Key 012349\n"
"	Set string value... 6 Helptext Pathological Signal Type (AST) in window title I-IV, type 1-4, 0 erases\n"
"	# Row 7\n"
"	Set string value... 7 Label Speaker\n"
"	Set string value... 7 Text !90!Speaker\n"
"	Set string value... 7 Key k\n"
"	Set string value... 7 Helptext Input speaker data\n"
"	# Row 8\n"
"	Set string value... 8 Label !NextItem\n"
"	Set string value... 8 Text Spk\n"
"	Set string value... 8 Key x|\\\\\n"
"	Set string value... 8 Helptext Next recording in %serial mode\n"
"	# Row 9\n"
"	Set string value... 9 Label !PreviousItem\n"
"	Set string value... 9 Text Spk\n"
"	Set string value... 9 Key x|\\\\\n"
"	Set string value... 9 Helptext Previous recording in %serial mode\n"
"	# Row 10\n"
"	Set string value... 10 Label File\n"
"	Set string value... 10 Text Open\n"
"	Set string value... 10 Key O\n"
"	Set string value... 10 Helptext Open sound file\n"
"	# Row 11\n"
"	Set string value... 11 Label Record\n"
"	Set string value... 11 Text Record\n"
"	Set string value... 11 Key R\n"
"	Set string value... 11 Helptext Record your speech. You have 4 seconds, watch the recording \"light\"\n"
"	# Row 12\n"
"	Set string value... 12 Label Play\n"
"	Set string value... 12 Text Play\n"
"	Set string value... 12 Key P\n"
"	Set string value... 12 Helptext Play back of your recorded pronunciation\n"
"	# Row 13\n"
"	Set string value... 13 Label Quit\n"
"	Set string value... 13 Text Quit\n"
"	Set string value... 13 Key Q\n"
"	Set string value... 13 Helptext Quit TEVA\n"
"	# Row 14\n"
"	Set string value... 14 Label Config\n"
"	Set string value... 14 Text Settings\n"
"	Set string value... 14 Key S\n"
"	Set string value... 14 Helptext Go to %%Configuration% page\n"
"	# Row 15\n"
"	Set string value... 15 Label Refresh\n"
"	Set string value... 15 Text Refresh\n"
"	Set string value... 15 Key h\n"
"	Set string value... 15 Helptext Redraw the current screen, the space-bar always refreshes screen\n"
"	# Row 16\n"
"	Set string value... 16 Label Help\n"
"	Set string value... 16 Text Help\n"
"	Set string value... 16 Key ?/\n"
"	Set string value... 16 Helptext Press the button you want information on, \"Help\" to continue\n"
"	# Row 17\n"
"	Set string value... 17 Label Save\n"
"	Set string value... 17 Text Print \\# \n"
"	Set string value... 17 Key #\n"
"	Set string value... 17 Helptext Save a report in printer format\n"
"	# Row 18\n"
"	Set string value... 18 Label Draw_Sound\n"
"	Set string value... 18 Text Sound\n"
"	Set string value... 18 Key S\n"
"	Set string value... 18 Helptext Draw the Sound\n"
"	# Row 19\n"
"	Set string value... 19 Label Draw_Pitch\n"
"	Set string value... 19 Text Pitch\n"
"	Set string value... 19 Key t\n"
"	Set string value... 19 Helptext Draw Pitch\n"
"	# Row 20\n"
"	Set string value... 20 Label Draw_Harmonicity\n"
"	Set string value... 20 Text Harmonicity\n"
"	Set string value... 20 Key H\n"
"	Set string value... 20 Helptext Draw the Harmonicity to Noise ratio\n"
"	# Row 21\n"
"	Set string value... 21 Label Draw_Spectrogram\n"
"	Set string value... 21 Text Spectrogram\n"
"	Set string value... 21 Key L\n"
"	Set string value... 21 Helptext Narrow band spectrogram (100 ms) with formants superimposed\n"
"	# Row 22\n"
"	Set string value... 22 Label Draw_Ltas\n"
"	Set string value... 22 Text Ltas\n"
"	Set string value... 22 Key L\n"
"	Set string value... 22 Helptext Long time average spectrum\n"
"	# Row 23\n"
"	Set string value... 23 Label Draw_Intensity\n"
"	Set string value... 23 Text Intensity\n"
"	Set string value... 23 Key I\n"
"	Set string value... 23 Helptext Draw Intensity\n"
"	# Row 24\n"
"	Set string value... 24 Label Draw_Rating\n"
"	Set string value... 24 Text Rating\n"
"	Set string value... 24 Key #\n"
"	Set string value... 24 Helptext Rate the speech on scales \n"
"	# Row 25\n"
"	Set string value... 25 Label Select\n"
"	Set string value... 25 Text Select\n"
"	Set string value... 25 Key e\n"
"	Set string value... 25 Helptext Select new start and endtime\n"
"	# Row 26\n"
"	Set string value... 26 Label ToSelection\n"
"	Set string value... 26 Text To selection\n"
"	Set string value... 26 Key c\n"
"	Set string value... 26 Helptext Go to selected start and endtime\n"
"	# Row 27\n"
"	Set string value... 27 Label ZoomOut\n"
"	Set string value... 27 Text Zoom out -\n"
"	Set string value... 27 Key u\\-_\n"
"	Set string value... 27 Helptext Double the current time window\n"
"	# Row 28\n"
"	Set string value... 28 Label ZoomIn\n"
"	Set string value... 28 Text Zoom in +\n"
"	Set string value... 28 Key n+=\n"
"	Set string value... 28 Helptext Halve the current time window\n"
"	# Row 29\n"
"	Set string value... 29 Label Previous\n"
"	Set string value... 29 Text < Previous\n"
"	Set string value... 29 Key \\<\\,\n"
"	Set string value... 29 Helptext Previous interval, or shift current time window to the left\n"
"	# Row 30\n"
"	Set string value... 30 Label Next\n"
"	Set string value... 30 Text Next >\n"
"	Set string value... 30 Key \\>\\.\n"
"	Set string value... 30 Helptext Next interval, or shift the current time window to the right\n"
"endproc\n"
"\n"
"procCreateMainPage_JA$ = \"MainPage_JA\"\n"
"procedure CreateMainPage_JA\n"
"	Create Table with column names... MainPage_JA 30\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text 著者\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son, translation: Akiko Kanezaki\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text 著作権\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\& the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text ライセンス\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !WindowTitle\n"
"	Set string value... 4 Text NKI TE-VOICE ANALYSIS tool: メインページ\n"
"	Set string value... 4 Key !\n"
"	Set string value... 4 Helptext NKI TE-VOICE ANALYSIS tool: メインページ\n"
"	# Row 5\n"
"	Set string value... 5 Label !CANVAS\n"
"	Set string value... 5 Text ディスプレイ\n"
"	Set string value... 5 Key ¬§\n"
"	Set string value... 5 Helptext ディスプレイ範囲\n"
"	# Row 6\n"
"	Set string value... 6 Label !PathologicalType\n"
"	Set string value... 6 Text シグナルタイプ\n"
"	Set string value... 6 Key 12349\n"
"	Set string value... 6 Helptext 病理シグナルタイプ (AST) ウィンドウタイトル I-IV, タイプ 1-4, 0 消去\n"
"	# Row 7\n"
"	Set string value... 7 Label Speaker\n"
"	Set string value... 7 Text !90!話者 \n"
"	Set string value... 7 Key k\n"
"	Set string value... 7 Helptext 話者データ入力\n"
"	# Row 8\n"
"	Set string value... 8 Label !NextItem\n"
"	Set string value... 8 Text 被験者\n"
"	Set string value... 8 Key x|\\\\\n"
"	Set string value... 8 Helptext 次の録音 %serial mode\n"
"	# Row 9\n"
"	Set string value... 9 Label !PreviousItem\n"
"	Set string value... 9 Text 被験者\n"
"	Set string value... 9 Key x|\\\\\n"
"	Set string value... 9 Helptext 前の録音 %serial mode\n"
"	# Row 10\n"
"	Set string value... 10 Label File\n"
"	Set string value... 10 Text 開く\n"
"	Set string value... 10 Key O\n"
"	Set string value... 10 Helptext 音声データファイルを開く\n"
"	# Row 11\n"
"	Set string value... 11 Label Record\n"
"	Set string value... 11 Text 録音\n"
"	Set string value... 11 Key R\n"
"	Set string value... 11 Helptext 録音できます. 4秒間録音可能です, 録音 \"ライト\"を見て下さい。\n"
"	# Row 12\n"
"	Set string value... 12 Label Play\n"
"	Set string value... 12 Text 再生\n"
"	Set string value... 12 Key P\n"
"	Set string value... 12 Helptext 録音した音声を再生\n"
"	# Row 13\n"
"	Set string value... 13 Label Quit\n"
"	Set string value... 13 Text 中断\n"
"	Set string value... 13 Key Q\n"
"	Set string value... 13 Helptext TEVAを中断する\n"
"	# Row 14\n"
"	Set string value... 14 Label Config\n"
"	Set string value... 14 Text 設定\n"
"	Set string value... 14 Key S\n"
"	Set string value... 14 Helptext  %%Configuration% ページへ\n"
"	# Row 15\n"
"	Set string value... 15 Label Refresh\n"
"	Set string value... 15 Text リフレッシュ\n"
"	Set string value... 15 Key h\n"
"	Set string value... 15 Helptext 現在のスクリーンを再描画します,スペースバーは常に画面をリフレッシュします\n"
"	# Row 16\n"
"	Set string value... 16 Label Help\n"
"	Set string value... 16 Text ヘルプ\n"
"	Set string value... 16 Key ?/\n"
"	Set string value... 16 Helptext 知りたい情報があればヘルプボタンを押して下さい\n"
"	# Row 17\n"
"	Set string value... 17 Label Save\n"
"	Set string value... 17 Text 印刷 #\n"
"	Set string value... 17 Key #\n"
"	Set string value... 17 Helptext プリンタ形式でレポートを保存する\n"
"	# Row 18\n"
"	Set string value... 18 Label Draw_Sound\n"
"	Set string value... 18 Text 音声\n"
"	Set string value... 18 Key S\n"
"	Set string value... 18 Helptext 音声を描画する\n"
"	# Row 19\n"
"	Set string value... 19 Label Draw_Pitch\n"
"	Set string value... 19 Text ピッチ\n"
"	Set string value... 19 Key t\n"
"	Set string value... 19 Helptext ピッチを描画する\n"
"	# Row 20\n"
"	Set string value... 20 Label Draw_Harmonicity\n"
"	Set string value... 20 Text 調和音\n"
"	Set string value... 20 Key H\n"
"	Set string value... 20 Helptext 調和雑音比を描画する\n"
"	# Row 21\n"
"	Set string value... 21 Label Draw_Spectrogram\n"
"	Set string value... 21 Text スペクトログラム\n"
"	Set string value... 21 Key L\n"
"	Set string value... 21 Helptext ナローバンドスペクトログラム（100ms）とフォルマントを合わせる\n"
"	# Row 22\n"
"	Set string value... 22 Label Draw_Ltas\n"
"	Set string value... 22 Text Ltas\n"
"	Set string value... 22 Key L\n"
"	Set string value... 22 Helptext 長時間平均スペクトル\n"
"	# Row 23\n"
"	Set string value... 23 Label Draw_Intensity\n"
"	Set string value... 23 Text 強さ\n"
"	Set string value... 23 Key I\n"
"	Set string value... 23 Helptext 強度を描画する\n"
"	# Row 24\n"
"	Set string value... 24 Label Draw_Rating\n"
"	Set string value... 24 Text 評価\n"
"	Set string value... 24 Key #\n"
"	Set string value... 24 Helptext スピーチを評価する\n"
"	# Row 25\n"
"	Set string value... 25 Label Select\n"
"	Set string value... 25 Text 選択\n"
"	Set string value... 25 Key e\n"
"	Set string value... 25 Helptext 新しい開始時間と終了時間を選ぶ\n"
"	# Row 26\n"
"	Set string value... 26 Label ToSelection\n"
"	Set string value... 26 Text 選択\n"
"	Set string value... 26 Key c\n"
"	Set string value... 26 Helptext 選択した時間窓のみ表示する\n"
"	# Row 27\n"
"	Set string value... 27 Label ZoomOut\n"
"	Set string value... 27 Text ズームアウト -\n"
"	Set string value... 27 Key u\\-_\n"
"	Set string value... 27 Helptext 二画面表示\n"
"	# Row 28\n"
"	Set string value... 28 Label ZoomIn\n"
"	Set string value... 28 Text ズームイン +\n"
"	Set string value... 28 Key n+=\n"
"	Set string value... 28 Helptext 二分割画面\n"
"	# Row 29\n"
"	Set string value... 29 Label Previous\n"
"	Set string value... 29 Text < 前\n"
"	Set string value... 29 Key \\<\\,\n"
"	Set string value... 29 Helptext 前のインターバルもしくは現在の画面を左へ移動する\n"
"	# Row 30\n"
"	Set string value... 30 Label Next\n"
"	Set string value... 30 Text 次 >\n"
"	Set string value... 30 Key \\>\\.\n"
"	Set string value... 30 Helptext 次のインターバルもしくは現在の画面を右へ移動する\n"
"endproc\n"
"\n"
"procCreateMainPage_NL$ = \"MainPage_NL\"\n"
"procedure CreateMainPage_NL\n"
"	Create Table with column names... MainPage_NL 30\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Auteur\n"
"	Set string value... 1 Key §\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key §\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text Licentie\n"
"	Set string value... 3 Key §\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !WindowTitle\n"
"	Set string value... 4 Text NKI TE-VOICE ANALYSIS tool: Hoofdpagina \n"
"	Set string value... 4 Key §\n"
"	Set string value... 4 Helptext NKI TE-VOICE ANALYSIS tool: Hoofdpagina\n"
"	# Row 5\n"
"	Set string value... 5 Label !CANVAS\n"
"	Set string value... 5 Text Venster\n"
"	Set string value... 5 Key §\n"
"	Set string value... 5 Helptext Tekenvenster\n"
"	# Row 6\n"
"	Set string value... 6 Label !PathologicalType\n"
"	Set string value... 6 Text - Pathologisch type:\n"
"	Set string value... 6 Key 012349\n"
"	Set string value... 6 Helptext Pathologisch signaal type (AST) in venstertitel I-IV, toets 1-4, 0 wist\n"
"	# Row 7\n"
"	Set string value... 7 Label Speaker\n"
"	Set string value... 7 Text !90!Spreker\n"
"	Set string value... 7 Key r\n"
"	Set string value... 7 Helptext Invoer spreker gegevens\n"
"	# Row 8\n"
"	Set string value... 8 Label !NextItem\n"
"	Set string value... 8 Text Spr\n"
"	Set string value... 8 Key x|\\\\\n"
"	Set string value... 8 Helptext Volgende opname bij %%seri\\e\"le% verwerking\n"
"	# Row 9\n"
"	Set string value... 9 Label !PreviousItem\n"
"	Set string value... 9 Text Spr\n"
"	Set string value... 9 Key x|\\\\\n"
"	Set string value... 9 Helptext Vorige opname bij %%seri\\e\"le% verwerking\n"
"	# Row 10\n"
"	Set string value... 10 Label File\n"
"	Set string value... 10 Text Open\n"
"	Set string value... 10 Key p\n"
"	Set string value... 10 Helptext Open geluids bestand\n"
"	# Row 11\n"
"	Set string value... 11 Label Record\n"
"	Set string value... 11 Text Opnemen\n"
"	Set string value... 11 Key O\n"
"	Set string value... 11 Helptext Neem spraak op. U hebt 4 seconden, let op het rode \"lampje\"\n"
"	# Row 12\n"
"	Set string value... 12 Label Play\n"
"	Set string value... 12 Text Afspelen\n"
"	Set string value... 12 Key A\n"
"	Set string value... 12 Helptext Speel je opgenomen uitspraak af\n"
"	# Row 13\n"
"	Set string value... 13 Label Quit\n"
"	Set string value... 13 Text Stop\n"
"	Set string value... 13 Key S\n"
"	Set string value... 13 Helptext Stop NKI TE-VOICE ANALYSIS tool\n"
"	# Row 14\n"
"	Set string value... 14 Label Config\n"
"	Set string value... 14 Text Instellingen\n"
"	Set string value... 14 Key I\n"
"	Set string value... 14 Helptext Ga naar de pagina met instellingen\n"
"	# Row 15\n"
"	Set string value... 15 Label Refresh\n"
"	Set string value... 15 Text Ververs\n"
"	Set string value... 15 Key r\n"
"	Set string value... 15 Helptext Ververs de huidige pagina, de spatiebalk ververst altijd de pagina\n"
"	# Row 16\n"
"	Set string value... 16 Label Help\n"
"	Set string value... 16 Text Help\n"
"	Set string value... 16 Key ?/\n"
"	Set string value... 16 Helptext Druk op de knop waar u informatie over wilt hebben, \"Help\" als u verder wilt\n"
"	# Row 17\n"
"	Set string value... 17 Label Save\n"
"	Set string value... 17 Text Print \\# \n"
"	Set string value... 17 Key #\n"
"	Set string value... 17 Helptext Bewaar rapport in een formaat voor printen\n"
"	# Row 18\n"
"	Set string value... 18 Label Draw_Sound\n"
"	Set string value... 18 Text Geluid\n"
"	Set string value... 18 Key G\n"
"	Set string value... 18 Helptext Teken de geluidsfile\n"
"	# Row 19\n"
"	Set string value... 19 Label Draw_Pitch\n"
"	Set string value... 19 Text Toon\n"
"	Set string value... 19 Key T\n"
"	Set string value... 19 Helptext Teken de toonhoogte\n"
"	# Row 20\n"
"	Set string value... 20 Label Draw_Harmonicity\n"
"	Set string value... 20 Text Harmoniciteit\n"
"	Set string value... 20 Key H\n"
"	Set string value... 20 Helptext Teken de Harmonicity to Noise ratio\n"
"	# Row 21\n"
"	Set string value... 21 Label Draw_Spectrogram\n"
"	Set string value... 21 Text Spectrogram\n"
"	Set string value... 21 Key L\n"
"	Set string value... 21 Helptext Smalband spectrogram (100 ms) met formanten\n"
"	# Row 22\n"
"	Set string value... 22 Label Draw_Ltas\n"
"	Set string value... 22 Text Ltas\n"
"	Set string value... 22 Key L\n"
"	Set string value... 22 Helptext Long time average spectrum\n"
"	# Row 23\n"
"	Set string value... 23 Label Draw_Intensity\n"
"	Set string value... 23 Text Intensiteit\n"
"	Set string value... 23 Key I\n"
"	Set string value... 23 Helptext Teken de intensiteit\n"
"	# Row 24\n"
"	Set string value... 24 Label Draw_Rating\n"
"	Set string value... 24 Text Beoordeel\n"
"	Set string value... 24 Key #\n"
"	Set string value... 24 Helptext Geef schaaloordelen van de spraak \n"
"	# Row 25\n"
"	Set string value... 25 Label Select\n"
"	Set string value... 25 Text Selecteer\n"
"	Set string value... 25 Key e\n"
"	Set string value... 25 Helptext Selecteer nieuwe start en eindtijd\n"
"	# Row 26\n"
"	Set string value... 26 Label ToSelection\n"
"	Set string value... 26 Text Naar selectie\n"
"	Set string value... 26 Key c\n"
"	Set string value... 26 Helptext Ga naar geselecteerde start and eindtijd\n"
"	# Row 27\n"
"	Set string value... 27 Label ZoomOut\n"
"	Set string value... 27 Text Zoom uit -\n"
"	Set string value... 27 Key u\\-_\n"
"	Set string value... 27 Helptext Verdubbel het huidige tijdsvenster\n"
"	# Row 28\n"
"	Set string value... 28 Label ZoomIn\n"
"	Set string value... 28 Text Zoom in +\n"
"	Set string value... 28 Key n+=\n"
"	Set string value... 28 Helptext Halveer het huidige tijdsvenster\n"
"	# Row 29\n"
"	Set string value... 29 Label Previous\n"
"	Set string value... 29 Text < Vorige\n"
"	Set string value... 29 Key \\<\\,\n"
"	Set string value... 29 Helptext Vorige interval\n"
"	# Row 30\n"
"	Set string value... 30 Label Next\n"
"	Set string value... 30 Text Volgende >\n"
"	Set string value... 30 Key \\>\\.\n"
"	Set string value... 30 Helptext Volgende interval\n"
"endproc\n"
"\n"
"procCreatePrintSignal_DE$ = \"PrintSignal_DE\"\n"
"procedure CreatePrintSignal_DE\n"
"	Create Table with column names... PrintSignal_DE 62\n"
"	... Key Text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Key !Author\n"
"	Set string value... 1 Text Auteur R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Key !Copyright\n"
"	Set string value... 2 Text Copyright \\co 2014 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Key !License\n"
"	Set string value... 3 Text License GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Key Waveform\n"
"	Set string value... 4 Text Wellenform\n"
"	# Row 5\n"
"	Set string value... 5 Key Spectrogram\n"
"	Set string value... 5 Text Spektrogramm\n"
"	# Row 6\n"
"	Set string value... 6 Key Ltas\n"
"	Set string value... 6 Text Ltas\n"
"	# Row 7\n"
"	Set string value... 7 Key Pitch\n"
"	Set string value... 7 Text Tonh\\o\"he\n"
"	# Row 8\n"
"	Set string value... 8 Key seconds\n"
"	Set string value... 8 Text Sekunden\n"
"	# Row 9\n"
"	Set string value... 9 Key time\n"
"	Set string value... 9 Text Zeit -> s\n"
"	# Row 10\n"
"	Set string value... 10 Key Frequency\n"
"	Set string value... 10 Text Frequenz -> Hz\n"
"	# Row 11\n"
"	Set string value... 11 Key Hz\n"
"	Set string value... 11 Text Hz\n"
"	# Row 12\n"
"	Set string value... 12 Key SPL\n"
"	Set string value... 12 Text SPL dB/Hz\n"
"	# Row 13\n"
"	Set string value... 13 Key AST\n"
"	Set string value... 13 Text AST\n"
"	# Row 14\n"
"	Set string value... 14 Key CompAST\n"
"	Set string value... 14 Text berechn.\n"
"	# Row 15\n"
"	Set string value... 15 Key Rating.quality\n"
"	Set string value... 15 Text VQ\n"
"	# Row 16\n"
"	Set string value... 16 Key CompVQ\n"
"	Set string value... 16 Text cmp\n"
"	# Row 17\n"
"	Set string value... 17 Key Rating.fluency\n"
"	Set string value... 17 Text Fl\n"
"	# Row 18\n"
"	Set string value... 18 Key Rating.voice\n"
"	Set string value... 18 Text Vo\n"
"	# Row 19\n"
"	Set string value... 19 Key Rating.impression\n"
"	Set string value... 19 Text Imp\n"
"	# Row 20\n"
"	Set string value... 20 Key Rating.noise\n"
"	Set string value... 20 Text N\n"
"	# Row 21\n"
"	Set string value... 21 Key Rating.continuity\n"
"	Set string value... 21 Text Cont\n"
"	# Row 22\n"
"	Set string value... 22 Key Rating.intelligibility\n"
"	Set string value... 22 Text Int\n"
"	# Row 23\n"
"	Set string value... 23 Key Rating.grade\n"
"	Set string value... 23 Text G\n"
"	# Row 24\n"
"	Set string value... 24 Key Rating.roughness\n"
"	Set string value... 24 Text R\n"
"	# Row 25\n"
"	Set string value... 25 Key Rating.breathiness\n"
"	Set string value... 25 Text B\n"
"	# Row 26\n"
"	Set string value... 26 Key Rating.asthenia\n"
"	Set string value... 26 Text A\n"
"	# Row 27\n"
"	Set string value... 27 Key Rating.strain\n"
"	Set string value... 27 Text S\n"
"	# Row 28\n"
"	Set string value... 28 Key Jitter\n"
"	Set string value... 28 Text Jitter\n"
"	# Row 29\n"
"	Set string value... 29 Key Shimmer\n"
"	Set string value... 29 Text Shimmer\n"
"	# Row 30\n"
"	Set string value... 30 Key Mean\n"
"	Set string value... 30 Text Mean\n"
"	# Row 31\n"
"	Set string value... 31 Key SD\n"
"	Set string value... 31 Text SD\n"
"	# Row 32\n"
"	Set string value... 32 Key Mon\n"
"	Set string value... 32 Text Mo\n"
"	# Row 33\n"
"	Set string value... 33 Key Tue\n"
"	Set string value... 33 Text Di\n"
"	# Row 34\n"
"	Set string value... 34 Key Wed\n"
"	Set string value... 34 Text Mi\n"
"	# Row 35\n"
"	Set string value... 35 Key Thu\n"
"	Set string value... 35 Text Do\n"
"	# Row 36\n"
"	Set string value... 36 Key Fri\n"
"	Set string value... 36 Text Fr\n"
"	# Row 37\n"
"	Set string value... 37 Key Sat\n"
"	Set string value... 37 Text Sa\n"
"	# Row 38\n"
"	Set string value... 38 Key Sun\n"
"	Set string value... 38 Text So\n"
"	# Row 39\n"
"	Set string value... 39 Key Jan\n"
"	Set string value... 39 Text Jan\n"
"	# Row 40\n"
"	Set string value... 40 Key Feb\n"
"	Set string value... 40 Text Feb\n"
"	# Row 41\n"
"	Set string value... 41 Key Mar\n"
"	Set string value... 41 Text M\\a\"r\n"
"	# Row 42\n"
"	Set string value... 42 Key Apr\n"
"	Set string value... 42 Text Apr\n"
"	# Row 43\n"
"	Set string value... 43 Key May\n"
"	Set string value... 43 Text May\n"
"	# Row 44\n"
"	Set string value... 44 Key Jun\n"
"	Set string value... 44 Text Jun\n"
"	# Row 45\n"
"	Set string value... 45 Key Jul\n"
"	Set string value... 45 Text Jul\n"
"	# Row 46\n"
"	Set string value... 46 Key Aug\n"
"	Set string value... 46 Text Aug\n"
"	# Row 47\n"
"	Set string value... 47 Key Sep\n"
"	Set string value... 47 Text Sep\n"
"	# Row 48\n"
"	Set string value... 48 Key Oct\n"
"	Set string value... 48 Text Okt\n"
"	# Row 49\n"
"	Set string value... 49 Key Nov\n"
"	Set string value... 49 Text Nov\n"
"	# Row 50\n"
"	Set string value... 50 Key Dec\n"
"	Set string value... 50 Text Dec\n"
"	# Row 51\n"
"	Set string value... 51 Key numJan\n"
"	Set string value... 51 Text 01\n"
"	# Row 52\n"
"	Set string value... 52 Key numFeb\n"
"	Set string value... 52 Text 02\n"
"	# Row 53\n"
"	Set string value... 53 Key numMar\n"
"	Set string value... 53 Text 03\n"
"	# Row 54\n"
"	Set string value... 54 Key numApr\n"
"	Set string value... 54 Text 04\n"
"	# Row 55\n"
"	Set string value... 55 Key numMay\n"
"	Set string value... 55 Text 05\n"
"	# Row 56\n"
"	Set string value... 56 Key numJun\n"
"	Set string value... 56 Text 06\n"
"	# Row 57\n"
"	Set string value... 57 Key numJul\n"
"	Set string value... 57 Text 07\n"
"	# Row 58\n"
"	Set string value... 58 Key numAug\n"
"	Set string value... 58 Text 08\n"
"	# Row 59\n"
"	Set string value... 59 Key numSep\n"
"	Set string value... 59 Text 09\n"
"	# Row 60\n"
"	Set string value... 60 Key numOct\n"
"	Set string value... 60 Text 10\n"
"	# Row 61\n"
"	Set string value... 61 Key numNov\n"
"	Set string value... 61 Text 11\n"
"	# Row 62\n"
"	Set string value... 62 Key numDec\n"
"	Set string value... 62 Text 12\n"
"endproc\n"
"\n"
"procCreatePrintSignal_EN$ = \"PrintSignal_EN\"\n"
"procedure CreatePrintSignal_EN\n"
"	Create Table with column names... PrintSignal_EN 62\n"
"	... Key Text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Key !Author\n"
"	Set string value... 1 Text Auteur R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Key !Copyright\n"
"	Set string value... 2 Text Copyright \\co 2014 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Key !License\n"
"	Set string value... 3 Text License GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Key Waveform\n"
"	Set string value... 4 Text Waveform\n"
"	# Row 5\n"
"	Set string value... 5 Key Spectrogram\n"
"	Set string value... 5 Text Spectrogram\n"
"	# Row 6\n"
"	Set string value... 6 Key Ltas\n"
"	Set string value... 6 Text Ltas\n"
"	# Row 7\n"
"	Set string value... 7 Key Pitch\n"
"	Set string value... 7 Text Pitch\n"
"	# Row 8\n"
"	Set string value... 8 Key seconds\n"
"	Set string value... 8 Text seconds\n"
"	# Row 9\n"
"	Set string value... 9 Key time\n"
"	Set string value... 9 Text time -> s\n"
"	# Row 10\n"
"	Set string value... 10 Key Frequency\n"
"	Set string value... 10 Text Frequency -> Hz\n"
"	# Row 11\n"
"	Set string value... 11 Key Hz\n"
"	Set string value... 11 Text Hz\n"
"	# Row 12\n"
"	Set string value... 12 Key SPL\n"
"	Set string value... 12 Text SPL dB/Hz\n"
"	# Row 13\n"
"	Set string value... 13 Key AST\n"
"	Set string value... 13 Text AST\n"
"	# Row 14\n"
"	Set string value... 14 Key CompAST\n"
"	Set string value... 14 Text cmp\n"
"	# Row 15\n"
"	Set string value... 15 Key Rating.quality\n"
"	Set string value... 15 Text VQ\n"
"	# Row 16\n"
"	Set string value... 16 Key Rating.impression\n"
"	Set string value... 16 Text Imp\n"
"	# Row 17\n"
"	Set string value... 17 Key Rating.noise\n"
"	Set string value... 17 Text N\n"
"	# Row 18\n"
"	Set string value... 18 Key Rating.fluency\n"
"	Set string value... 18 Text Fl\n"
"	# Row 19\n"
"	Set string value... 19 Key Rating.voice\n"
"	Set string value... 19 Text Vo\n"
"	# Row 20\n"
"	Set string value... 20 Key Rating.continuity\n"
"	Set string value... 20 Text Cont\n"
"	# Row 21\n"
"	Set string value... 21 Key Rating.intelligibility\n"
"	Set string value... 21 Text Int\n"
"	# Row 22\n"
"	Set string value... 22 Key Rating.grade\n"
"	Set string value... 22 Text G\n"
"	# Row 23\n"
"	Set string value... 23 Key Rating.roughness\n"
"	Set string value... 23 Text R\n"
"	# Row 24\n"
"	Set string value... 24 Key Rating.breathiness\n"
"	Set string value... 24 Text B\n"
"	# Row 25\n"
"	Set string value... 25 Key Rating.asthenia\n"
"	Set string value... 25 Text A\n"
"	# Row 26\n"
"	Set string value... 26 Key Rating.strain\n"
"	Set string value... 26 Text S\n"
"	# Row 27\n"
"	Set string value... 27 Key CompVQ\n"
"	Set string value... 27 Text cmp\n"
"	# Row 28\n"
"	Set string value... 28 Key Jitter\n"
"	Set string value... 28 Text Jitter\n"
"	# Row 29\n"
"	Set string value... 29 Key Shimmer\n"
"	Set string value... 29 Text Shimmer\n"
"	# Row 30\n"
"	Set string value... 30 Key Mean\n"
"	Set string value... 30 Text Mean\n"
"	# Row 31\n"
"	Set string value... 31 Key SD\n"
"	Set string value... 31 Text SD\n"
"	# Row 32\n"
"	Set string value... 32 Key Mon\n"
"	Set string value... 32 Text Mon\n"
"	# Row 33\n"
"	Set string value... 33 Key Tue\n"
"	Set string value... 33 Text Tue\n"
"	# Row 34\n"
"	Set string value... 34 Key Wed\n"
"	Set string value... 34 Text Wed\n"
"	# Row 35\n"
"	Set string value... 35 Key Thu\n"
"	Set string value... 35 Text Thu\n"
"	# Row 36\n"
"	Set string value... 36 Key Fri\n"
"	Set string value... 36 Text Fri\n"
"	# Row 37\n"
"	Set string value... 37 Key Sat\n"
"	Set string value... 37 Text Sat\n"
"	# Row 38\n"
"	Set string value... 38 Key Sun\n"
"	Set string value... 38 Text Sun\n"
"	# Row 39\n"
"	Set string value... 39 Key Jan\n"
"	Set string value... 39 Text Jan\n"
"	# Row 40\n"
"	Set string value... 40 Key Feb\n"
"	Set string value... 40 Text Feb\n"
"	# Row 41\n"
"	Set string value... 41 Key Mar\n"
"	Set string value... 41 Text Mar\n"
"	# Row 42\n"
"	Set string value... 42 Key Apr\n"
"	Set string value... 42 Text Apr\n"
"	# Row 43\n"
"	Set string value... 43 Key May\n"
"	Set string value... 43 Text May\n"
"	# Row 44\n"
"	Set string value... 44 Key Jun\n"
"	Set string value... 44 Text Jun\n"
"	# Row 45\n"
"	Set string value... 45 Key Jul\n"
"	Set string value... 45 Text Jul\n"
"	# Row 46\n"
"	Set string value... 46 Key Aug\n"
"	Set string value... 46 Text Aug\n"
"	# Row 47\n"
"	Set string value... 47 Key Sep\n"
"	Set string value... 47 Text Sep\n"
"	# Row 48\n"
"	Set string value... 48 Key Oct\n"
"	Set string value... 48 Text Oct\n"
"	# Row 49\n"
"	Set string value... 49 Key Nov\n"
"	Set string value... 49 Text Nov\n"
"	# Row 50\n"
"	Set string value... 50 Key Dec\n"
"	Set string value... 50 Text Dec\n"
"	# Row 51\n"
"	Set string value... 51 Key numJan\n"
"	Set string value... 51 Text 01\n"
"	# Row 52\n"
"	Set string value... 52 Key numFeb\n"
"	Set string value... 52 Text 02\n"
"	# Row 53\n"
"	Set string value... 53 Key numMar\n"
"	Set string value... 53 Text 03\n"
"	# Row 54\n"
"	Set string value... 54 Key numApr\n"
"	Set string value... 54 Text 04\n"
"	# Row 55\n"
"	Set string value... 55 Key numMay\n"
"	Set string value... 55 Text 05\n"
"	# Row 56\n"
"	Set string value... 56 Key numJun\n"
"	Set string value... 56 Text 06\n"
"	# Row 57\n"
"	Set string value... 57 Key numJul\n"
"	Set string value... 57 Text 07\n"
"	# Row 58\n"
"	Set string value... 58 Key numAug\n"
"	Set string value... 58 Text 08\n"
"	# Row 59\n"
"	Set string value... 59 Key numSep\n"
"	Set string value... 59 Text 09\n"
"	# Row 60\n"
"	Set string value... 60 Key numOct\n"
"	Set string value... 60 Text 10\n"
"	# Row 61\n"
"	Set string value... 61 Key numNov\n"
"	Set string value... 61 Text 11\n"
"	# Row 62\n"
"	Set string value... 62 Key numDec\n"
"	Set string value... 62 Text 12\n"
"endproc\n"
"\n"
"procCreatePrintSignal_ES$ = \"PrintSignal_ES\"\n"
"procedure CreatePrintSignal_ES\n"
"	Create Table with column names... PrintSignal_ES 62\n"
"	... Key Text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Key !Author\n"
"	Set string value... 1 Text Auteur R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Key !Copyright\n"
"	Set string value... 2 Text Copyright \\co 2014 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Key !License\n"
"	Set string value... 3 Text License GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Key Waveform\n"
"	Set string value... 4 Text Waveform\n"
"	# Row 5\n"
"	Set string value... 5 Key Spectrogram\n"
"	Set string value... 5 Text Spectrogram\n"
"	# Row 6\n"
"	Set string value... 6 Key Ltas\n"
"	Set string value... 6 Text Ltas\n"
"	# Row 7\n"
"	Set string value... 7 Key Pitch\n"
"	Set string value... 7 Text Pitch\n"
"	# Row 8\n"
"	Set string value... 8 Key seconds\n"
"	Set string value... 8 Text seconds\n"
"	# Row 9\n"
"	Set string value... 9 Key time\n"
"	Set string value... 9 Text time -> s\n"
"	# Row 10\n"
"	Set string value... 10 Key Frequency\n"
"	Set string value... 10 Text Frequency -> Hz\n"
"	# Row 11\n"
"	Set string value... 11 Key Hz\n"
"	Set string value... 11 Text Hz\n"
"	# Row 12\n"
"	Set string value... 12 Key SPL\n"
"	Set string value... 12 Text SPL dB/Hz\n"
"	# Row 13\n"
"	Set string value... 13 Key AST\n"
"	Set string value... 13 Text AST\n"
"	# Row 14\n"
"	Set string value... 14 Key CompAST\n"
"	Set string value... 14 Text cmp\n"
"	# Row 15\n"
"	Set string value... 15 Key Rating.quality\n"
"	Set string value... 15 Text VQ\n"
"	# Row 16\n"
"	Set string value... 16 Key CompVQ\n"
"	Set string value... 16 Text cmp\n"
"	# Row 17\n"
"	Set string value... 17 Key Rating.fluency\n"
"	Set string value... 17 Text Fl\n"
"	# Row 18\n"
"	Set string value... 18 Key Rating.voice\n"
"	Set string value... 18 Text Vo\n"
"	# Row 19\n"
"	Set string value... 19 Key Rating.impression\n"
"	Set string value... 19 Text Imp\n"
"	# Row 20\n"
"	Set string value... 20 Key Rating.noise\n"
"	Set string value... 20 Text N\n"
"	# Row 21\n"
"	Set string value... 21 Key Rating.continuity\n"
"	Set string value... 21 Text Cont\n"
"	# Row 22\n"
"	Set string value... 22 Key Rating.intelligibility\n"
"	Set string value... 22 Text Int\n"
"	# Row 23\n"
"	Set string value... 23 Key Rating.grade\n"
"	Set string value... 23 Text G\n"
"	# Row 24\n"
"	Set string value... 24 Key Rating.roughness\n"
"	Set string value... 24 Text R\n"
"	# Row 25\n"
"	Set string value... 25 Key Rating.breathiness\n"
"	Set string value... 25 Text B\n"
"	# Row 26\n"
"	Set string value... 26 Key Rating.asthenia\n"
"	Set string value... 26 Text A\n"
"	# Row 27\n"
"	Set string value... 27 Key Rating.strain\n"
"	Set string value... 27 Text S\n"
"	# Row 28\n"
"	Set string value... 28 Key Jitter\n"
"	Set string value... 28 Text Jitter\n"
"	# Row 29\n"
"	Set string value... 29 Key Shimmer\n"
"	Set string value... 29 Text Shimmer\n"
"	# Row 30\n"
"	Set string value... 30 Key Mean\n"
"	Set string value... 30 Text Mean\n"
"	# Row 31\n"
"	Set string value... 31 Key SD\n"
"	Set string value... 31 Text SD\n"
"	# Row 32\n"
"	Set string value... 32 Key Mon\n"
"	Set string value... 32 Text Mon\n"
"	# Row 33\n"
"	Set string value... 33 Key Tue\n"
"	Set string value... 33 Text Tue\n"
"	# Row 34\n"
"	Set string value... 34 Key Wed\n"
"	Set string value... 34 Text Wed\n"
"	# Row 35\n"
"	Set string value... 35 Key Thu\n"
"	Set string value... 35 Text Thu\n"
"	# Row 36\n"
"	Set string value... 36 Key Fri\n"
"	Set string value... 36 Text Fri\n"
"	# Row 37\n"
"	Set string value... 37 Key Sat\n"
"	Set string value... 37 Text Sat\n"
"	# Row 38\n"
"	Set string value... 38 Key Sun\n"
"	Set string value... 38 Text Sun\n"
"	# Row 39\n"
"	Set string value... 39 Key Jan\n"
"	Set string value... 39 Text Jan\n"
"	# Row 40\n"
"	Set string value... 40 Key Feb\n"
"	Set string value... 40 Text Feb\n"
"	# Row 41\n"
"	Set string value... 41 Key Mar\n"
"	Set string value... 41 Text Mar\n"
"	# Row 42\n"
"	Set string value... 42 Key Apr\n"
"	Set string value... 42 Text Apr\n"
"	# Row 43\n"
"	Set string value... 43 Key May\n"
"	Set string value... 43 Text May\n"
"	# Row 44\n"
"	Set string value... 44 Key Jun\n"
"	Set string value... 44 Text Jun\n"
"	# Row 45\n"
"	Set string value... 45 Key Jul\n"
"	Set string value... 45 Text Jul\n"
"	# Row 46\n"
"	Set string value... 46 Key Aug\n"
"	Set string value... 46 Text Aug\n"
"	# Row 47\n"
"	Set string value... 47 Key Sep\n"
"	Set string value... 47 Text Sep\n"
"	# Row 48\n"
"	Set string value... 48 Key Oct\n"
"	Set string value... 48 Text Oct\n"
"	# Row 49\n"
"	Set string value... 49 Key Nov\n"
"	Set string value... 49 Text Nov\n"
"	# Row 50\n"
"	Set string value... 50 Key Dec\n"
"	Set string value... 50 Text Dec\n"
"	# Row 51\n"
"	Set string value... 51 Key numJan\n"
"	Set string value... 51 Text 01\n"
"	# Row 52\n"
"	Set string value... 52 Key numFeb\n"
"	Set string value... 52 Text 02\n"
"	# Row 53\n"
"	Set string value... 53 Key numMar\n"
"	Set string value... 53 Text 03\n"
"	# Row 54\n"
"	Set string value... 54 Key numApr\n"
"	Set string value... 54 Text 04\n"
"	# Row 55\n"
"	Set string value... 55 Key numMay\n"
"	Set string value... 55 Text 05\n"
"	# Row 56\n"
"	Set string value... 56 Key numJun\n"
"	Set string value... 56 Text 06\n"
"	# Row 57\n"
"	Set string value... 57 Key numJul\n"
"	Set string value... 57 Text 07\n"
"	# Row 58\n"
"	Set string value... 58 Key numAug\n"
"	Set string value... 58 Text 08\n"
"	# Row 59\n"
"	Set string value... 59 Key numSep\n"
"	Set string value... 59 Text 09\n"
"	# Row 60\n"
"	Set string value... 60 Key numOct\n"
"	Set string value... 60 Text 10\n"
"	# Row 61\n"
"	Set string value... 61 Key numNov\n"
"	Set string value... 61 Text 11\n"
"	# Row 62\n"
"	Set string value... 62 Key numDec\n"
"	Set string value... 62 Text 12\n"
"endproc\n"
"\n"
"procCreatePrintSignal_JA$ = \"PrintSignal_JA\"\n"
"procedure CreatePrintSignal_JA\n"
"	Create Table with column names... PrintSignal_JA 62\n"
"	... Key Text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Key !Author\n"
"	Set string value... 1 Text Auteur R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Key !Copyright\n"
"	Set string value... 2 Text Copyright \\co 2014 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Key !License\n"
"	Set string value... 3 Text License GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Key Waveform\n"
"	Set string value... 4 Text Waveform\n"
"	# Row 5\n"
"	Set string value... 5 Key Spectrogram\n"
"	Set string value... 5 Text Spectrogram\n"
"	# Row 6\n"
"	Set string value... 6 Key Ltas\n"
"	Set string value... 6 Text Ltas\n"
"	# Row 7\n"
"	Set string value... 7 Key Pitch\n"
"	Set string value... 7 Text Pitch\n"
"	# Row 8\n"
"	Set string value... 8 Key seconds\n"
"	Set string value... 8 Text seconds\n"
"	# Row 9\n"
"	Set string value... 9 Key time\n"
"	Set string value... 9 Text time -> s\n"
"	# Row 10\n"
"	Set string value... 10 Key Frequency\n"
"	Set string value... 10 Text Frequency -> Hz\n"
"	# Row 11\n"
"	Set string value... 11 Key Hz\n"
"	Set string value... 11 Text Hz\n"
"	# Row 12\n"
"	Set string value... 12 Key SPL\n"
"	Set string value... 12 Text SPL dB/Hz\n"
"	# Row 13\n"
"	Set string value... 13 Key AST\n"
"	Set string value... 13 Text AST\n"
"	# Row 14\n"
"	Set string value... 14 Key CompAST\n"
"	Set string value... 14 Text cmp\n"
"	# Row 15\n"
"	Set string value... 15 Key Rating.quality\n"
"	Set string value... 15 Text VQ\n"
"	# Row 16\n"
"	Set string value... 16 Key Rating.impression\n"
"	Set string value... 16 Text Imp\n"
"	# Row 17\n"
"	Set string value... 17 Key Rating.noise\n"
"	Set string value... 17 Text N\n"
"	# Row 18\n"
"	Set string value... 18 Key Rating.fluency\n"
"	Set string value... 18 Text Fl\n"
"	# Row 19\n"
"	Set string value... 19 Key Rating.voice\n"
"	Set string value... 19 Text Vo\n"
"	# Row 20\n"
"	Set string value... 20 Key Rating.continuity\n"
"	Set string value... 20 Text Cont\n"
"	# Row 21\n"
"	Set string value... 21 Key Rating.intelligibility\n"
"	Set string value... 21 Text Int\n"
"	# Row 22\n"
"	Set string value... 22 Key Rating.grade\n"
"	Set string value... 22 Text G\n"
"	# Row 23\n"
"	Set string value... 23 Key Rating.roughness\n"
"	Set string value... 23 Text R\n"
"	# Row 24\n"
"	Set string value... 24 Key Rating.breathiness\n"
"	Set string value... 24 Text B\n"
"	# Row 25\n"
"	Set string value... 25 Key Rating.asthenia\n"
"	Set string value... 25 Text A\n"
"	# Row 26\n"
"	Set string value... 26 Key Rating.strain\n"
"	Set string value... 26 Text S\n"
"	# Row 27\n"
"	Set string value... 27 Key CompVQ\n"
"	Set string value... 27 Text cmp\n"
"	# Row 28\n"
"	Set string value... 28 Key Jitter\n"
"	Set string value... 28 Text Jitter\n"
"	# Row 29\n"
"	Set string value... 29 Key Shimmer\n"
"	Set string value... 29 Text Shimmer\n"
"	# Row 30\n"
"	Set string value... 30 Key Mean\n"
"	Set string value... 30 Text Mean\n"
"	# Row 31\n"
"	Set string value... 31 Key SD\n"
"	Set string value... 31 Text SD\n"
"	# Row 32\n"
"	Set string value... 32 Key Mon\n"
"	Set string value... 32 Text Mon\n"
"	# Row 33\n"
"	Set string value... 33 Key Tue\n"
"	Set string value... 33 Text Tue\n"
"	# Row 34\n"
"	Set string value... 34 Key Wed\n"
"	Set string value... 34 Text Wed\n"
"	# Row 35\n"
"	Set string value... 35 Key Thu\n"
"	Set string value... 35 Text Thu\n"
"	# Row 36\n"
"	Set string value... 36 Key Fri\n"
"	Set string value... 36 Text Fri\n"
"	# Row 37\n"
"	Set string value... 37 Key Sat\n"
"	Set string value... 37 Text Sat\n"
"	# Row 38\n"
"	Set string value... 38 Key Sun\n"
"	Set string value... 38 Text Sun\n"
"	# Row 39\n"
"	Set string value... 39 Key Jan\n"
"	Set string value... 39 Text Jan\n"
"	# Row 40\n"
"	Set string value... 40 Key Feb\n"
"	Set string value... 40 Text Feb\n"
"	# Row 41\n"
"	Set string value... 41 Key Mar\n"
"	Set string value... 41 Text Mar\n"
"	# Row 42\n"
"	Set string value... 42 Key Apr\n"
"	Set string value... 42 Text Apr\n"
"	# Row 43\n"
"	Set string value... 43 Key May\n"
"	Set string value... 43 Text May\n"
"	# Row 44\n"
"	Set string value... 44 Key Jun\n"
"	Set string value... 44 Text Jun\n"
"	# Row 45\n"
"	Set string value... 45 Key Jul\n"
"	Set string value... 45 Text Jul\n"
"	# Row 46\n"
"	Set string value... 46 Key Aug\n"
"	Set string value... 46 Text Aug\n"
"	# Row 47\n"
"	Set string value... 47 Key Sep\n"
"	Set string value... 47 Text Sep\n"
"	# Row 48\n"
"	Set string value... 48 Key Oct\n"
"	Set string value... 48 Text Oct\n"
"	# Row 49\n"
"	Set string value... 49 Key Nov\n"
"	Set string value... 49 Text Nov\n"
"	# Row 50\n"
"	Set string value... 50 Key Dec\n"
"	Set string value... 50 Text Dec\n"
"	# Row 51\n"
"	Set string value... 51 Key numJan\n"
"	Set string value... 51 Text 01\n"
"	# Row 52\n"
"	Set string value... 52 Key numFeb\n"
"	Set string value... 52 Text 02\n"
"	# Row 53\n"
"	Set string value... 53 Key numMar\n"
"	Set string value... 53 Text 03\n"
"	# Row 54\n"
"	Set string value... 54 Key numApr\n"
"	Set string value... 54 Text 04\n"
"	# Row 55\n"
"	Set string value... 55 Key numMay\n"
"	Set string value... 55 Text 05\n"
"	# Row 56\n"
"	Set string value... 56 Key numJun\n"
"	Set string value... 56 Text 06\n"
"	# Row 57\n"
"	Set string value... 57 Key numJul\n"
"	Set string value... 57 Text 07\n"
"	# Row 58\n"
"	Set string value... 58 Key numAug\n"
"	Set string value... 58 Text 08\n"
"	# Row 59\n"
"	Set string value... 59 Key numSep\n"
"	Set string value... 59 Text 09\n"
"	# Row 60\n"
"	Set string value... 60 Key numOct\n"
"	Set string value... 60 Text 10\n"
"	# Row 61\n"
"	Set string value... 61 Key numNov\n"
"	Set string value... 61 Text 11\n"
"	# Row 62\n"
"	Set string value... 62 Key numDec\n"
"	Set string value... 62 Text 12\n"
"endproc\n"
"\n"
"procCreatePrintSignal_NL$ = \"PrintSignal_NL\"\n"
"procedure CreatePrintSignal_NL\n"
"	Create Table with column names... PrintSignal_NL 62\n"
"	... Key Text\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Key !Author\n"
"	Set string value... 1 Text Auteur R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Key !Copyright\n"
"	Set string value... 2 Text Copyright \\co 2014 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Key !License\n"
"	Set string value... 3 Text License GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Key Waveform\n"
"	Set string value... 4 Text Golfvorm\n"
"	# Row 5\n"
"	Set string value... 5 Key Spectrogram\n"
"	Set string value... 5 Text Spectrogram\n"
"	# Row 6\n"
"	Set string value... 6 Key Ltas\n"
"	Set string value... 6 Text Ltas\n"
"	# Row 7\n"
"	Set string value... 7 Key Pitch\n"
"	Set string value... 7 Text Toonhoogte\n"
"	# Row 8\n"
"	Set string value... 8 Key seconds\n"
"	Set string value... 8 Text seconden\n"
"	# Row 9\n"
"	Set string value... 9 Key time\n"
"	Set string value... 9 Text tijd -> s\n"
"	# Row 10\n"
"	Set string value... 10 Key Frequency\n"
"	Set string value... 10 Text Frekwentie -> Hz\n"
"	# Row 11\n"
"	Set string value... 11 Key Hz\n"
"	Set string value... 11 Text Hz\n"
"	# Row 12\n"
"	Set string value... 12 Key SPL\n"
"	Set string value... 12 Text SPL dB/Hz\n"
"	# Row 13\n"
"	Set string value... 13 Key AST\n"
"	Set string value... 13 Text AST\n"
"	# Row 14\n"
"	Set string value... 14 Key CompAST\n"
"	Set string value... 14 Text cmp\n"
"	# Row 15\n"
"	Set string value... 15 Key Rating.quality\n"
"	Set string value... 15 Text VQ\n"
"	# Row 16\n"
"	Set string value... 16 Key CompVQ\n"
"	Set string value... 16 Text cmp\n"
"	# Row 17\n"
"	Set string value... 17 Key Rating.impression\n"
"	Set string value... 17 Text Imp\n"
"	# Row 18\n"
"	Set string value... 18 Key Rating.fluency\n"
"	Set string value... 18 Text Fl\n"
"	# Row 19\n"
"	Set string value... 19 Key Rating.voice\n"
"	Set string value... 19 Text Vo\n"
"	# Row 20\n"
"	Set string value... 20 Key Rating.noise\n"
"	Set string value... 20 Text N\n"
"	# Row 21\n"
"	Set string value... 21 Key Rating.continuity\n"
"	Set string value... 21 Text Cont\n"
"	# Row 22\n"
"	Set string value... 22 Key Rating.intelligibility\n"
"	Set string value... 22 Text Int\n"
"	# Row 23\n"
"	Set string value... 23 Key Rating.grade\n"
"	Set string value... 23 Text G\n"
"	# Row 24\n"
"	Set string value... 24 Key Rating.roughness\n"
"	Set string value... 24 Text R\n"
"	# Row 25\n"
"	Set string value... 25 Key Rating.breathiness\n"
"	Set string value... 25 Text B\n"
"	# Row 26\n"
"	Set string value... 26 Key Rating.asthenia\n"
"	Set string value... 26 Text A\n"
"	# Row 27\n"
"	Set string value... 27 Key Rating.strain\n"
"	Set string value... 27 Text S\n"
"	# Row 28\n"
"	Set string value... 28 Key Jitter\n"
"	Set string value... 28 Text Jitter\n"
"	# Row 29\n"
"	Set string value... 29 Key Shimmer\n"
"	Set string value... 29 Text Shimmer\n"
"	# Row 30\n"
"	Set string value... 30 Key Mean\n"
"	Set string value... 30 Text Mean\n"
"	# Row 31\n"
"	Set string value... 31 Key SD\n"
"	Set string value... 31 Text SD\n"
"	# Row 32\n"
"	Set string value... 32 Key Mon\n"
"	Set string value... 32 Text Ma\n"
"	# Row 33\n"
"	Set string value... 33 Key Tue\n"
"	Set string value... 33 Text Di\n"
"	# Row 34\n"
"	Set string value... 34 Key Wed\n"
"	Set string value... 34 Text Wo\n"
"	# Row 35\n"
"	Set string value... 35 Key Thu\n"
"	Set string value... 35 Text Do\n"
"	# Row 36\n"
"	Set string value... 36 Key Fri\n"
"	Set string value... 36 Text Vr\n"
"	# Row 37\n"
"	Set string value... 37 Key Sat\n"
"	Set string value... 37 Text Za\n"
"	# Row 38\n"
"	Set string value... 38 Key Sun\n"
"	Set string value... 38 Text Zo\n"
"	# Row 39\n"
"	Set string value... 39 Key Jan\n"
"	Set string value... 39 Text Jan\n"
"	# Row 40\n"
"	Set string value... 40 Key Feb\n"
"	Set string value... 40 Text Feb\n"
"	# Row 41\n"
"	Set string value... 41 Key Mar\n"
"	Set string value... 41 Text Maa\n"
"	# Row 42\n"
"	Set string value... 42 Key Apr\n"
"	Set string value... 42 Text Apr\n"
"	# Row 43\n"
"	Set string value... 43 Key May\n"
"	Set string value... 43 Text Mei\n"
"	# Row 44\n"
"	Set string value... 44 Key Jun\n"
"	Set string value... 44 Text Jun\n"
"	# Row 45\n"
"	Set string value... 45 Key Jul\n"
"	Set string value... 45 Text Jul\n"
"	# Row 46\n"
"	Set string value... 46 Key Aug\n"
"	Set string value... 46 Text Aug\n"
"	# Row 47\n"
"	Set string value... 47 Key Sep\n"
"	Set string value... 47 Text Sep\n"
"	# Row 48\n"
"	Set string value... 48 Key Oct\n"
"	Set string value... 48 Text Okt\n"
"	# Row 49\n"
"	Set string value... 49 Key Nov\n"
"	Set string value... 49 Text Nov\n"
"	# Row 50\n"
"	Set string value... 50 Key Dec\n"
"	Set string value... 50 Text Dec\n"
"	# Row 51\n"
"	Set string value... 51 Key numJan\n"
"	Set string value... 51 Text 01\n"
"	# Row 52\n"
"	Set string value... 52 Key numFeb\n"
"	Set string value... 52 Text 02\n"
"	# Row 53\n"
"	Set string value... 53 Key numMar\n"
"	Set string value... 53 Text 03\n"
"	# Row 54\n"
"	Set string value... 54 Key numApr\n"
"	Set string value... 54 Text 04\n"
"	# Row 55\n"
"	Set string value... 55 Key numMay\n"
"	Set string value... 55 Text 05\n"
"	# Row 56\n"
"	Set string value... 56 Key numJun\n"
"	Set string value... 56 Text 06\n"
"	# Row 57\n"
"	Set string value... 57 Key numJul\n"
"	Set string value... 57 Text 07\n"
"	# Row 58\n"
"	Set string value... 58 Key numAug\n"
"	Set string value... 58 Text 08\n"
"	# Row 59\n"
"	Set string value... 59 Key numSep\n"
"	Set string value... 59 Text 09\n"
"	# Row 60\n"
"	Set string value... 60 Key numOct\n"
"	Set string value... 60 Text 10\n"
"	# Row 61\n"
"	Set string value... 61 Key numNov\n"
"	Set string value... 61 Text 11\n"
"	# Row 62\n"
"	Set string value... 62 Key numDec\n"
"	Set string value... 62 Text 12\n"
"endproc\n"
"\n"
"procCreateRatingA$ = \"RatingA\"\n"
"procedure CreateRatingA\n"
"	Create Table with column names... RatingA 12\n"
"	... Label LeftX RightX LowY HighY Color Draw Link Value\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 LeftX 0\n"
"	Set string value... 1 RightX 0\n"
"	Set string value... 1 LowY 0\n"
"	Set string value... 1 HighY 0\n"
"	Set string value... 1 Color Black\n"
"	Set string value... 1 Draw DrawNull\n"
"	Set string value... 1 Link -\n"
"	Set string value... 1 Value \n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 LeftX 0\n"
"	Set string value... 2 RightX 0\n"
"	Set string value... 2 LowY 0\n"
"	Set string value... 2 HighY 0\n"
"	Set string value... 2 Color Black\n"
"	Set string value... 2 Draw DrawNull\n"
"	Set string value... 2 Link -\n"
"	Set string value... 2 Value \n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 LeftX 0\n"
"	Set string value... 3 RightX 0\n"
"	Set string value... 3 LowY 0\n"
"	Set string value... 3 HighY 0\n"
"	Set string value... 3 Color Black\n"
"	Set string value... 3 Draw DrawNull\n"
"	Set string value... 3 Link -\n"
"	Set string value... 3 Value \n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 LeftX 5\n"
"	Set string value... 4 RightX 85\n"
"	Set string value... 4 LowY 25\n"
"	Set string value... 4 HighY 95\n"
"	Set string value... 4 Color Black\n"
"	Set string value... 4 Draw DrawNull\n"
"	Set string value... 4 Link -\n"
"	Set string value... 4 Value \n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 LeftX 5\n"
"	Set string value... 5 RightX 80\n"
"	Set string value... 5 LowY 90\n"
"	Set string value... 5 HighY +5\n"
"	Set string value... 5 Color Black\n"
"	Set string value... 5 Draw DrawNull\n"
"	Set string value... 5 Link -\n"
"	Set string value... 5 Value \n"
"	# Row 6\n"
"	Set string value... 6 Label >Quality\n"
"	Set string value... 6 LeftX 5\n"
"	Set string value... 6 RightX 80\n"
"	Set string value... 6 LowY 81\n"
"	Set string value... 6 HighY +4\n"
"	Set string value... 6 Color Black\n"
"	Set string value... 6 Draw DrawNull\n"
"	Set string value... 6 Link -\n"
"	Set string value... 6 Value \n"
"	# Row 7\n"
"	Set string value... 7 Label >Fluency\n"
"	Set string value... 7 LeftX 5\n"
"	Set string value... 7 RightX 80\n"
"	Set string value... 7 LowY 71\n"
"	Set string value... 7 HighY +4\n"
"	Set string value... 7 Color Black\n"
"	Set string value... 7 Draw DrawNull\n"
"	Set string value... 7 Link -\n"
"	Set string value... 7 Value \n"
"	# Row 8\n"
"	Set string value... 8 Label >Continuity\n"
"	Set string value... 8 LeftX 5\n"
"	Set string value... 8 RightX 80\n"
"	Set string value... 8 LowY 61\n"
"	Set string value... 8 HighY +4\n"
"	Set string value... 8 Color Black\n"
"	Set string value... 8 Draw DrawNull\n"
"	Set string value... 8 Link -\n"
"	Set string value... 8 Value \n"
"	# Row 9\n"
"	Set string value... 9 Label >Hypertonicity\n"
"	Set string value... 9 LeftX 5\n"
"	Set string value... 9 RightX 80\n"
"	Set string value... 9 LowY 51\n"
"	Set string value... 9 HighY +4\n"
"	Set string value... 9 Color Black\n"
"	Set string value... 9 Draw DrawNull\n"
"	Set string value... 9 Link Tonicity\n"
"	Set string value... 9 Value 1\n"
"	# Row 10\n"
"	Set string value... 10 Label >Hypotonicity\n"
"	Set string value... 10 LeftX 5\n"
"	Set string value... 10 RightX 80\n"
"	Set string value... 10 LowY 41\n"
"	Set string value... 10 HighY +4\n"
"	Set string value... 10 Color Black\n"
"	Set string value... 10 Draw DrawNull\n"
"	Set string value... 10 Link Tonicity\n"
"	Set string value... 10 Value 1\n"
"	# Row 11\n"
"	Set string value... 11 Label >Noise\n"
"	Set string value... 11 LeftX 5\n"
"	Set string value... 11 RightX 80\n"
"	Set string value... 11 LowY 31\n"
"	Set string value... 11 HighY +4\n"
"	Set string value... 11 Color Black\n"
"	Set string value... 11 Draw DrawNull\n"
"	Set string value... 11 Link -\n"
"	Set string value... 11 Value \n"
"	# Row 12\n"
"	Set string value... 12 Label Help\n"
"	Set string value... 12 LeftX 70\n"
"	Set string value... 12 RightX 85\n"
"	Set string value... 12 LowY 25\n"
"	Set string value... 12 HighY +5\n"
"	Set string value... 12 Color Black\n"
"	Set string value... 12 Draw DrawNull\n"
"	Set string value... 12 Link -\n"
"	Set string value... 12 Value \n"
"endproc\n"
"\n"
"procCreateRatingA_DE$ = \"RatingA_DE\"\n"
"procedure CreateRatingA_DE\n"
"	Create Table with column names... RatingA_DE 12\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Zeichenbereich\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Chose a grade on the line between left (poor) and right (good) descriptors of speech\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label >Quality\n"
"	Set string value... 6 Text Voice Quality (similarity to normal speech)\n"
"	Set string value... 6 Key Least;Most\n"
"	Set string value... 6 Helptext Is a judgment of the overall voice quality.\n"
"	# Row 7\n"
"	Set string value... 7 Label >Fluency\n"
"	Set string value... 7 Text Fluency\n"
"	Set string value... 7 Key   Non-fluent;Fluent \n"
"	Set string value... 7 Helptext Refers to the fluency of the speech, i.e., is speech steady or unsteady\n"
"	# Row 8\n"
"	Set string value... 8 Label >Continuity\n"
"	Set string value... 8 Text Phonation continuity (\\% voiced)\n"
"	Set string value... 8 Key   0\\% ;100\\% \n"
"	Set string value... 8 Helptext Refers to the continuity of phonation/voicing, i.e. proportion of vowel that is voiced\n"
"	# Row 9\n"
"	Set string value... 9 Label >Hypertonicity\n"
"	Set string value... 9 Text %%Hyper%tonicity\n"
"	Set string value... 9 Key %%Hyper%tonic;Not hyper\n"
"	Set string value... 9 Helptext Hypertonic vs Hypotonic: Scale is split into two with %%Hyper%tonic (left) - Normal (right) on this scale\n"
"	# Row 10\n"
"	Set string value... 10 Label >Hypotonicity\n"
"	Set string value... 10 Text %%Hypo%tonicity\n"
"	Set string value... 10 Key %%Hypo%tonic;Not hypo\n"
"	Set string value... 10 Helptext Hypertonic vs Hypotonic: Scale is split into two with %%Hypo%tonic (left) - Normal (right) on this scale\n"
"	# Row 11\n"
"	Set string value... 11 Label >Noise\n"
"	Set string value... 11 Text Noise\n"
"	Set string value... 11 Key Noise;No noise\n"
"	Set string value... 11 Helptext Noise: The amount of audible noise during speech\n"
"	# Row 12\n"
"	Set string value... 12 Label Help\n"
"	Set string value... 12 Text Scale Hilfe\n"
"	Set string value... 12 Key #\n"
"	Set string value... 12 Helptext Dr\\u\"cken Sie auf die Scale \\u\"ber den Sie Informationen m\\o\"chten. Dr\\u\"cken Sie danach auf \"Hilfe\".\n"
"endproc\n"
"\n"
"procCreateRatingA_EN$ = \"RatingA_EN\"\n"
"procedure CreateRatingA_EN\n"
"	Create Table with column names... RatingA_EN 12\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Chose a grade on the line between left (poor) and right (good) descriptors of speech\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label >Quality\n"
"	Set string value... 6 Text Voice Quality (similarity to normal speech)\n"
"	Set string value... 6 Key Least;Most\n"
"	Set string value... 6 Helptext Is a judgment of the overall voice quality.\n"
"	# Row 7\n"
"	Set string value... 7 Label >Fluency\n"
"	Set string value... 7 Text Fluency\n"
"	Set string value... 7 Key   Non-fluent;Fluent \n"
"	Set string value... 7 Helptext Refers to the fluency of the speech, i.e., is speech steady or unsteady\n"
"	# Row 8\n"
"	Set string value... 8 Label >Continuity\n"
"	Set string value... 8 Text Phonation continuity (\\% voiced)\n"
"	Set string value... 8 Key   0\\% ;100\\% \n"
"	Set string value... 8 Helptext Refers to the continuity of phonation/voicing, i.e. proportion of vowel that is voiced\n"
"	# Row 9\n"
"	Set string value... 9 Label >Hypertonicity\n"
"	Set string value... 9 Text %%Hyper%tonicity\n"
"	Set string value... 9 Key %%Hyper%tonic;Not hyper\n"
"	Set string value... 9 Helptext Hypertonic vs Hypotonic: Scale is split into two with %%Hyper%tonic (left) - Normal (right) on this scale\n"
"	# Row 10\n"
"	Set string value... 10 Label >Hypotonicity\n"
"	Set string value... 10 Text %%Hypo%tonicity\n"
"	Set string value... 10 Key %%Hypo%tonic;Not hypo\n"
"	Set string value... 10 Helptext Hypertonic vs Hypotonic: Scale is split into two with %%Hypo%tonic (left) - Normal (right) on this scale\n"
"	# Row 11\n"
"	Set string value... 11 Label >Noise\n"
"	Set string value... 11 Text Noise\n"
"	Set string value... 11 Key Noise;No noise\n"
"	Set string value... 11 Helptext Noise: The amount of audible noise during speech\n"
"	# Row 12\n"
"	Set string value... 12 Label Help\n"
"	Set string value... 12 Text Scale Help\n"
"	Set string value... 12 Key #\n"
"	Set string value... 12 Helptext Press the scale you want information on, \"Help\" to continue\n"
"endproc\n"
"\n"
"procCreateRatingA_ES$ = \"RatingA_ES\"\n"
"procedure CreateRatingA_ES\n"
"	Create Table with column names... RatingA_ES 12\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Chose a grade on the line between left (poor) and right (good) descriptors of speech\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label >Quality\n"
"	Set string value... 6 Text Voice Quality (similarity to normal speech)\n"
"	Set string value... 6 Key Least;Most\n"
"	Set string value... 6 Helptext Is a judgment of the overall voice quality.\n"
"	# Row 7\n"
"	Set string value... 7 Label >Fluency\n"
"	Set string value... 7 Text Fluency\n"
"	Set string value... 7 Key   Non-fluent;Fluent \n"
"	Set string value... 7 Helptext Refers to the fluency of the speech, i.e., is speech steady or unsteady\n"
"	# Row 8\n"
"	Set string value... 8 Label >Continuity\n"
"	Set string value... 8 Text Phonation continuity (\\% voiced)\n"
"	Set string value... 8 Key   0\\% ;100\\% \n"
"	Set string value... 8 Helptext Refers to the continuity of phonation/voicing, i.e. proportion of vowel that is voiced\n"
"	# Row 9\n"
"	Set string value... 9 Label >Hypertonicity\n"
"	Set string value... 9 Text %%Hyper%tonicity\n"
"	Set string value... 9 Key %%Hyper%tonic;Not hyper\n"
"	Set string value... 9 Helptext Hypertonic vs Hypotonic: Scale is split into two with %%Hyper%tonic (left) - Normal (right) on this scale\n"
"	# Row 10\n"
"	Set string value... 10 Label >Hypotonicity\n"
"	Set string value... 10 Text %%Hypo%tonicity\n"
"	Set string value... 10 Key %%Hypo%tonic;Not hypo\n"
"	Set string value... 10 Helptext Hypertonic vs Hypotonic: Scale is split into two with %%Hypo%tonic (left) - Normal (right) on this scale\n"
"	# Row 11\n"
"	Set string value... 11 Label >Noise\n"
"	Set string value... 11 Text Noise\n"
"	Set string value... 11 Key Noise;No noise\n"
"	Set string value... 11 Helptext Noise: The amount of audible noise during speech\n"
"	# Row 12\n"
"	Set string value... 12 Label Help\n"
"	Set string value... 12 Text Scale Help\n"
"	Set string value... 12 Key #\n"
"	Set string value... 12 Helptext Press the scale you want information on, \"Help\" to continue\n"
"endproc\n"
"\n"
"procCreateRatingA_NL$ = \"RatingA_NL\"\n"
"procedure CreateRatingA_NL\n"
"	Create Table with column names... RatingA_NL 12\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Tekenvenster\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Chose a grade on the line between left (poor) and right (good) descriptors of speech\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label >Quality\n"
"	Set string value... 6 Text Voice Quality (similarity to normal speech)\n"
"	Set string value... 6 Key Least;Most\n"
"	Set string value... 6 Helptext Is a judgment of the overall voice quality.\n"
"	# Row 7\n"
"	Set string value... 7 Label >Fluency\n"
"	Set string value... 7 Text Fluency\n"
"	Set string value... 7 Key   Non-fluent;Fluent \n"
"	Set string value... 7 Helptext Refers to the fluency of the speech, i.e., is speech steady or unsteady\n"
"	# Row 8\n"
"	Set string value... 8 Label >Continuity\n"
"	Set string value... 8 Text Phonation continuity (\\% voiced)\n"
"	Set string value... 8 Key   0\\% ;100\\% \n"
"	Set string value... 8 Helptext Refers to the continuity of phonation/voicing, i.e. proportion of vowel that is voiced\n"
"	# Row 9\n"
"	Set string value... 9 Label >Hypertonicity\n"
"	Set string value... 9 Text %%Hyper%tonicity\n"
"	Set string value... 9 Key %%Hyper%tonic;Not hyper\n"
"	Set string value... 9 Helptext Hypertonic vs Hypotonic: Scale is split into two with %%Hyper%tonic (left) - Normal (right) on this scale\n"
"	# Row 10\n"
"	Set string value... 10 Label >Hypotonicity\n"
"	Set string value... 10 Text %%Hypo%tonicity\n"
"	Set string value... 10 Key %%Hypo%tonic;Not hypo\n"
"	Set string value... 10 Helptext Hypertonic vs Hypotonic: Scale is split into two with %%Hypo%tonic (left) - Normal (right) on this scale\n"
"	# Row 11\n"
"	Set string value... 11 Label >Noise\n"
"	Set string value... 11 Text Noise\n"
"	Set string value... 11 Key Noise;No noise\n"
"	Set string value... 11 Helptext Noise: The amount of audible noise during speech\n"
"	# Row 12\n"
"	Set string value... 12 Label Help\n"
"	Set string value... 12 Text Schaal Help\n"
"	Set string value... 12 Key #\n"
"	Set string value... 12 Helptext Klik op de schaal waar u informatie over wilt hebben, \"Help\" als u verder wilt\n"
"endproc\n"
"\n"
"procCreateRatingGRBAS$ = \"RatingGRBAS\"\n"
"procedure CreateRatingGRBAS\n"
"	Create Table with column names... RatingGRBAS 11\n"
"	... Label LeftX RightX LowY HighY Color Draw\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 LeftX 0\n"
"	Set string value... 1 RightX 0\n"
"	Set string value... 1 LowY 0\n"
"	Set string value... 1 HighY 0\n"
"	Set string value... 1 Color Black\n"
"	Set string value... 1 Draw DrawNull\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 LeftX 0\n"
"	Set string value... 2 RightX 0\n"
"	Set string value... 2 LowY 0\n"
"	Set string value... 2 HighY 0\n"
"	Set string value... 2 Color Black\n"
"	Set string value... 2 Draw DrawNull\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 LeftX 0\n"
"	Set string value... 3 RightX 0\n"
"	Set string value... 3 LowY 0\n"
"	Set string value... 3 HighY 0\n"
"	Set string value... 3 Color Black\n"
"	Set string value... 3 Draw DrawNull\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 LeftX 5\n"
"	Set string value... 4 RightX 85\n"
"	Set string value... 4 LowY 25\n"
"	Set string value... 4 HighY 95\n"
"	Set string value... 4 Color Black\n"
"	Set string value... 4 Draw DrawNull\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 LeftX 5\n"
"	Set string value... 5 RightX 80\n"
"	Set string value... 5 LowY 90\n"
"	Set string value... 5 HighY +5\n"
"	Set string value... 5 Color Black\n"
"	Set string value... 5 Draw DrawNull\n"
"	# Row 6\n"
"	Set string value... 6 Label >Grade\n"
"	Set string value... 6 LeftX 5\n"
"	Set string value... 6 RightX 80\n"
"	Set string value... 6 LowY 81\n"
"	Set string value... 6 HighY +4\n"
"	Set string value... 6 Color Black\n"
"	Set string value... 6 Draw DrawNull\n"
"	# Row 7\n"
"	Set string value... 7 Label >Roughness\n"
"	Set string value... 7 LeftX 5\n"
"	Set string value... 7 RightX 80\n"
"	Set string value... 7 LowY 71\n"
"	Set string value... 7 HighY +4\n"
"	Set string value... 7 Color Black\n"
"	Set string value... 7 Draw DrawNull\n"
"	# Row 8\n"
"	Set string value... 8 Label >Breathiness\n"
"	Set string value... 8 LeftX 5\n"
"	Set string value... 8 RightX 80\n"
"	Set string value... 8 LowY 61\n"
"	Set string value... 8 HighY +4\n"
"	Set string value... 8 Color Black\n"
"	Set string value... 8 Draw DrawNull\n"
"	# Row 9\n"
"	Set string value... 9 Label >Asthenia\n"
"	Set string value... 9 LeftX 5\n"
"	Set string value... 9 RightX 80\n"
"	Set string value... 9 LowY 51\n"
"	Set string value... 9 HighY +4\n"
"	Set string value... 9 Color Black\n"
"	Set string value... 9 Draw DrawNull\n"
"	# Row 10\n"
"	Set string value... 10 Label >Strain\n"
"	Set string value... 10 LeftX 5\n"
"	Set string value... 10 RightX 80\n"
"	Set string value... 10 LowY 41\n"
"	Set string value... 10 HighY +4\n"
"	Set string value... 10 Color Black\n"
"	Set string value... 10 Draw DrawNull\n"
"	# Row 11\n"
"	Set string value... 11 Label Help\n"
"	Set string value... 11 LeftX 70\n"
"	Set string value... 11 RightX 85\n"
"	Set string value... 11 LowY 20\n"
"	Set string value... 11 HighY +5\n"
"	Set string value... 11 Color Black\n"
"	Set string value... 11 Draw DrawNull\n"
"endproc\n"
"\n"
"procCreateRatingGRBASPlus$ = \"RatingGRBASPlus\"\n"
"procedure CreateRatingGRBASPlus\n"
"	Create Table with column names... RatingGRBASPlus 16\n"
"	... Label LeftX RightX LowY HighY Color Draw\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 LeftX 0\n"
"	Set string value... 1 RightX 0\n"
"	Set string value... 1 LowY 0\n"
"	Set string value... 1 HighY 0\n"
"	Set string value... 1 Color Black\n"
"	Set string value... 1 Draw DrawNull\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 LeftX 0\n"
"	Set string value... 2 RightX 0\n"
"	Set string value... 2 LowY 0\n"
"	Set string value... 2 HighY 0\n"
"	Set string value... 2 Color Black\n"
"	Set string value... 2 Draw DrawNull\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 LeftX 0\n"
"	Set string value... 3 RightX 0\n"
"	Set string value... 3 LowY 0\n"
"	Set string value... 3 HighY 0\n"
"	Set string value... 3 Color Black\n"
"	Set string value... 3 Draw DrawNull\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 LeftX 5\n"
"	Set string value... 4 RightX 85\n"
"	Set string value... 4 LowY 20\n"
"	Set string value... 4 HighY 95\n"
"	Set string value... 4 Color Black\n"
"	Set string value... 4 Draw DrawNull\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 LeftX 5\n"
"	Set string value... 5 RightX 80\n"
"	Set string value... 5 LowY 93\n"
"	Set string value... 5 HighY +5\n"
"	Set string value... 5 Color Black\n"
"	Set string value... 5 Draw DrawNull\n"
"	# Row 6\n"
"	Set string value... 6 Label >Intelligibility\n"
"	Set string value... 6 LeftX 5\n"
"	Set string value... 6 RightX 80\n"
"	Set string value... 6 LowY 87\n"
"	Set string value... 6 HighY +3\n"
"	Set string value... 6 Color Black\n"
"	Set string value... 6 Draw DrawNull\n"
"	# Row 7\n"
"	Set string value... 7 Label >Articulation\n"
"	Set string value... 7 LeftX 5\n"
"	Set string value... 7 RightX 80\n"
"	Set string value... 7 LowY 81\n"
"	Set string value... 7 HighY +3\n"
"	Set string value... 7 Color Black\n"
"	Set string value... 7 Draw DrawNull\n"
"	# Row 8\n"
"	Set string value... 8 Label >Grade\n"
"	Set string value... 8 LeftX 5\n"
"	Set string value... 8 RightX 80\n"
"	Set string value... 8 LowY 74\n"
"	Set string value... 8 HighY +3\n"
"	Set string value... 8 Color Black\n"
"	Set string value... 8 Draw DrawNull\n"
"	# Row 9\n"
"	Set string value... 9 Label >Roughness\n"
"	Set string value... 9 LeftX 5\n"
"	Set string value... 9 RightX 80\n"
"	Set string value... 9 LowY 68\n"
"	Set string value... 9 HighY +3\n"
"	Set string value... 9 Color Black\n"
"	Set string value... 9 Draw DrawNull\n"
"	# Row 10\n"
"	Set string value... 10 Label >Breathiness\n"
"	Set string value... 10 LeftX 5\n"
"	Set string value... 10 RightX 80\n"
"	Set string value... 10 LowY 62\n"
"	Set string value... 10 HighY +3\n"
"	Set string value... 10 Color Black\n"
"	Set string value... 10 Draw DrawNull\n"
"	# Row 11\n"
"	Set string value... 11 Label >Asthenia\n"
"	Set string value... 11 LeftX 5\n"
"	Set string value... 11 RightX 80\n"
"	Set string value... 11 LowY 56\n"
"	Set string value... 11 HighY +3\n"
"	Set string value... 11 Color Black\n"
"	Set string value... 11 Draw DrawNull\n"
"	# Row 12\n"
"	Set string value... 12 Label >Strain\n"
"	Set string value... 12 LeftX 5\n"
"	Set string value... 12 RightX 80\n"
"	Set string value... 12 LowY 50\n"
"	Set string value... 12 HighY +3\n"
"	Set string value... 12 Color Black\n"
"	Set string value... 12 Draw DrawNull\n"
"	# Row 13\n"
"	Set string value... 13 Label >Nasality\n"
"	Set string value... 13 LeftX 5\n"
"	Set string value... 13 RightX 80\n"
"	Set string value... 13 LowY 43\n"
"	Set string value... 13 HighY +3\n"
"	Set string value... 13 Color Black\n"
"	Set string value... 13 Draw DrawNull\n"
"	# Row 14\n"
"	Set string value... 14 Label >Prosody\n"
"	Set string value... 14 LeftX 5\n"
"	Set string value... 14 RightX 80\n"
"	Set string value... 14 LowY 37\n"
"	Set string value... 14 HighY +3\n"
"	Set string value... 14 Color Black\n"
"	Set string value... 14 Draw DrawNull\n"
"	# Row 15\n"
"	Set string value... 15 Label >Accent\n"
"	Set string value... 15 LeftX 5\n"
"	Set string value... 15 RightX 80\n"
"	Set string value... 15 LowY 31\n"
"	Set string value... 15 HighY +3\n"
"	Set string value... 15 Color Black\n"
"	Set string value... 15 Draw DrawNull\n"
"	# Row 16\n"
"	Set string value... 16 Label Help\n"
"	Set string value... 16 LeftX 70\n"
"	Set string value... 16 RightX 85\n"
"	Set string value... 16 LowY 25\n"
"	Set string value... 16 HighY +4\n"
"	Set string value... 16 Color Black\n"
"	Set string value... 16 Draw DrawNull\n"
"endproc\n"
"\n"
"procCreateRatingGRBASPlus_EN$ = \"RatingGRBASPlus_EN\"\n"
"procedure CreateRatingGRBASPlus_EN\n"
"	Create Table with column names... RatingGRBASPlus_EN 16\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Chose a grade on the line between left (poor) and right (good) descriptors of speech\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label >Intelligibility\n"
"	Set string value... 6 Text Intelligibility\n"
"	Set string value... 6 Key Poor;Good\n"
"	Set string value... 6 Helptext The impression of intelligibility\n"
"	# Row 7\n"
"	Set string value... 7 Label >Articulation\n"
"	Set string value... 7 Text Articulation\n"
"	Set string value... 7 Key Imprecise;Good\n"
"	Set string value... 7 Helptext Articulation is precise or imprecise\n"
"	# Row 8\n"
"	Set string value... 8 Label >Grade\n"
"	Set string value... 8 Text Grade\n"
"	Set string value... 8 Key Poor;Good\n"
"	Set string value... 8 Helptext GRADE: The degree of hoarseness, amount of noise in the produced sound\n"
"	# Row 9\n"
"	Set string value... 9 Label >Roughness\n"
"	Set string value... 9 Text Roughness\n"
"	Set string value... 9 Key Poor;Good\n"
"	Set string value... 9 Helptext ROUGHNESS: The grade of roughness, in relation to the irregular fluctuation of the fundamental frequency\n"
"	# Row 10\n"
"	Set string value... 10 Label >Breathiness\n"
"	Set string value... 10 Text Breathiness\n"
"	Set string value... 10 Key Poor;Good\n"
"	Set string value... 10 Helptext BREATHINESS: Grade of breathiness, the fraction of the non-modulated turbulence noise in the produced sound\n"
"	# Row 11\n"
"	Set string value... 11 Label >Asthenia\n"
"	Set string value... 11 Text Asthenia\n"
"	Set string value... 11 Key   Poor;Good\n"
"	Set string value... 11 Helptext ASTHENIA: The overall weakness of voice\n"
"	# Row 12\n"
"	Set string value... 12 Label >Strain\n"
"	Set string value... 12 Text Strain\n"
"	Set string value... 12 Key Poor;Good\n"
"	Set string value... 12 Helptext STRAIN: Strained quality, (tenseness of voice, overall muscular tension)\n"
"	# Row 13\n"
"	Set string value... 13 Label >Nasality\n"
"	Set string value... 13 Text Nasality\n"
"	Set string value... 13 Key Poor;Good\n"
"	Set string value... 13 Helptext Nasality: Nasal segments are pronounced nasal, non-nasel sounds are not nasalized\n"
"	# Row 14\n"
"	Set string value... 14 Label >Prosody\n"
"	Set string value... 14 Text Prosody\n"
"	Set string value... 14 Key Monotonous;Normal\n"
"	Set string value... 14 Helptext The speaker speaks in a monotoneous voice or a normal prosody\n"
"	# Row 15\n"
"	Set string value... 15 Label >Accent\n"
"	Set string value... 15 Text Accent\n"
"	Set string value... 15 Key Strong;None\n"
"	Set string value... 15 Helptext Accent: The speaker speaks with a strong accent or dialect\n"
"	# Row 16\n"
"	Set string value... 16 Label Help\n"
"	Set string value... 16 Text Scale Help\n"
"	Set string value... 16 Key #\n"
"	Set string value... 16 Helptext Press the scale you want information on, \"Help\" to continue\n"
"endproc\n"
"\n"
"procCreateRatingGRBASPlus_NL$ = \"RatingGRBASPlus_NL\"\n"
"procedure CreateRatingGRBASPlus_NL\n"
"	Create Table with column names... RatingGRBASPlus_NL 16\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Kies een gradering op de lijn tussen links (slecht) en rechts (goed/normaal) beoordeling van de spraak of stem\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label >Intelligibility\n"
"	Set string value... 6 Text Spraak verstaanbaarheid\n"
"	Set string value... 6 Key Slecht;Goed\n"
"	Set string value... 6 Helptext SPRAAKVERSTAAN: De mate waarin spraak in een ruimte wordt verstaan. \n"
"	# Row 7\n"
"	Set string value... 7 Label >Articulation\n"
"	Set string value... 7 Text Articulatie\n"
"	Set string value... 7 Key Onnauwkeurig;Nauwkeurig\n"
"	Set string value... 7 Helptext ARTICULATIE: De nauwkeurigheid van de articulatie. \n"
"	# Row 8\n"
"	Set string value... 8 Label >Grade\n"
"	Set string value... 8 Text Algemene stemkwaliteit\n"
"	Set string value... 8 Key Slecht;Goed\n"
"	Set string value... 8 Helptext STEMKWALITEIT: De algemene indruk van het stemgeluid/kwaliteit van de stem.\n"
"	# Row 9\n"
"	Set string value... 9 Label >Roughness\n"
"	Set string value... 9 Text Schorheid\n"
"	Set string value... 9 Key Slecht;Goed\n"
"	Set string value... 9 Helptext SCHORHEID: Rauwheid, ruwheid, krakerigheid, indruk van onregelmatigheid in de glottispulsen\n"
"	# Row 10\n"
"	Set string value... 10 Label >Breathiness\n"
"	Set string value... 10 Text Heesheid\n"
"	Set string value... 10 Key Slecht;Goed\n"
"	Set string value... 10 Helptext HEESHEID: Hoorbare turbulente luchtruis inclusief afone momenten en aangeblazen steminzetten\n"
"	# Row 11\n"
"	Set string value... 11 Label >Asthenia\n"
"	Set string value... 11 Text Astheniciteit\n"
"	Set string value... 11 Key Slecht;Goed\n"
"	Set string value... 11 Helptext ASTHENICITEIT: Stemzwakte, hypotone / hypokinetische / adynamische stemgeving\n"
"	# Row 12\n"
"	Set string value... 12 Label >Strain\n"
"	Set string value... 12 Text Geknepenheid\n"
"	Set string value... 12 Key Slecht;Goed\n"
"	Set string value... 12 Helptext GEKNEPENHEID/INSPANNING: Geforceerde, geperste of geknepen stemgeving\n"
"	# Row 13\n"
"	Set string value... 13 Label >Nasality\n"
"	Set string value... 13 Text Nasaliteit\n"
"	Set string value... 13 Key Slecht;Goed\n"
"	Set string value... 13 Helptext NASALITEIT: Neusspraak. Nasale klanken zijn nasaal en niet nasale zijn niet genasaliseerd.\n"
"	# Row 14\n"
"	Set string value... 14 Label >Prosody\n"
"	Set string value... 14 Text Prosodie\n"
"	Set string value... 14 Key Vlak;Gevariëerd\n"
"	Set string value... 14 Helptext PROSODIE: Het ritme, de klemtoon en de intonatie van de stem\n"
"	# Row 15\n"
"	Set string value... 15 Label >Accent\n"
"	Set string value... 15 Text Accent\n"
"	Set string value... 15 Key Sterk;Geen\n"
"	Set string value... 15 Helptext ACCENT/DIALECT: De spreker spreekt met een sterk/geen accent of dialect.\n"
"	# Row 16\n"
"	Set string value... 16 Label Help\n"
"	Set string value... 16 Text Schaal Help\n"
"	Set string value... 16 Key #\n"
"	Set string value... 16 Helptext Druk op de schaal waar u informatie over wilt hebben, Help als u verder wilt\n"
"endproc\n"
"\n"
"procCreateRatingGRBAS_EN$ = \"RatingGRBAS_EN\"\n"
"procedure CreateRatingGRBAS_EN\n"
"	Create Table with column names... RatingGRBAS_EN 11\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Chose a grade on the line between left (poor) and right (good) descriptors of speech\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label >Grade\n"
"	Set string value... 6 Text Grade\n"
"	Set string value... 6 Key 0;1\n"
"	Set string value... 6 Helptext GRADE: The degree of hoarseness, amount of noise in the produced sound\n"
"	# Row 7\n"
"	Set string value... 7 Label >Roughness\n"
"	Set string value... 7 Text Roughness\n"
"	Set string value... 7 Key 0;1\n"
"	Set string value... 7 Helptext ROUGHNESS: The grade of roughness, in relation to the irregular fluctuation of the fundamental frequency\n"
"	# Row 8\n"
"	Set string value... 8 Label >Breathiness\n"
"	Set string value... 8 Text Breathiness\n"
"	Set string value... 8 Key 0;1\n"
"	Set string value... 8 Helptext BREATHINESS: Grade of breathiness, the fraction of the non-modulated turbulence noise in the produced sound\n"
"	# Row 9\n"
"	Set string value... 9 Label >Asthenia\n"
"	Set string value... 9 Text Asthenia\n"
"	Set string value... 9 Key   0;1\n"
"	Set string value... 9 Helptext ASTHENIA: The overall weakness of voice\n"
"	# Row 10\n"
"	Set string value... 10 Label >Strain\n"
"	Set string value... 10 Text Strain\n"
"	Set string value... 10 Key 0;1\n"
"	Set string value... 10 Helptext STRAIN: Strained quality, (tenseness of voice, overall muscular tension)\n"
"	# Row 11\n"
"	Set string value... 11 Label Help\n"
"	Set string value... 11 Text Scale Help\n"
"	Set string value... 11 Key #\n"
"	Set string value... 11 Helptext Press the scale you want information on, \"Help\" to continue\n"
"endproc\n"
"\n"
"procCreateRatingINFVo$ = \"RatingINFVo\"\n"
"procedure CreateRatingINFVo\n"
"	Create Table with column names... RatingINFVo 11\n"
"	... Label LeftX RightX LowY HighY Color Draw\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 LeftX 0\n"
"	Set string value... 1 RightX 0\n"
"	Set string value... 1 LowY 0\n"
"	Set string value... 1 HighY 0\n"
"	Set string value... 1 Color Black\n"
"	Set string value... 1 Draw DrawNull\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 LeftX 0\n"
"	Set string value... 2 RightX 0\n"
"	Set string value... 2 LowY 0\n"
"	Set string value... 2 HighY 0\n"
"	Set string value... 2 Color Black\n"
"	Set string value... 2 Draw DrawNull\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 LeftX 0\n"
"	Set string value... 3 RightX 0\n"
"	Set string value... 3 LowY 0\n"
"	Set string value... 3 HighY 0\n"
"	Set string value... 3 Color Black\n"
"	Set string value... 3 Draw DrawNull\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 LeftX 5\n"
"	Set string value... 4 RightX 85\n"
"	Set string value... 4 LowY 25\n"
"	Set string value... 4 HighY 95\n"
"	Set string value... 4 Color Black\n"
"	Set string value... 4 Draw DrawNull\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 LeftX 5\n"
"	Set string value... 5 RightX 80\n"
"	Set string value... 5 LowY 90\n"
"	Set string value... 5 HighY +5\n"
"	Set string value... 5 Color Black\n"
"	Set string value... 5 Draw DrawNull\n"
"	# Row 6\n"
"	Set string value... 6 Label >Impression\n"
"	Set string value... 6 LeftX 5\n"
"	Set string value... 6 RightX +75\n"
"	Set string value... 6 LowY 81\n"
"	Set string value... 6 HighY +4\n"
"	Set string value... 6 Color Black\n"
"	Set string value... 6 Draw DrawNull\n"
"	# Row 7\n"
"	Set string value... 7 Label >Intelligibility\n"
"	Set string value... 7 LeftX 5\n"
"	Set string value... 7 RightX +75\n"
"	Set string value... 7 LowY 71\n"
"	Set string value... 7 HighY +4\n"
"	Set string value... 7 Color Black\n"
"	Set string value... 7 Draw DrawNull\n"
"	# Row 8\n"
"	Set string value... 8 Label >Fluency\n"
"	Set string value... 8 LeftX 5\n"
"	Set string value... 8 RightX +75\n"
"	Set string value... 8 LowY 61\n"
"	Set string value... 8 HighY +4\n"
"	Set string value... 8 Color Black\n"
"	Set string value... 8 Draw DrawNull\n"
"	# Row 9\n"
"	Set string value... 9 Label >Voice\n"
"	Set string value... 9 LeftX 5\n"
"	Set string value... 9 RightX +75\n"
"	Set string value... 9 LowY 51\n"
"	Set string value... 9 HighY +4\n"
"	Set string value... 9 Color Black\n"
"	Set string value... 9 Draw DrawNull\n"
"	# Row 10\n"
"	Set string value... 10 Label >Noise\n"
"	Set string value... 10 LeftX 5\n"
"	Set string value... 10 RightX +75\n"
"	Set string value... 10 LowY 41\n"
"	Set string value... 10 HighY +4\n"
"	Set string value... 10 Color Black\n"
"	Set string value... 10 Draw DrawNull\n"
"	# Row 11\n"
"	Set string value... 11 Label Help\n"
"	Set string value... 11 LeftX 70\n"
"	Set string value... 11 RightX +15\n"
"	Set string value... 11 LowY 25\n"
"	Set string value... 11 HighY +5\n"
"	Set string value... 11 Color Black\n"
"	Set string value... 11 Draw DrawNull\n"
"endproc\n"
"\n"
"procCreateRatingINFVo_DE$ = \"RatingINFVo_DE\"\n"
"procedure CreateRatingINFVo_DE\n"
"	Create Table with column names... RatingINFVo_DE 11\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Chose a grade on the line between left (poor) and right (good) descriptors of speech\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label >Impression\n"
"	Set string value... 6 Text Impression of Voice (similarity to normal speech)\n"
"	Set string value... 6 Key Least;Most\n"
"	Set string value... 6 Helptext The overall voice quality (like GRADE in GRBAS)\n"
"	# Row 7\n"
"	Set string value... 7 Label >Intelligibility\n"
"	Set string value... 7 Text Intelligibility\n"
"	Set string value... 7 Key Poor;Good\n"
"	Set string value... 7 Helptext The impression of intelligibility\n"
"	# Row 8\n"
"	Set string value... 8 Label >Fluency\n"
"	Set string value... 8 Text Speech fluency\n"
"	Set string value... 8 Key Disfluent;Fluent \n"
"	Set string value... 8 Helptext The perceived smoothness of the sound production\n"
"	# Row 9\n"
"	Set string value... 9 Label >Voice\n"
"	Set string value... 9 Text Voice\n"
"	Set string value... 9 Key   Unsteady;Steady \n"
"	Set string value... 9 Helptext Stability of voice production, are voiced phonemes voiced and unvoiced phonemes unvoiced \n"
"	# Row 10\n"
"	Set string value... 10 Label >Noise\n"
"	Set string value... 10 Text Noise\n"
"	Set string value... 10 Key Noise;No noise\n"
"	Set string value... 10 Helptext The amount of annoyance caused by the audibility of uncontrolled noises produced during speech\n"
"	# Row 11\n"
"	Set string value... 11 Label Help\n"
"	Set string value... 11 Text Scale Help\n"
"	Set string value... 11 Key #\n"
"	Set string value... 11 Helptext Press the scale you want information on, \"Help\" to continue\n"
"endproc\n"
"\n"
"procCreateRatingINFVo_EN$ = \"RatingINFVo_EN\"\n"
"procedure CreateRatingINFVo_EN\n"
"	Create Table with column names... RatingINFVo_EN 11\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Chose a grade on the line between left (poor) and right (good) descriptors of speech\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label >Impression\n"
"	Set string value... 6 Text Impression of Voice (similarity to normal speech)\n"
"	Set string value... 6 Key Least;Most\n"
"	Set string value... 6 Helptext The overall voice quality (like GRADE in GRBAS)\n"
"	# Row 7\n"
"	Set string value... 7 Label >Intelligibility\n"
"	Set string value... 7 Text Intelligibility\n"
"	Set string value... 7 Key Poor;Good\n"
"	Set string value... 7 Helptext The impression of intelligibility\n"
"	# Row 8\n"
"	Set string value... 8 Label >Fluency\n"
"	Set string value... 8 Text Speech fluency\n"
"	Set string value... 8 Key Disfluent;Fluent \n"
"	Set string value... 8 Helptext The perceived smoothness of the sound production\n"
"	# Row 9\n"
"	Set string value... 9 Label >Voice\n"
"	Set string value... 9 Text Voice\n"
"	Set string value... 9 Key   Unsteady;Steady \n"
"	Set string value... 9 Helptext Stability of voice production, are voiced phonemes voiced and unvoiced phonemes unvoiced \n"
"	# Row 10\n"
"	Set string value... 10 Label >Noise\n"
"	Set string value... 10 Text Noise\n"
"	Set string value... 10 Key Noise;No noise\n"
"	Set string value... 10 Helptext The amount of annoyance caused by the audibility of uncontrolled noises produced during speech\n"
"	# Row 11\n"
"	Set string value... 11 Label Help\n"
"	Set string value... 11 Text Scale Help\n"
"	Set string value... 11 Key #\n"
"	Set string value... 11 Helptext Press the scale you want information on, \"Help\" to continue\n"
"endproc\n"
"\n"
"procCreateRatingINFVo_ES$ = \"RatingINFVo_ES\"\n"
"procedure CreateRatingINFVo_ES\n"
"	Create Table with column names... RatingINFVo_ES 11\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Chose a grade on the line between left (poor) and right (good) descriptors of speech\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label >Impression\n"
"	Set string value... 6 Text Impression of Voice (similarity to normal speech)\n"
"	Set string value... 6 Key Least;Most\n"
"	Set string value... 6 Helptext The overall voice quality (like GRADE in GRBAS)\n"
"	# Row 7\n"
"	Set string value... 7 Label >Intelligibility\n"
"	Set string value... 7 Text Intelligibility\n"
"	Set string value... 7 Key Poor;Good\n"
"	Set string value... 7 Helptext The impression of intelligibility\n"
"	# Row 8\n"
"	Set string value... 8 Label >Fluency\n"
"	Set string value... 8 Text Speech fluency\n"
"	Set string value... 8 Key Disfluent;Fluent \n"
"	Set string value... 8 Helptext The perceived smoothness of the sound production\n"
"	# Row 9\n"
"	Set string value... 9 Label >Voice\n"
"	Set string value... 9 Text Voice\n"
"	Set string value... 9 Key   Unsteady;Steady \n"
"	Set string value... 9 Helptext Stability of voice production, are voiced phonemes voiced and unvoiced phonemes unvoiced \n"
"	# Row 10\n"
"	Set string value... 10 Label >Noise\n"
"	Set string value... 10 Text Noise\n"
"	Set string value... 10 Key Noise;No noise\n"
"	Set string value... 10 Helptext The amount of annoyance caused by the audibility of uncontrolled noises produced during speech\n"
"	# Row 11\n"
"	Set string value... 11 Label Help\n"
"	Set string value... 11 Text Scale Help\n"
"	Set string value... 11 Key #\n"
"	Set string value... 11 Helptext Press the scale you want information on, \"Help\" to continue\n"
"endproc\n"
"\n"
"procCreateRatingINFVo_NL$ = \"RatingINFVo_NL\"\n"
"procedure CreateRatingINFVo_NL\n"
"	Create Table with column names... RatingINFVo_NL 11\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Chose a grade on the line between left (poor) and right (good) descriptors of speech\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label >Impression\n"
"	Set string value... 6 Text Impression of Voice (similarity to normal speech)\n"
"	Set string value... 6 Key Least;Most\n"
"	Set string value... 6 Helptext The overall voice quality (like GRADE in GRBAS)\n"
"	# Row 7\n"
"	Set string value... 7 Label >Intelligibility\n"
"	Set string value... 7 Text Intelligibility\n"
"	Set string value... 7 Key Poor;Good\n"
"	Set string value... 7 Helptext The impression of intelligibility\n"
"	# Row 8\n"
"	Set string value... 8 Label >Fluency\n"
"	Set string value... 8 Text Speech fluency\n"
"	Set string value... 8 Key Disfluent;Fluent \n"
"	Set string value... 8 Helptext The perceived smoothness of the sound production\n"
"	# Row 9\n"
"	Set string value... 9 Label >Voice\n"
"	Set string value... 9 Text Voice\n"
"	Set string value... 9 Key   Unsteady;Steady \n"
"	Set string value... 9 Helptext Stability of voice production, are voiced phonemes voiced and unvoiced phonemes unvoiced \n"
"	# Row 10\n"
"	Set string value... 10 Label >Noise\n"
"	Set string value... 10 Text Noise\n"
"	Set string value... 10 Key Noise;No noise\n"
"	Set string value... 10 Helptext The amount of annoyance caused by the audibility of uncontrolled noises produced during speech\n"
"	# Row 11\n"
"	Set string value... 11 Label Help\n"
"	Set string value... 11 Text Scale Help\n"
"	Set string value... 11 Key #\n"
"	Set string value... 11 Helptext Press the scale you want information on, \"Help\" to continue\n"
"endproc\n"
"\n"
"procCreateRatingNKIAVL_NL$ = \"RatingNKIAVL_NL\"\n"
"procedure CreateRatingNKIAVL_NL\n"
"	Create Table with column names... RatingNKIAVL_NL 8\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Chose a grade on the line between left (poor) and right (good) descriptors of speech\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label >Impression\n"
"	Set string value... 6 Text Impression of overall voice quality (similarity to normal speech)\n"
"	Set string value... 6 Key Least;Most\n"
"	Set string value... 6 Helptext The overall voice quality (like GRADE in GRBAS)\n"
"	# Row 7\n"
"	Set string value... 7 Label >Intelligibility\n"
"	Set string value... 7 Text Intelligibility: Impression of the difficulty/ease of decoding the speech signal\n"
"	Set string value... 7 Key Poor;Good\n"
"	Set string value... 7 Helptext The impression of intelligibility. : A speaker with good intelligibility is easy to decode.\n"
"	# Row 8\n"
"	Set string value... 8 Label Help\n"
"	Set string value... 8 Text Scale Help\n"
"	Set string value... 8 Key #\n"
"	Set string value... 8 Helptext Press the scale you want information on, \"Help\" to continue\n"
"endproc\n"
"\n"
"procCreateRatingTEpair$ = \"RatingTEpair\"\n"
"procedure CreateRatingTEpair\n"
"	Create Table with column names... RatingTEpair 9\n"
"	... Label LeftX RightX LowY HighY Color Draw Link Value\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 LeftX 0\n"
"	Set string value... 1 RightX 0\n"
"	Set string value... 1 LowY 0\n"
"	Set string value... 1 HighY 0\n"
"	Set string value... 1 Color Black\n"
"	Set string value... 1 Draw DrawNull\n"
"	Set string value... 1 Link -\n"
"	Set string value... 1 Value \n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 LeftX 0\n"
"	Set string value... 2 RightX 0\n"
"	Set string value... 2 LowY 0\n"
"	Set string value... 2 HighY 0\n"
"	Set string value... 2 Color Black\n"
"	Set string value... 2 Draw DrawNull\n"
"	Set string value... 2 Link -\n"
"	Set string value... 2 Value \n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 LeftX 0\n"
"	Set string value... 3 RightX 0\n"
"	Set string value... 3 LowY 0\n"
"	Set string value... 3 HighY 0\n"
"	Set string value... 3 Color Black\n"
"	Set string value... 3 Draw DrawNull\n"
"	Set string value... 3 Link -\n"
"	Set string value... 3 Value \n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 LeftX 5\n"
"	Set string value... 4 RightX 85\n"
"	Set string value... 4 LowY 25\n"
"	Set string value... 4 HighY 95\n"
"	Set string value... 4 Color Black\n"
"	Set string value... 4 Draw DrawNull\n"
"	Set string value... 4 Link -\n"
"	Set string value... 4 Value \n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 LeftX 5\n"
"	Set string value... 5 RightX 80\n"
"	Set string value... 5 LowY 90\n"
"	Set string value... 5 HighY +5\n"
"	Set string value... 5 Color Black\n"
"	Set string value... 5 Draw DrawNull\n"
"	Set string value... 5 Link -\n"
"	Set string value... 5 Value \n"
"	# Row 6\n"
"	Set string value... 6 Label !>Roughness\n"
"	Set string value... 6 LeftX 5\n"
"	Set string value... 6 RightX 80\n"
"	Set string value... 6 LowY 76\n"
"	Set string value... 6 HighY +4\n"
"	Set string value... 6 Color Black\n"
"	Set string value... 6 Draw DrawNull\n"
"	Set string value... 6 Link -\n"
"	Set string value... 6 Value \n"
"	# Row 7\n"
"	Set string value... 7 Label >Naturalness\n"
"	Set string value... 7 LeftX 5\n"
"	Set string value... 7 RightX 80\n"
"	Set string value... 7 LowY 58\n"
"	Set string value... 7 HighY +4\n"
"	Set string value... 7 Color Black\n"
"	Set string value... 7 Draw DrawNull\n"
"	Set string value... 7 Link -\n"
"	Set string value... 7 Value \n"
"	# Row 8\n"
"	Set string value... 8 Label !>Tightness\n"
"	Set string value... 8 LeftX 5\n"
"	Set string value... 8 RightX 80\n"
"	Set string value... 8 LowY 40\n"
"	Set string value... 8 HighY +4\n"
"	Set string value... 8 Color Black\n"
"	Set string value... 8 Draw DrawNull\n"
"	Set string value... 8 Link -\n"
"	Set string value... 8 Value \n"
"	# Row 9\n"
"	Set string value... 9 Label Help\n"
"	Set string value... 9 LeftX 70\n"
"	Set string value... 9 RightX 85\n"
"	Set string value... 9 LowY 25\n"
"	Set string value... 9 HighY +5\n"
"	Set string value... 9 Color Black\n"
"	Set string value... 9 Draw DrawNull\n"
"	Set string value... 9 Link -\n"
"	Set string value... 9 Value \n"
"endproc\n"
"\n"
"procCreateRatingTEpair_DE$ = \"RatingTEpair_DE\"\n"
"procedure CreateRatingTEpair_DE\n"
"	Create Table with column names... RatingTEpair_DE 9\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Chose a grade on the line between left (fragment A) and right (fragment B) which is closest to the description (center is \"the same\")\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label !>Roughness\n"
"	Set string value... 6 Text Roughness: which fragment sounds more \"Rough\" and by how much (center is \"equally\")\n"
"	Set string value... 6 Key A;B\n"
"	Set string value... 6 Helptext Is a judgement of the roughness of a TE speaker\n"
"	# Row 7\n"
"	Set string value... 7 Label !>Tightness\n"
"	Set string value... 7 Text Tightness: which fragment sounds more \"Tight\" and by how much (center is \"equally\")\n"
"	Set string value... 7 Key A;B\n"
"	Set string value... 7 Helptext Is a judgement of tightness of a TE speaker\n"
"	# Row 8\n"
"	Set string value... 8 Label >Naturalness\n"
"	Set string value... 8 Text Which fragment sounds most like \"real\" TE speech and by how much (center is \"equally\")\n"
"	Set string value... 8 Key A;B\n"
"	Set string value... 8 Helptext TE-ness of voice\n"
"	# Row 9\n"
"	Set string value... 9 Label Help\n"
"	Set string value... 9 Text Scale Help\n"
"	Set string value... 9 Key #\n"
"	Set string value... 9 Helptext Press the scale you want information on, \"Help\" to continue\n"
"endproc\n"
"\n"
"procCreateRatingTEpair_EN$ = \"RatingTEpair_EN\"\n"
"procedure CreateRatingTEpair_EN\n"
"	Create Table with column names... RatingTEpair_EN 9\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Chose a grade on the line between left (fragment A) and right (fragment B) which is closest to the description (center is \"the same\")\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label !>Roughness\n"
"	Set string value... 6 Text Roughness: which fragment sounds more \"Rough\" and by how much (center is \"equally\")\n"
"	Set string value... 6 Key A;B\n"
"	Set string value... 6 Helptext Is a judgement of the roughness of a TE speaker\n"
"	# Row 7\n"
"	Set string value... 7 Label !>Tightness\n"
"	Set string value... 7 Text Tightness: which fragment sounds more \"Tight\" and by how much (center is \"equally\")\n"
"	Set string value... 7 Key A;B\n"
"	Set string value... 7 Helptext Is a judgement of tightness of a TE speaker\n"
"	# Row 8\n"
"	Set string value... 8 Label >Naturalness\n"
"	Set string value... 8 Text Which fragment sounds most like \"real\" TE speech and by how much (center is \"equally\")\n"
"	Set string value... 8 Key A;B\n"
"	Set string value... 8 Helptext TE-ness of voice\n"
"	# Row 9\n"
"	Set string value... 9 Label Help\n"
"	Set string value... 9 Text Scale Help\n"
"	Set string value... 9 Key #\n"
"	Set string value... 9 Helptext Press the scale you want information on, \"Help\" to continue\n"
"endproc\n"
"\n"
"procCreateRatingTEpair_ES$ = \"RatingTEpair_ES\"\n"
"procedure CreateRatingTEpair_ES\n"
"	Create Table with column names... RatingTEpair_ES 9\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Chose a grade on the line between left (fragment A) and right (fragment B) which is closest to the description (center is \"the same\")\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label !>Roughness\n"
"	Set string value... 6 Text Roughness: which fragment sounds more \"Rough\" and by how much (center is \"equally\")\n"
"	Set string value... 6 Key A;B\n"
"	Set string value... 6 Helptext Is a judgement of the roughness of a TE speaker\n"
"	# Row 7\n"
"	Set string value... 7 Label !>Tightness\n"
"	Set string value... 7 Text Tightness: which fragment sounds more \"Tight\" and by how much (center is \"equally\")\n"
"	Set string value... 7 Key A;B\n"
"	Set string value... 7 Helptext Is a judgement of tightness of a TE speaker\n"
"	# Row 8\n"
"	Set string value... 8 Label >Naturalness\n"
"	Set string value... 8 Text Which fragment sounds most like \"real\" TE speech and by how much (center is \"equally\")\n"
"	Set string value... 8 Key A;B\n"
"	Set string value... 8 Helptext TE-ness of voice\n"
"	# Row 9\n"
"	Set string value... 9 Label Help\n"
"	Set string value... 9 Text Scale Help\n"
"	Set string value... 9 Key #\n"
"	Set string value... 9 Helptext Press the scale you want information on, \"Help\" to continue\n"
"endproc\n"
"\n"
"procCreateRatingTEpair_NL$ = \"RatingTEpair_NL\"\n"
"procedure CreateRatingTEpair_NL\n"
"	Create Table with column names... RatingTEpair_NL 9\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Kies een positie op de lijn tussen het eerste fragment (links, A) en het tweede fragment (rechts, B) het midden is \"gelijk\"\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label !>Roughness\n"
"	Set string value... 6 Text Roughness: which fragment sounds more \"Rough\" and by how much (center is \"equally\")\n"
"	Set string value... 6 Key A;B\n"
"	Set string value... 6 Helptext Is a judgement of the roughness of a TE speaker\n"
"	# Row 7\n"
"	Set string value... 7 Label !>Tightness\n"
"	Set string value... 7 Text Tightness: which fragment sounds more \"Tight\" and by how much (center is \"equally\")\n"
"	Set string value... 7 Key A;B\n"
"	Set string value... 7 Helptext Is a judgement of tightness of a TE speaker\n"
"	# Row 8\n"
"	Set string value... 8 Label >Naturalness\n"
"	Set string value... 8 Text Welk fragment klinkt het beste als \"echte\" TE spraak, en hoeveel beter: aan de uiteinden \"heel erg veel beter\"\n"
"	Set string value... 8 Key A;B\n"
"	Set string value... 8 Helptext TE-ness of voice\n"
"	# Row 9\n"
"	Set string value... 9 Label Help\n"
"	Set string value... 9 Text Schaal Hulp\n"
"	Set string value... 9 Key #\n"
"	Set string value... 9 Helptext Klik op de schaal waar u informatie over wilt, \"Help\" om verder te gaan\n"
"endproc\n"
"\n"
"procCreateRatingTEsingle$ = \"RatingTEsingle\"\n"
"procedure CreateRatingTEsingle\n"
"	Create Table with column names... RatingTEsingle 9\n"
"	... Label LeftX RightX LowY HighY Color Draw Link Value\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 LeftX 0\n"
"	Set string value... 1 RightX 0\n"
"	Set string value... 1 LowY 0\n"
"	Set string value... 1 HighY 0\n"
"	Set string value... 1 Color Black\n"
"	Set string value... 1 Draw DrawNull\n"
"	Set string value... 1 Link -\n"
"	Set string value... 1 Value \n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 LeftX 0\n"
"	Set string value... 2 RightX 0\n"
"	Set string value... 2 LowY 0\n"
"	Set string value... 2 HighY 0\n"
"	Set string value... 2 Color Black\n"
"	Set string value... 2 Draw DrawNull\n"
"	Set string value... 2 Link -\n"
"	Set string value... 2 Value \n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 LeftX 0\n"
"	Set string value... 3 RightX 0\n"
"	Set string value... 3 LowY 0\n"
"	Set string value... 3 HighY 0\n"
"	Set string value... 3 Color Black\n"
"	Set string value... 3 Draw DrawNull\n"
"	Set string value... 3 Link -\n"
"	Set string value... 3 Value \n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 LeftX 5\n"
"	Set string value... 4 RightX 85\n"
"	Set string value... 4 LowY 25\n"
"	Set string value... 4 HighY 95\n"
"	Set string value... 4 Color Black\n"
"	Set string value... 4 Draw DrawNull\n"
"	Set string value... 4 Link -\n"
"	Set string value... 4 Value \n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 LeftX 5\n"
"	Set string value... 5 RightX 80\n"
"	Set string value... 5 LowY 90\n"
"	Set string value... 5 HighY +5\n"
"	Set string value... 5 Color Black\n"
"	Set string value... 5 Draw DrawNull\n"
"	Set string value... 5 Link -\n"
"	Set string value... 5 Value \n"
"	# Row 6\n"
"	Set string value... 6 Label !>Roughness\n"
"	Set string value... 6 LeftX 5\n"
"	Set string value... 6 RightX 80\n"
"	Set string value... 6 LowY 76\n"
"	Set string value... 6 HighY +4\n"
"	Set string value... 6 Color Black\n"
"	Set string value... 6 Draw DrawNull\n"
"	Set string value... 6 Link -\n"
"	Set string value... 6 Value \n"
"	# Row 7\n"
"	Set string value... 7 Label >Naturalness\n"
"	Set string value... 7 LeftX 5\n"
"	Set string value... 7 RightX 80\n"
"	Set string value... 7 LowY 60\n"
"	Set string value... 7 HighY +4\n"
"	Set string value... 7 Color Black\n"
"	Set string value... 7 Draw DrawNull\n"
"	Set string value... 7 Link -\n"
"	Set string value... 7 Value \n"
"	# Row 8\n"
"	Set string value... 8 Label !>Tightness\n"
"	Set string value... 8 LeftX 5\n"
"	Set string value... 8 RightX 80\n"
"	Set string value... 8 LowY 40\n"
"	Set string value... 8 HighY +4\n"
"	Set string value... 8 Color Black\n"
"	Set string value... 8 Draw DrawNull\n"
"	Set string value... 8 Link -\n"
"	Set string value... 8 Value \n"
"	# Row 9\n"
"	Set string value... 9 Label Help\n"
"	Set string value... 9 LeftX 70\n"
"	Set string value... 9 RightX 85\n"
"	Set string value... 9 LowY 25\n"
"	Set string value... 9 HighY +5\n"
"	Set string value... 9 Color Black\n"
"	Set string value... 9 Draw DrawNull\n"
"	Set string value... 9 Link -\n"
"	Set string value... 9 Value \n"
"endproc\n"
"\n"
"procCreateRatingTEsingle_DE$ = \"RatingTEsingle_DE\"\n"
"procedure CreateRatingTEsingle_DE\n"
"	Create Table with column names... RatingTEsingle_DE 9\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Kies een positie op de lijn tussen niet menselijk (links) en echte TE spraak (rechts)\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label !>Roughness\n"
"	Set string value... 6 Text Roughness: which fragment sounds more \"Rough\" and by how much (center is \"equally\")\n"
"	Set string value... 6 Key A;B\n"
"	Set string value... 6 Helptext Is a judgement of the roughness of a TE speaker\n"
"	# Row 7\n"
"	Set string value... 7 Label !>Tightness\n"
"	Set string value... 7 Text Tightness: which fragment sounds more \"Tight\" and by how much (center is \"equally\")\n"
"	Set string value... 7 Key A;B\n"
"	Set string value... 7 Helptext Is a judgement of tightness of a TE speaker\n"
"	# Row 8\n"
"	Set string value... 8 Label >Naturalness\n"
"	Set string value... 8 Text klinkt het fragment synthetisch/niet menselijk (links), of als echte TE spraak (rechts)\n"
"	Set string value... 8 Key onmens;TE\n"
"	Set string value... 8 Helptext Is een oordeel over de afstand tot TE spraak\n"
"	# Row 9\n"
"	Set string value... 9 Label Help\n"
"	Set string value... 9 Text Schaal Hulp\n"
"	Set string value... 9 Key #\n"
"	Set string value... 9 Helptext Klik op de schaal waar u informatie over wilt, \"Help\" om verder te gaan\n"
"endproc\n"
"\n"
"procCreateRatingTEsingle_EN$ = \"RatingTEsingle_EN\"\n"
"procedure CreateRatingTEsingle_EN\n"
"	Create Table with column names... RatingTEsingle_EN 9\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Kies een positie op de lijn tussen niet menselijk (links) en echte TE spraak (rechts)\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label !>Roughness\n"
"	Set string value... 6 Text Roughness: which fragment sounds more \"Rough\" and by how much (center is \"equally\")\n"
"	Set string value... 6 Key A;B\n"
"	Set string value... 6 Helptext Is a judgement of the roughness of a TE speaker\n"
"	# Row 7\n"
"	Set string value... 7 Label !>Tightness\n"
"	Set string value... 7 Text Tightness: which fragment sounds more \"Tight\" and by how much (center is \"equally\")\n"
"	Set string value... 7 Key A;B\n"
"	Set string value... 7 Helptext Is a judgement of tightness of a TE speaker\n"
"	# Row 8\n"
"	Set string value... 8 Label >Naturalness\n"
"	Set string value... 8 Text klinkt het fragment synthetisch/niet menselijk (links), of als echte TE spraak (rechts)\n"
"	Set string value... 8 Key onmens;TE\n"
"	Set string value... 8 Helptext Is een oordeel over de afstand tot TE spraak\n"
"	# Row 9\n"
"	Set string value... 9 Label Help\n"
"	Set string value... 9 Text Schaal Hulp\n"
"	Set string value... 9 Key #\n"
"	Set string value... 9 Helptext Klik op de schaal waar u informatie over wilt, \"Help\" om verder te gaan\n"
"endproc\n"
"\n"
"procCreateRatingTEsingle_ES$ = \"RatingTEsingle_ES\"\n"
"procedure CreateRatingTEsingle_ES\n"
"	Create Table with column names... RatingTEsingle_ES 9\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Kies een positie op de lijn tussen niet menselijk (links) en echte TE spraak (rechts)\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label !>Roughness\n"
"	Set string value... 6 Text Roughness: which fragment sounds more \"Rough\" and by how much (center is \"equally\")\n"
"	Set string value... 6 Key A;B\n"
"	Set string value... 6 Helptext Is a judgement of the roughness of a TE speaker\n"
"	# Row 7\n"
"	Set string value... 7 Label !>Tightness\n"
"	Set string value... 7 Text Tightness: which fragment sounds more \"Tight\" and by how much (center is \"equally\")\n"
"	Set string value... 7 Key A;B\n"
"	Set string value... 7 Helptext Is a judgement of tightness of a TE speaker\n"
"	# Row 8\n"
"	Set string value... 8 Label >Naturalness\n"
"	Set string value... 8 Text klinkt het fragment synthetisch/niet menselijk (links), of als echte TE spraak (rechts)\n"
"	Set string value... 8 Key onmens;TE\n"
"	Set string value... 8 Helptext Is een oordeel over de afstand tot TE spraak\n"
"	# Row 9\n"
"	Set string value... 9 Label Help\n"
"	Set string value... 9 Text Schaal Hulp\n"
"	Set string value... 9 Key #\n"
"	Set string value... 9 Helptext Klik op de schaal waar u informatie over wilt, \"Help\" om verder te gaan\n"
"endproc\n"
"\n"
"procCreateRatingTEsingle_JA$ = \"RatingTEsingle_JA\"\n"
"procedure CreateRatingTEsingle_JA\n"
"	Create Table with column names... RatingTEsingle_JA 9\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Kies een positie op de lijn tussen niet menselijk (links) en echte TE spraak (rechts)\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label !>Roughness\n"
"	Set string value... 6 Text Roughness: which fragment sounds more \"Rough\" and by how much (center is \"equally\")\n"
"	Set string value... 6 Key A;B\n"
"	Set string value... 6 Helptext Is a judgement of the roughness of a TE speaker\n"
"	# Row 7\n"
"	Set string value... 7 Label !>Tightness\n"
"	Set string value... 7 Text Tightness: which fragment sounds more \"Tight\" and by how much (center is \"equally\")\n"
"	Set string value... 7 Key A;B\n"
"	Set string value... 7 Helptext Is a judgement of tightness of a TE speaker\n"
"	# Row 8\n"
"	Set string value... 8 Label >Naturalness\n"
"	Set string value... 8 Text klinkt het fragment synthetisch/niet menselijk (links), of als echte TE spraak (rechts)\n"
"	Set string value... 8 Key onmens;TE\n"
"	Set string value... 8 Helptext Is een oordeel over de afstand tot TE spraak\n"
"	# Row 9\n"
"	Set string value... 9 Label Help\n"
"	Set string value... 9 Text Schaal Hulp\n"
"	Set string value... 9 Key #\n"
"	Set string value... 9 Helptext Klik op de schaal waar u informatie over wilt, \"Help\" om verder te gaan\n"
"endproc\n"
"\n"
"procCreateRatingTEsingle_NL$ = \"RatingTEsingle_NL\"\n"
"procedure CreateRatingTEsingle_NL\n"
"	Create Table with column names... RatingTEsingle_NL 9\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Kies een positie op de lijn tussen niet menselijk (links) en echte TE spraak (rechts)\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label !>Roughness\n"
"	Set string value... 6 Text Roughness: which fragment sounds more \"Rough\" and by how much (center is \"equally\")\n"
"	Set string value... 6 Key A;B\n"
"	Set string value... 6 Helptext Is a judgement of the roughness of a TE speaker\n"
"	# Row 7\n"
"	Set string value... 7 Label !>Tightness\n"
"	Set string value... 7 Text Tightness: which fragment sounds more \"Tight\" and by how much (center is \"equally\")\n"
"	Set string value... 7 Key A;B\n"
"	Set string value... 7 Helptext Is a judgement of tightness of a TE speaker\n"
"	# Row 8\n"
"	Set string value... 8 Label >Naturalness\n"
"	Set string value... 8 Text klinkt het fragment synthetisch/niet menselijk (links), of als echte TE spraak (rechts)\n"
"	Set string value... 8 Key onmens;TE\n"
"	Set string value... 8 Helptext Is een oordeel over de afstand tot TE spraak\n"
"	# Row 9\n"
"	Set string value... 9 Label Help\n"
"	Set string value... 9 Text Schaal Hulp\n"
"	Set string value... 9 Key #\n"
"	Set string value... 9 Helptext Klik op de schaal waar u informatie over wilt, \"Help\" om verder te gaan\n"
"endproc\n"
"\n"
"procCreateRatingText$ = \"RatingText\"\n"
"procedure CreateRatingText\n"
"	Create Table with column names... RatingText 25\n"
"	... Label LeftX RightX LowY HighY Color Draw\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 LeftX 0\n"
"	Set string value... 1 RightX 0\n"
"	Set string value... 1 LowY 0\n"
"	Set string value... 1 HighY 0\n"
"	Set string value... 1 Color Black\n"
"	Set string value... 1 Draw DrawNull\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 LeftX 0\n"
"	Set string value... 2 RightX 0\n"
"	Set string value... 2 LowY 0\n"
"	Set string value... 2 HighY 0\n"
"	Set string value... 2 Color Black\n"
"	Set string value... 2 Draw DrawNull\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 LeftX 0\n"
"	Set string value... 3 RightX 0\n"
"	Set string value... 3 LowY 0\n"
"	Set string value... 3 HighY 0\n"
"	Set string value... 3 Color Black\n"
"	Set string value... 3 Draw DrawNull\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 LeftX 5\n"
"	Set string value... 4 RightX 85\n"
"	Set string value... 4 LowY 25\n"
"	Set string value... 4 HighY 95\n"
"	Set string value... 4 Color Black\n"
"	Set string value... 4 Draw DrawNull\n"
"	# Row 5\n"
"	Set string value... 5 Label $HuskinessTxt\n"
"	Set string value... 5 LeftX 5\n"
"	Set string value... 5 RightX 60\n"
"	Set string value... 5 LowY 90\n"
"	Set string value... 5 HighY +5\n"
"	Set string value... 5 Color Black\n"
"	Set string value... 5 Draw DrawNull\n"
"	# Row 6\n"
"	Set string value... 6 Label ()Huskiness_0\n"
"	Set string value... 6 LeftX 15\n"
"	Set string value... 6 RightX +10\n"
"	Set string value... 6 LowY ^-4\n"
"	Set string value... 6 HighY +4\n"
"	Set string value... 6 Color Black\n"
"	Set string value... 6 Draw DrawNull\n"
"	# Row 7\n"
"	Set string value... 7 Label ()Huskiness_1\n"
"	Set string value... 7 LeftX ^+10\n"
"	Set string value... 7 RightX +10\n"
"	Set string value... 7 LowY ^-0\n"
"	Set string value... 7 HighY +4\n"
"	Set string value... 7 Color Black\n"
"	Set string value... 7 Draw DrawNull\n"
"	# Row 8\n"
"	Set string value... 8 Label ()Huskiness_2\n"
"	Set string value... 8 LeftX ^+10\n"
"	Set string value... 8 RightX +10\n"
"	Set string value... 8 LowY ^-0\n"
"	Set string value... 8 HighY +4\n"
"	Set string value... 8 Color Black\n"
"	Set string value... 8 Draw DrawNull\n"
"	# Row 9\n"
"	Set string value... 9 Label ()Huskiness_3\n"
"	Set string value... 9 LeftX ^+10\n"
"	Set string value... 9 RightX +10\n"
"	Set string value... 9 LowY ^-0\n"
"	Set string value... 9 HighY +4\n"
"	Set string value... 9 Color Black\n"
"	Set string value... 9 Draw DrawNull\n"
"	# Row 10\n"
"	Set string value... 10 Label $HoarsenessTxt\n"
"	Set string value... 10 LeftX 5\n"
"	Set string value... 10 RightX 60\n"
"	Set string value... 10 LowY 80\n"
"	Set string value... 10 HighY +5\n"
"	Set string value... 10 Color Black\n"
"	Set string value... 10 Draw DrawNull\n"
"	# Row 11\n"
"	Set string value... 11 Label ()Hoarseness_0\n"
"	Set string value... 11 LeftX 15\n"
"	Set string value... 11 RightX +10\n"
"	Set string value... 11 LowY ^-4\n"
"	Set string value... 11 HighY +4\n"
"	Set string value... 11 Color Black\n"
"	Set string value... 11 Draw DrawNull\n"
"	# Row 12\n"
"	Set string value... 12 Label ()Hoarseness_1\n"
"	Set string value... 12 LeftX ^+10\n"
"	Set string value... 12 RightX +10\n"
"	Set string value... 12 LowY ^-0\n"
"	Set string value... 12 HighY +4\n"
"	Set string value... 12 Color Black\n"
"	Set string value... 12 Draw DrawNull\n"
"	# Row 13\n"
"	Set string value... 13 Label ()Hoarseness_2\n"
"	Set string value... 13 LeftX ^+10\n"
"	Set string value... 13 RightX +10\n"
"	Set string value... 13 LowY ^-0\n"
"	Set string value... 13 HighY +4\n"
"	Set string value... 13 Color Black\n"
"	Set string value... 13 Draw DrawNull\n"
"	# Row 14\n"
"	Set string value... 14 Label ()Hoarseness_3\n"
"	Set string value... 14 LeftX ^+10\n"
"	Set string value... 14 RightX +10\n"
"	Set string value... 14 LowY ^-0\n"
"	Set string value... 14 HighY +4\n"
"	Set string value... 14 Color Black\n"
"	Set string value... 14 Draw DrawNull\n"
"	# Row 15\n"
"	Set string value... 15 Label $NoiseTxt\n"
"	Set string value... 15 LeftX 5\n"
"	Set string value... 15 RightX 60\n"
"	Set string value... 15 LowY 70\n"
"	Set string value... 15 HighY +5\n"
"	Set string value... 15 Color Black\n"
"	Set string value... 15 Draw DrawNull\n"
"	# Row 16\n"
"	Set string value... 16 Label ()Noise_0\n"
"	Set string value... 16 LeftX 20\n"
"	Set string value... 16 RightX +10\n"
"	Set string value... 16 LowY ^-4\n"
"	Set string value... 16 HighY +4\n"
"	Set string value... 16 Color Black\n"
"	Set string value... 16 Draw DrawNull\n"
"	# Row 17\n"
"	Set string value... 17 Label ()Noise_1\n"
"	Set string value... 17 LeftX ^+10\n"
"	Set string value... 17 RightX +10\n"
"	Set string value... 17 LowY ^-0\n"
"	Set string value... 17 HighY +4\n"
"	Set string value... 17 Color Black\n"
"	Set string value... 17 Draw DrawNull\n"
"	# Row 18\n"
"	Set string value... 18 Label ()Noise_2\n"
"	Set string value... 18 LeftX ^+10\n"
"	Set string value... 18 RightX +10\n"
"	Set string value... 18 LowY ^-0\n"
"	Set string value... 18 HighY +4\n"
"	Set string value... 18 Color Black\n"
"	Set string value... 18 Draw DrawNull\n"
"	# Row 19\n"
"	Set string value... 19 Label $AccentedTxt\n"
"	Set string value... 19 LeftX 5\n"
"	Set string value... 19 RightX 60\n"
"	Set string value... 19 LowY 60\n"
"	Set string value... 19 HighY +5\n"
"	Set string value... 19 Color Black\n"
"	Set string value... 19 Draw DrawNull\n"
"	# Row 20\n"
"	Set string value... 20 Label ()Accented_0\n"
"	Set string value... 20 LeftX 20\n"
"	Set string value... 20 RightX +10\n"
"	Set string value... 20 LowY ^-4\n"
"	Set string value... 20 HighY +4\n"
"	Set string value... 20 Color Black\n"
"	Set string value... 20 Draw DrawNull\n"
"	# Row 21\n"
"	Set string value... 21 Label ()Accented_1\n"
"	Set string value... 21 LeftX ^+10\n"
"	Set string value... 21 RightX +10\n"
"	Set string value... 21 LowY ^-0\n"
"	Set string value... 21 HighY +4\n"
"	Set string value... 21 Color Black\n"
"	Set string value... 21 Draw DrawNull\n"
"	# Row 22\n"
"	Set string value... 22 Label ()Accented_2\n"
"	Set string value... 22 LeftX ^+10\n"
"	Set string value... 22 RightX +10\n"
"	Set string value... 22 LowY ^-0\n"
"	Set string value... 22 HighY +4\n"
"	Set string value... 22 Color Black\n"
"	Set string value... 22 Draw DrawNull\n"
"	# Row 23\n"
"	Set string value... 23 Label >Intelligibility\n"
"	Set string value... 23 LeftX 5\n"
"	Set string value... 23 RightX 80\n"
"	Set string value... 23 LowY ^-12\n"
"	Set string value... 23 HighY +4\n"
"	Set string value... 23 Color Black\n"
"	Set string value... 23 Draw DrawNull\n"
"	# Row 24\n"
"	Set string value... 24 Label >Impression\n"
"	Set string value... 24 LeftX 5\n"
"	Set string value... 24 RightX 80\n"
"	Set string value... 24 LowY ^-10\n"
"	Set string value... 24 HighY +4\n"
"	Set string value... 24 Color Black\n"
"	Set string value... 24 Draw DrawNull\n"
"	# Row 25\n"
"	Set string value... 25 Label Help\n"
"	Set string value... 25 LeftX 70\n"
"	Set string value... 25 RightX 85\n"
"	Set string value... 25 LowY 25\n"
"	Set string value... 25 HighY +5\n"
"	Set string value... 25 Color Black\n"
"	Set string value... 25 Draw DrawNull\n"
"endproc\n"
"\n"
"procCreateRatingText_DE$ = \"RatingText_DE\"\n"
"procedure CreateRatingText_DE\n"
"	Create Table with column names... RatingText_DE 25\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $HuskinessTxt\n"
"	Set string value... 5 Text Huskiness (increased noise in the voice)\n"
"	Set string value... 5 Key !\n"
"	Set string value... 5 Helptext Huskiness (increased noise in the voice): convention of GRBASI.B scale\n"
"	# Row 6\n"
"	Set string value... 6 Label ()Huskiness_0\n"
"	Set string value... 6 Text normal\n"
"	Set string value... 6 Key !\n"
"	Set string value... 6 Helptext Huskiness: normal voice\n"
"	# Row 7\n"
"	Set string value... 7 Label ()Huskiness_1\n"
"	Set string value... 7 Text light\n"
"	Set string value... 7 Key !\n"
"	Set string value... 7 Helptext Huskiness: light huskiness\n"
"	# Row 8\n"
"	Set string value... 8 Label ()Huskiness_2\n"
"	Set string value... 8 Text moderate\n"
"	Set string value... 8 Key !\n"
"	Set string value... 8 Helptext Huskiness: moderate huskiness\n"
"	# Row 9\n"
"	Set string value... 9 Label ()Huskiness_3\n"
"	Set string value... 9 Text severe\n"
"	Set string value... 9 Key !\n"
"	Set string value... 9 Helptext Huskiness: severely abnormal\n"
"	# Row 10\n"
"	Set string value... 10 Label $HoarsenessTxt\n"
"	Set string value... 10 Text Hoarseness (irregular and raw voice)\n"
"	Set string value... 10 Key !\n"
"	Set string value... 10 Helptext Hoarseness (irregular and raw voice): conventiona of GRBASI.R scale\n"
"	# Row 11\n"
"	Set string value... 11 Label ()Hoarseness_0\n"
"	Set string value... 11 Text normal\n"
"	Set string value... 11 Key !\n"
"	Set string value... 11 Helptext Hoarseness: normal voice\n"
"	# Row 12\n"
"	Set string value... 12 Label ()Hoarseness_1\n"
"	Set string value... 12 Text light\n"
"	Set string value... 12 Key !\n"
"	Set string value... 12 Helptext Hoarseness: light Hoarseness\n"
"	# Row 13\n"
"	Set string value... 13 Label ()Hoarseness_2\n"
"	Set string value... 13 Text moderate\n"
"	Set string value... 13 Key !\n"
"	Set string value... 13 Helptext Hoarseness: moderate Hoarseness\n"
"	# Row 14\n"
"	Set string value... 14 Label ()Hoarseness_3\n"
"	Set string value... 14 Text severe\n"
"	Set string value... 14 Key !\n"
"	Set string value... 14 Helptext Hoarseness: severely abnormal\n"
"	# Row 15\n"
"	Set string value... 15 Label $NoiseTxt\n"
"	Set string value... 15 Text Noise (presence of non-speech speaker noise) \n"
"	Set string value... 15 Key !\n"
"	Set string value... 15 Helptext Noise (presence of non-speech speaker noise)\n"
"	# Row 16\n"
"	Set string value... 16 Label ()Noise_0\n"
"	Set string value... 16 Text never\n"
"	Set string value... 16 Key !\n"
"	Set string value... 16 Helptext Noise: never\n"
"	# Row 17\n"
"	Set string value... 17 Label ()Noise_1\n"
"	Set string value... 17 Text sometimes\n"
"	Set string value... 17 Key !\n"
"	Set string value... 17 Helptext Noise: sometimes (now and then between phrases)\n"
"	# Row 18\n"
"	Set string value... 18 Label ()Noise_2\n"
"	Set string value... 18 Text mostly\n"
"	Set string value... 18 Key !\n"
"	Set string value... 18 Helptext Noise: most of the time/always (almost before every word) \n"
"	# Row 19\n"
"	Set string value... 19 Label $AccentedTxt\n"
"	Set string value... 19 Text Accentedness (audibility of the origin of the speaker)   \n"
"	Set string value... 19 Key !\n"
"	Set string value... 19 Helptext Accentedness (hoorbaarheid van sprekerafkomst):  \n"
"	# Row 20\n"
"	Set string value... 20 Label ()Accented_0\n"
"	Set string value... 20 Text not\n"
"	Set string value... 20 Key !\n"
"	Set string value... 20 Helptext Accentedness: origin not audible\n"
"	# Row 21\n"
"	Set string value... 21 Label ()Accented_1\n"
"	Set string value... 21 Text slight\n"
"	Set string value... 21 Key !\n"
"	Set string value... 21 Helptext Accentedness: some sounds do refer to the origin of the speaker \n"
"	# Row 22\n"
"	Set string value... 22 Label ()Accented_2\n"
"	Set string value... 22 Text clear\n"
"	Set string value... 22 Key !\n"
"	Set string value... 22 Helptext Accentedness: the speech does clearly reveal the origin (dialect) of the speaker \n"
"	# Row 23\n"
"	Set string value... 23 Label >Intelligibility\n"
"	Set string value... 23 Text Intelligibility: Impression of the difficulty/ease of decoding the speech signal\n"
"	Set string value... 23 Key Poor;Good\n"
"	Set string value... 23 Helptext Intelligibility: Impression of the difficulty/ease of decoding the speech signal\n"
"	# Row 24\n"
"	Set string value... 24 Label >Impression\n"
"	Set string value... 24 Text Impression of overall voice quality (similarity to normal speech)\n"
"	Set string value... 24 Key Least;Most\n"
"	Set string value... 24 Helptext The overall voice quality (like GRADE in GRBAS)\n"
"	# Row 25\n"
"	Set string value... 25 Label Help\n"
"	Set string value... 25 Text Scale Help\n"
"	Set string value... 25 Key #\n"
"	Set string value... 25 Helptext Press the scale you want information on, \"Help\" to continue\n"
"endproc\n"
"\n"
"procCreateRatingText_EN$ = \"RatingText_EN\"\n"
"procedure CreateRatingText_EN\n"
"	Create Table with column names... RatingText_EN 25\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $HuskinessTxt\n"
"	Set string value... 5 Text Huskiness (increased noise in the voice)\n"
"	Set string value... 5 Key !\n"
"	Set string value... 5 Helptext Huskiness (increased noise in the voice): convention of GRBASI.B scale\n"
"	# Row 6\n"
"	Set string value... 6 Label ()Huskiness_0\n"
"	Set string value... 6 Text normal\n"
"	Set string value... 6 Key !\n"
"	Set string value... 6 Helptext Huskiness: normal voice\n"
"	# Row 7\n"
"	Set string value... 7 Label ()Huskiness_1\n"
"	Set string value... 7 Text light\n"
"	Set string value... 7 Key !\n"
"	Set string value... 7 Helptext Huskiness: light huskiness\n"
"	# Row 8\n"
"	Set string value... 8 Label ()Huskiness_2\n"
"	Set string value... 8 Text moderate\n"
"	Set string value... 8 Key !\n"
"	Set string value... 8 Helptext Huskiness: moderate huskiness\n"
"	# Row 9\n"
"	Set string value... 9 Label ()Huskiness_3\n"
"	Set string value... 9 Text severe\n"
"	Set string value... 9 Key !\n"
"	Set string value... 9 Helptext Huskiness: severely abnormal\n"
"	# Row 10\n"
"	Set string value... 10 Label $HoarsenessTxt\n"
"	Set string value... 10 Text Hoarseness (irregular and raw voice)\n"
"	Set string value... 10 Key !\n"
"	Set string value... 10 Helptext Hoarseness (irregular and raw voice): conventiona of GRBASI.R scale\n"
"	# Row 11\n"
"	Set string value... 11 Label ()Hoarseness_0\n"
"	Set string value... 11 Text normal\n"
"	Set string value... 11 Key !\n"
"	Set string value... 11 Helptext Hoarseness: normal voice\n"
"	# Row 12\n"
"	Set string value... 12 Label ()Hoarseness_1\n"
"	Set string value... 12 Text light\n"
"	Set string value... 12 Key !\n"
"	Set string value... 12 Helptext Hoarseness: light Hoarseness\n"
"	# Row 13\n"
"	Set string value... 13 Label ()Hoarseness_2\n"
"	Set string value... 13 Text moderate\n"
"	Set string value... 13 Key !\n"
"	Set string value... 13 Helptext Hoarseness: moderate Hoarseness\n"
"	# Row 14\n"
"	Set string value... 14 Label ()Hoarseness_3\n"
"	Set string value... 14 Text severe\n"
"	Set string value... 14 Key !\n"
"	Set string value... 14 Helptext Hoarseness: severely abnormal\n"
"	# Row 15\n"
"	Set string value... 15 Label $NoiseTxt\n"
"	Set string value... 15 Text Noise (presence of non-speech speaker noise) \n"
"	Set string value... 15 Key !\n"
"	Set string value... 15 Helptext Noise (presence of non-speech speaker noise)\n"
"	# Row 16\n"
"	Set string value... 16 Label ()Noise_0\n"
"	Set string value... 16 Text never\n"
"	Set string value... 16 Key !\n"
"	Set string value... 16 Helptext Noise: never\n"
"	# Row 17\n"
"	Set string value... 17 Label ()Noise_1\n"
"	Set string value... 17 Text sometimes\n"
"	Set string value... 17 Key !\n"
"	Set string value... 17 Helptext Noise: sometimes (now and then between phrases)\n"
"	# Row 18\n"
"	Set string value... 18 Label ()Noise_2\n"
"	Set string value... 18 Text mostly\n"
"	Set string value... 18 Key !\n"
"	Set string value... 18 Helptext Noise: most of the time/always (almost before every word) \n"
"	# Row 19\n"
"	Set string value... 19 Label $AccentedTxt\n"
"	Set string value... 19 Text Accentedness (audibility of the origin of the speaker)   \n"
"	Set string value... 19 Key !\n"
"	Set string value... 19 Helptext Accentedness (hoorbaarheid van sprekerafkomst):  \n"
"	# Row 20\n"
"	Set string value... 20 Label ()Accented_0\n"
"	Set string value... 20 Text not\n"
"	Set string value... 20 Key !\n"
"	Set string value... 20 Helptext Accentedness: origin not audible\n"
"	# Row 21\n"
"	Set string value... 21 Label ()Accented_1\n"
"	Set string value... 21 Text slight\n"
"	Set string value... 21 Key !\n"
"	Set string value... 21 Helptext Accentedness: some sounds do refer to the origin of the speaker \n"
"	# Row 22\n"
"	Set string value... 22 Label ()Accented_2\n"
"	Set string value... 22 Text clear\n"
"	Set string value... 22 Key !\n"
"	Set string value... 22 Helptext Accentedness: the speech does clearly reveal the origin (dialect) of the speaker \n"
"	# Row 23\n"
"	Set string value... 23 Label >Intelligibility\n"
"	Set string value... 23 Text Intelligibility: Impression of the difficulty/ease of decoding the speech signal\n"
"	Set string value... 23 Key Poor;Good\n"
"	Set string value... 23 Helptext Intelligibility: Impression of the difficulty/ease of decoding the speech signal\n"
"	# Row 24\n"
"	Set string value... 24 Label >Impression\n"
"	Set string value... 24 Text Impression of overall voice quality (similarity to normal speech)\n"
"	Set string value... 24 Key Least;Most\n"
"	Set string value... 24 Helptext The overall voice quality (like GRADE in GRBAS)\n"
"	# Row 25\n"
"	Set string value... 25 Label Help\n"
"	Set string value... 25 Text Scale Help\n"
"	Set string value... 25 Key #\n"
"	Set string value... 25 Helptext Press the scale you want information on, \"Help\" to continue\n"
"endproc\n"
"\n"
"procCreateRatingText_ES$ = \"RatingText_ES\"\n"
"procedure CreateRatingText_ES\n"
"	Create Table with column names... RatingText_ES 25\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $HuskinessTxt\n"
"	Set string value... 5 Text Huskiness (increased noise in the voice)\n"
"	Set string value... 5 Key !\n"
"	Set string value... 5 Helptext Huskiness (increased noise in the voice): convention of GRBASI.B scale\n"
"	# Row 6\n"
"	Set string value... 6 Label ()Huskiness_0\n"
"	Set string value... 6 Text normal\n"
"	Set string value... 6 Key !\n"
"	Set string value... 6 Helptext Huskiness: normal voice\n"
"	# Row 7\n"
"	Set string value... 7 Label ()Huskiness_1\n"
"	Set string value... 7 Text light\n"
"	Set string value... 7 Key !\n"
"	Set string value... 7 Helptext Huskiness: light huskiness\n"
"	# Row 8\n"
"	Set string value... 8 Label ()Huskiness_2\n"
"	Set string value... 8 Text moderate\n"
"	Set string value... 8 Key !\n"
"	Set string value... 8 Helptext Huskiness: moderate huskiness\n"
"	# Row 9\n"
"	Set string value... 9 Label ()Huskiness_3\n"
"	Set string value... 9 Text severe\n"
"	Set string value... 9 Key !\n"
"	Set string value... 9 Helptext Huskiness: severely abnormal\n"
"	# Row 10\n"
"	Set string value... 10 Label $HoarsenessTxt\n"
"	Set string value... 10 Text Hoarseness (irregular and raw voice)\n"
"	Set string value... 10 Key !\n"
"	Set string value... 10 Helptext Hoarseness (irregular and raw voice): conventiona of GRBASI.R scale\n"
"	# Row 11\n"
"	Set string value... 11 Label ()Hoarseness_0\n"
"	Set string value... 11 Text normal\n"
"	Set string value... 11 Key !\n"
"	Set string value... 11 Helptext Hoarseness: normal voice\n"
"	# Row 12\n"
"	Set string value... 12 Label ()Hoarseness_1\n"
"	Set string value... 12 Text light\n"
"	Set string value... 12 Key !\n"
"	Set string value... 12 Helptext Hoarseness: light Hoarseness\n"
"	# Row 13\n"
"	Set string value... 13 Label ()Hoarseness_2\n"
"	Set string value... 13 Text moderate\n"
"	Set string value... 13 Key !\n"
"	Set string value... 13 Helptext Hoarseness: moderate Hoarseness\n"
"	# Row 14\n"
"	Set string value... 14 Label ()Hoarseness_3\n"
"	Set string value... 14 Text severe\n"
"	Set string value... 14 Key !\n"
"	Set string value... 14 Helptext Hoarseness: severely abnormal\n"
"	# Row 15\n"
"	Set string value... 15 Label $NoiseTxt\n"
"	Set string value... 15 Text Noise (presence of non-speech speaker noise) \n"
"	Set string value... 15 Key !\n"
"	Set string value... 15 Helptext Noise (presence of non-speech speaker noise)\n"
"	# Row 16\n"
"	Set string value... 16 Label ()Noise_0\n"
"	Set string value... 16 Text never\n"
"	Set string value... 16 Key !\n"
"	Set string value... 16 Helptext Noise: never\n"
"	# Row 17\n"
"	Set string value... 17 Label ()Noise_1\n"
"	Set string value... 17 Text sometimes\n"
"	Set string value... 17 Key !\n"
"	Set string value... 17 Helptext Noise: sometimes (now and then between phrases)\n"
"	# Row 18\n"
"	Set string value... 18 Label ()Noise_2\n"
"	Set string value... 18 Text mostly\n"
"	Set string value... 18 Key !\n"
"	Set string value... 18 Helptext Noise: most of the time/always (almost before every word) \n"
"	# Row 19\n"
"	Set string value... 19 Label $AccentedTxt\n"
"	Set string value... 19 Text Accentedness (audibility of the origin of the speaker)   \n"
"	Set string value... 19 Key !\n"
"	Set string value... 19 Helptext Accentedness (hoorbaarheid van sprekerafkomst):  \n"
"	# Row 20\n"
"	Set string value... 20 Label ()Accented_0\n"
"	Set string value... 20 Text not\n"
"	Set string value... 20 Key !\n"
"	Set string value... 20 Helptext Accentedness: origin not audible\n"
"	# Row 21\n"
"	Set string value... 21 Label ()Accented_1\n"
"	Set string value... 21 Text slight\n"
"	Set string value... 21 Key !\n"
"	Set string value... 21 Helptext Accentedness: some sounds do refer to the origin of the speaker \n"
"	# Row 22\n"
"	Set string value... 22 Label ()Accented_2\n"
"	Set string value... 22 Text clear\n"
"	Set string value... 22 Key !\n"
"	Set string value... 22 Helptext Accentedness: the speech does clearly reveal the origin (dialect) of the speaker \n"
"	# Row 23\n"
"	Set string value... 23 Label >Intelligibility\n"
"	Set string value... 23 Text Intelligibility: Impression of the difficulty/ease of decoding the speech signal\n"
"	Set string value... 23 Key Poor;Good\n"
"	Set string value... 23 Helptext Intelligibility: Impression of the difficulty/ease of decoding the speech signal\n"
"	# Row 24\n"
"	Set string value... 24 Label >Impression\n"
"	Set string value... 24 Text Impression of overall voice quality (similarity to normal speech)\n"
"	Set string value... 24 Key Least;Most\n"
"	Set string value... 24 Helptext The overall voice quality (like GRADE in GRBAS)\n"
"	# Row 25\n"
"	Set string value... 25 Label Help\n"
"	Set string value... 25 Text Scale Help\n"
"	Set string value... 25 Key #\n"
"	Set string value... 25 Helptext Press the scale you want information on, \"Help\" to continue\n"
"endproc\n"
"\n"
"procCreateRatingText_NL$ = \"RatingText_NL\"\n"
"procedure CreateRatingText_NL\n"
"	Create Table with column names... RatingText_NL 25\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $HuskinessTxt\n"
"	Set string value... 5 Text Heesheid (toegenomen ruis in het stemgeluid)\n"
"	Set string value... 5 Key !\n"
"	Set string value... 5 Helptext Heesheid (toegenomen ruis in het stemgeluid): conventies van GRBASI.B schaal\n"
"	# Row 6\n"
"	Set string value... 6 Label ()Huskiness_0\n"
"	Set string value... 6 Text normaal\n"
"	Set string value... 6 Key !\n"
"	Set string value... 6 Helptext Heesheid: normale stem\n"
"	# Row 7\n"
"	Set string value... 7 Label ()Huskiness_1\n"
"	Set string value... 7 Text licht\n"
"	Set string value... 7 Key !\n"
"	Set string value... 7 Helptext Heesheid: licht hees\n"
"	# Row 8\n"
"	Set string value... 8 Label ()Huskiness_2\n"
"	Set string value... 8 Text matig\n"
"	Set string value... 8 Key !\n"
"	Set string value... 8 Helptext Heesheid: matig hees\n"
"	# Row 9\n"
"	Set string value... 9 Label ()Huskiness_3\n"
"	Set string value... 9 Text ernstig\n"
"	Set string value... 9 Key !\n"
"	Set string value... 9 Helptext Heesheid: ernstig afwijkend\n"
"	# Row 10\n"
"	Set string value... 10 Label $HoarsenessTxt\n"
"	Set string value... 10 Text Schorheid (onregelmatig en ruw stemgeluid)\n"
"	Set string value... 10 Key !\n"
"	Set string value... 10 Helptext Schorheid (onregelmatig en ruw stemgeluid): conventies van RBASI.R schaal\n"
"	# Row 11\n"
"	Set string value... 11 Label ()Hoarseness_0\n"
"	Set string value... 11 Text normaal\n"
"	Set string value... 11 Key !\n"
"	Set string value... 11 Helptext Schorheid: normale stem\n"
"	# Row 12\n"
"	Set string value... 12 Label ()Hoarseness_1\n"
"	Set string value... 12 Text licht\n"
"	Set string value... 12 Key !\n"
"	Set string value... 12 Helptext Schorheid: licht hees\n"
"	# Row 13\n"
"	Set string value... 13 Label ()Hoarseness_2\n"
"	Set string value... 13 Text matig\n"
"	Set string value... 13 Key !\n"
"	Set string value... 13 Helptext Schorheid: matig hees\n"
"	# Row 14\n"
"	Set string value... 14 Label ()Hoarseness_3\n"
"	Set string value... 14 Text ernstig\n"
"	Set string value... 14 Key !\n"
"	Set string value... 14 Helptext Schorheid: ernstig afwijkend\n"
"	# Row 15\n"
"	Set string value... 15 Label $NoiseTxt\n"
"	Set string value... 15 Text Bijgeluiden (aanwezigheid van niet-talige sprekergeluiden) \n"
"	Set string value... 15 Key !\n"
"	Set string value... 15 Helptext Bijgeluiden (aanwezigheid van niet-talige sprekergeluiden)\n"
"	# Row 16\n"
"	Set string value... 16 Label ()Noise_0\n"
"	Set string value... 16 Text nooit\n"
"	Set string value... 16 Key !\n"
"	Set string value... 16 Helptext Bijgeluiden: nooit\n"
"	# Row 17\n"
"	Set string value... 17 Label ()Noise_1\n"
"	Set string value... 17 Text soms\n"
"	Set string value... 17 Key !\n"
"	Set string value... 17 Helptext Bijgeluiden: soms (af en toe eens tussen twee deelzinnen)\n"
"	# Row 18\n"
"	Set string value... 18 Label ()Noise_2\n"
"	Set string value... 18 Text meestal\n"
"	Set string value... 18 Key !\n"
"	Set string value... 18 Helptext Bijgeluiden: meestal/continu (ongeveer voor elk woord) \n"
"	# Row 19\n"
"	Set string value... 19 Label $AccentedTxt\n"
"	Set string value... 19 Text Accentgraad (hoorbaarheid van sprekerafkomst)   \n"
"	Set string value... 19 Key !\n"
"	Set string value... 19 Helptext Accentgraad (hoorbaarheid van sprekerafkomst):  \n"
"	# Row 20\n"
"	Set string value... 20 Label ()Accented_0\n"
"	Set string value... 20 Text niet\n"
"	Set string value... 20 Key !\n"
"	Set string value... 20 Helptext Accentgraad: afkomst niet hoorbaar\n"
"	# Row 21\n"
"	Set string value... 21 Label ()Accented_1\n"
"	Set string value... 21 Text licht\n"
"	Set string value... 21 Key !\n"
"	Set string value... 21 Helptext Accentgraad: sommige klanken verwijzen tot op zekere hoogte naar het dialect van de spreker \n"
"	# Row 22\n"
"	Set string value... 22 Label ()Accented_2\n"
"	Set string value... 22 Text duidelijk\n"
"	Set string value... 22 Key !\n"
"	Set string value... 22 Helptext Accentgraad: de spraak verraadt duidelijk de afkomst (dialect) van de spreker \n"
"	# Row 23\n"
"	Set string value... 23 Label >Intelligibility\n"
"	Set string value... 23 Text Indruk van verstaanbaarheid: Hoe verstaanbaar is de spraak\n"
"	Set string value... 23 Key Slecht;Goed\n"
"	Set string value... 23 Helptext De Indruk van verstaanbaarheid : Hoe moeilijk of makkelijk is het om de spreker te verstaan.\n"
"	# Row 24\n"
"	Set string value... 24 Label >Impression\n"
"	Set string value... 24 Text Indruk van stemkwaliteit: Hoe goed/normaal/aangenaam is de stem\n"
"	Set string value... 24 Key Slecht;Goed\n"
"	Set string value... 24 Helptext De algemene stemkwaliteit (zoals de GRADE in GRBAS)\n"
"	# Row 25\n"
"	Set string value... 25 Label Help\n"
"	Set string value... 25 Text Scale Help\n"
"	Set string value... 25 Key #\n"
"	Set string value... 25 Helptext Press the scale you want information on, \"Help\" to continue\n"
"endproc\n"
"\n"
"procCreateRatingVowel$ = \"RatingVowel\"\n"
"procedure CreateRatingVowel\n"
"	Create Table with column names... RatingVowel 9\n"
"	... Label LeftX RightX LowY HighY Color Draw Link Value\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 LeftX 0\n"
"	Set string value... 1 RightX 0\n"
"	Set string value... 1 LowY 0\n"
"	Set string value... 1 HighY 0\n"
"	Set string value... 1 Color Black\n"
"	Set string value... 1 Draw DrawNull\n"
"	Set string value... 1 Link -\n"
"	Set string value... 1 Value \n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 LeftX 0\n"
"	Set string value... 2 RightX 0\n"
"	Set string value... 2 LowY 0\n"
"	Set string value... 2 HighY 0\n"
"	Set string value... 2 Color Black\n"
"	Set string value... 2 Draw DrawNull\n"
"	Set string value... 2 Link -\n"
"	Set string value... 2 Value \n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 LeftX 0\n"
"	Set string value... 3 RightX 0\n"
"	Set string value... 3 LowY 0\n"
"	Set string value... 3 HighY 0\n"
"	Set string value... 3 Color Black\n"
"	Set string value... 3 Draw DrawNull\n"
"	Set string value... 3 Link -\n"
"	Set string value... 3 Value \n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 LeftX 5\n"
"	Set string value... 4 RightX 85\n"
"	Set string value... 4 LowY 25\n"
"	Set string value... 4 HighY 95\n"
"	Set string value... 4 Color Black\n"
"	Set string value... 4 Draw DrawNull\n"
"	Set string value... 4 Link -\n"
"	Set string value... 4 Value \n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 LeftX 5\n"
"	Set string value... 5 RightX 80\n"
"	Set string value... 5 LowY 90\n"
"	Set string value... 5 HighY +5\n"
"	Set string value... 5 Color Black\n"
"	Set string value... 5 Draw DrawNull\n"
"	Set string value... 5 Link -\n"
"	Set string value... 5 Value \n"
"	# Row 6\n"
"	Set string value... 6 Label >Quality\n"
"	Set string value... 6 LeftX 5\n"
"	Set string value... 6 RightX 80\n"
"	Set string value... 6 LowY 76\n"
"	Set string value... 6 HighY +4\n"
"	Set string value... 6 Color Black\n"
"	Set string value... 6 Draw DrawNull\n"
"	Set string value... 6 Link -\n"
"	Set string value... 6 Value \n"
"	# Row 7\n"
"	Set string value... 7 Label >Continuity\n"
"	Set string value... 7 LeftX 5\n"
"	Set string value... 7 RightX 80\n"
"	Set string value... 7 LowY 58\n"
"	Set string value... 7 HighY +4\n"
"	Set string value... 7 Color Black\n"
"	Set string value... 7 Draw DrawNull\n"
"	Set string value... 7 Link -\n"
"	Set string value... 7 Value \n"
"	# Row 8\n"
"	Set string value... 8 Label >Noise\n"
"	Set string value... 8 LeftX 5\n"
"	Set string value... 8 RightX 80\n"
"	Set string value... 8 LowY 40\n"
"	Set string value... 8 HighY +4\n"
"	Set string value... 8 Color Black\n"
"	Set string value... 8 Draw DrawNull\n"
"	Set string value... 8 Link -\n"
"	Set string value... 8 Value \n"
"	# Row 9\n"
"	Set string value... 9 Label Help\n"
"	Set string value... 9 LeftX 70\n"
"	Set string value... 9 RightX 85\n"
"	Set string value... 9 LowY 25\n"
"	Set string value... 9 HighY +5\n"
"	Set string value... 9 Color Black\n"
"	Set string value... 9 Draw DrawNull\n"
"	Set string value... 9 Link -\n"
"	Set string value... 9 Value \n"
"endproc\n"
"\n"
"procCreateRatingVowel_DE$ = \"RatingVowel_DE\"\n"
"procedure CreateRatingVowel_DE\n"
"	Create Table with column names... RatingVowel_DE 9\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Zeichenbereich\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Chose a grade on the line between left (poor) and right (good) descriptors of speech\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label >Quality\n"
"	Set string value... 6 Text Voice Quality (similarity to normal speech)\n"
"	Set string value... 6 Key Least;Most\n"
"	Set string value... 6 Helptext Is a judgment of the overall voice quality.\n"
"	# Row 7\n"
"	Set string value... 7 Label >Continuity\n"
"	Set string value... 7 Text Phonation continuity (\\% voiced)\n"
"	Set string value... 7 Key   0\\% ;100\\% \n"
"	Set string value... 7 Helptext Refers to the continuity of phonation/voicing, i.e. proportion of vowel that is voiced\n"
"	# Row 8\n"
"	Set string value... 8 Label >Noise\n"
"	Set string value... 8 Text Noise\n"
"	Set string value... 8 Key Noise;No noise\n"
"	Set string value... 8 Helptext Noise: The amount of audible noise during speech\n"
"	# Row 9\n"
"	Set string value... 9 Label Help\n"
"	Set string value... 9 Text Scale Hilfe\n"
"	Set string value... 9 Key #\n"
"	Set string value... 9 Helptext Dr\\u\"cken Sie auf die Scale \\u\"ber den Sie Informationen m\\o\"chten. Dr\\u\"cken Sie danach auf \"Hilfe\".\n"
"endproc\n"
"\n"
"procCreateRatingVowel_EN$ = \"RatingVowel_EN\"\n"
"procedure CreateRatingVowel_EN\n"
"	Create Table with column names... RatingVowel_EN 9\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Chose a grade on the line between left (poor) and right (good) descriptors of speech\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label >Quality\n"
"	Set string value... 6 Text Voice Quality (similarity to normal speech)\n"
"	Set string value... 6 Key Least;Most\n"
"	Set string value... 6 Helptext Is a judgment of the overall voice quality.\n"
"	# Row 7\n"
"	Set string value... 7 Label >Continuity\n"
"	Set string value... 7 Text Phonation continuity (\\% voiced)\n"
"	Set string value... 7 Key   0\\% ;100\\% \n"
"	Set string value... 7 Helptext Refers to the continuity of phonation/voicing, i.e. proportion of vowel that is voiced\n"
"	# Row 8\n"
"	Set string value... 8 Label >Noise\n"
"	Set string value... 8 Text Noise\n"
"	Set string value... 8 Key Noise;No noise\n"
"	Set string value... 8 Helptext Noise: The amount of audible noise during speech\n"
"	# Row 9\n"
"	Set string value... 9 Label Help\n"
"	Set string value... 9 Text Scale Help\n"
"	Set string value... 9 Key #\n"
"	Set string value... 9 Helptext Press the scale you want information on, \"Help\" to continue\n"
"endproc\n"
"\n"
"procCreateRatingVowel_ES$ = \"RatingVowel_ES\"\n"
"procedure CreateRatingVowel_ES\n"
"	Create Table with column names... RatingVowel_ES 9\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Display area\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Chose a grade on the line between left (poor) and right (good) descriptors of speech\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label >Quality\n"
"	Set string value... 6 Text Voice Quality (similarity to normal speech)\n"
"	Set string value... 6 Key Least;Most\n"
"	Set string value... 6 Helptext Is a judgment of the overall voice quality.\n"
"	# Row 7\n"
"	Set string value... 7 Label >Continuity\n"
"	Set string value... 7 Text Phonation continuity (\\% voiced)\n"
"	Set string value... 7 Key   0\\% ;100\\% \n"
"	Set string value... 7 Helptext Refers to the continuity of phonation/voicing, i.e. proportion of vowel that is voiced\n"
"	# Row 8\n"
"	Set string value... 8 Label >Noise\n"
"	Set string value... 8 Text Noise\n"
"	Set string value... 8 Key Noise;No noise\n"
"	Set string value... 8 Helptext Noise: The amount of audible noise during speech\n"
"	# Row 9\n"
"	Set string value... 9 Label Help\n"
"	Set string value... 9 Text Scale Help\n"
"	Set string value... 9 Key #\n"
"	Set string value... 9 Helptext Press the scale you want information on, \"Help\" to continue\n"
"endproc\n"
"\n"
"procCreateRatingVowel_NL$ = \"RatingVowel_NL\"\n"
"procedure CreateRatingVowel_NL\n"
"	Create Table with column names... RatingVowel_NL 9\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !CANVAS\n"
"	Set string value... 4 Text Display\n"
"	Set string value... 4 Key ¤\n"
"	Set string value... 4 Helptext Tekenvenster\n"
"	# Row 5\n"
"	Set string value... 5 Label $Scales\n"
"	Set string value... 5 Text Chose a grade on the line between left (poor) and right (good) descriptors of speech\n"
"	Set string value... 5 Key #\n"
"	Set string value... 5 Helptext Visual Analogue rating Scales\n"
"	# Row 6\n"
"	Set string value... 6 Label >Quality\n"
"	Set string value... 6 Text Voice Quality (similarity to normal speech)\n"
"	Set string value... 6 Key Least;Most\n"
"	Set string value... 6 Helptext Is a judgment of the overall voice quality.\n"
"	# Row 7\n"
"	Set string value... 7 Label >Continuity\n"
"	Set string value... 7 Text Phonation continuity (\\% voiced)\n"
"	Set string value... 7 Key   0\\% ;100\\% \n"
"	Set string value... 7 Helptext Refers to the continuity of phonation/voicing, i.e. proportion of vowel that is voiced\n"
"	# Row 8\n"
"	Set string value... 8 Label >Noise\n"
"	Set string value... 8 Text Noise\n"
"	Set string value... 8 Key Noise;No noise\n"
"	Set string value... 8 Helptext Noise: The amount of audible noise during speech\n"
"	# Row 9\n"
"	Set string value... 9 Label Help\n"
"	Set string value... 9 Text Schaal Help\n"
"	Set string value... 9 Key #\n"
"	Set string value... 9 Helptext Klik op de schaal waar u informatie over wilt hebben, \"Help\" als u verder wilt\n"
"endproc\n"
"\n"
"procCreateRecPage$ = \"RecPage\"\n"
"procedure CreateRecPage\n"
"	Create Table with column names... RecPage 30\n"
"	... Label LeftX RightX LowY HighY Color Draw\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 LeftX 0\n"
"	Set string value... 1 RightX 0\n"
"	Set string value... 1 LowY 0\n"
"	Set string value... 1 HighY 0\n"
"	Set string value... 1 Color Black\n"
"	Set string value... 1 Draw DrawNull\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 LeftX 0\n"
"	Set string value... 2 RightX 0\n"
"	Set string value... 2 LowY 0\n"
"	Set string value... 2 HighY 0\n"
"	Set string value... 2 Color Black\n"
"	Set string value... 2 Draw DrawNull\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 LeftX 0\n"
"	Set string value... 3 RightX 0\n"
"	Set string value... 3 LowY 0\n"
"	Set string value... 3 HighY 0\n"
"	Set string value... 3 Color Black\n"
"	Set string value... 3 Draw DrawNull\n"
"	# Row 4\n"
"	Set string value... 4 Label !WindowTitle\n"
"	Set string value... 4 LeftX 0\n"
"	Set string value... 4 RightX 0\n"
"	Set string value... 4 LowY 0\n"
"	Set string value... 4 HighY 0\n"
"	Set string value... 4 Color Black\n"
"	Set string value... 4 Draw DrawNull\n"
"	# Row 5\n"
"	Set string value... 5 Label !CANVAS\n"
"	Set string value... 5 LeftX 5\n"
"	Set string value... 5 RightX 85\n"
"	Set string value... 5 LowY 25\n"
"	Set string value... 5 HighY 95\n"
"	Set string value... 5 Color Black\n"
"	Set string value... 5 Draw DrawNull\n"
"	# Row 6\n"
"	Set string value... 6 Label !PathologicalType\n"
"	Set string value... 6 LeftX 20\n"
"	Set string value... 6 RightX 80\n"
"	Set string value... 6 LowY 90\n"
"	Set string value... 6 HighY 120\n"
"	Set string value... 6 Color Black\n"
"	Set string value... 6 Draw DrawNull\n"
"	# Row 7\n"
"	Set string value... 7 Label Speaker\n"
"	Set string value... 7 LeftX 0\n"
"	Set string value... 7 RightX 10\n"
"	Set string value... 7 LowY 0\n"
"	Set string value... 7 HighY 10\n"
"	Set string value... 7 Color Black\n"
"	Set string value... 7 Draw DrawNull\n"
"	# Row 8\n"
"	Set string value... 8 Label !NextItem\n"
"	Set string value... 8 LeftX 0\n"
"	Set string value... 8 RightX 10\n"
"	Set string value... 8 LowY 0\n"
"	Set string value... 8 HighY 10\n"
"	Set string value... 8 Color Blue\n"
"	Set string value... 8 Draw DrawNext\n"
"	# Row 9\n"
"	Set string value... 9 Label !PreviousItem\n"
"	Set string value... 9 LeftX 0\n"
"	Set string value... 9 RightX 5\n"
"	Set string value... 9 LowY 0\n"
"	Set string value... 9 HighY 10\n"
"	Set string value... 9 Color Blue\n"
"	Set string value... 9 Draw DrawPrevious\n"
"	# Row 10\n"
"	Set string value... 10 Label File\n"
"	Set string value... 10 LeftX 0\n"
"	Set string value... 10 RightX 0\n"
"	Set string value... 10 LowY 0\n"
"	Set string value... 10 HighY 0\n"
"	Set string value... 10 Color Black\n"
"	Set string value... 10 Draw DrawNull\n"
"	# Row 11\n"
"	Set string value... 11 Label Record\n"
"	Set string value... 11 LeftX 31\n"
"	Set string value... 11 RightX 41\n"
"	Set string value... 11 LowY 0\n"
"	Set string value... 11 HighY 10\n"
"	Set string value... 11 Color Red\n"
"	Set string value... 11 Draw DrawRecord\n"
"	# Row 12\n"
"	Set string value... 12 Label Play\n"
"	Set string value... 12 LeftX 43\n"
"	Set string value... 12 RightX 53\n"
"	Set string value... 12 LowY 0\n"
"	Set string value... 12 HighY 10\n"
"	Set string value... 12 Color Red\n"
"	Set string value... 12 Draw DrawPlay\n"
"	# Row 13\n"
"	Set string value... 13 Label Quit\n"
"	Set string value... 13 LeftX 90\n"
"	Set string value... 13 RightX 100\n"
"	Set string value... 13 LowY 90\n"
"	Set string value... 13 HighY 100\n"
"	Set string value... 13 Color Red\n"
"	Set string value... 13 Draw DrawQuit\n"
"	# Row 14\n"
"	Set string value... 14 Label Config\n"
"	Set string value... 14 LeftX 0\n"
"	Set string value... 14 RightX 0\n"
"	Set string value... 14 LowY 0\n"
"	Set string value... 14 HighY 0\n"
"	Set string value... 14 Color Black\n"
"	Set string value... 14 Draw DrawConfig\n"
"	# Row 15\n"
"	Set string value... 15 Label Refresh\n"
"	Set string value... 15 LeftX 90\n"
"	Set string value... 15 RightX 100\n"
"	Set string value... 15 LowY 78\n"
"	Set string value... 15 HighY 88\n"
"	Set string value... 15 Color Black\n"
"	Set string value... 15 Draw DrawRefresh\n"
"	# Row 16\n"
"	Set string value... 16 Label Help\n"
"	Set string value... 16 LeftX 90\n"
"	Set string value... 16 RightX 100\n"
"	Set string value... 16 LowY 66\n"
"	Set string value... 16 HighY 76\n"
"	Set string value... 16 Color Black\n"
"	Set string value... 16 Draw DrawHelp\n"
"	# Row 17\n"
"	Set string value... 17 Label Save\n"
"	Set string value... 17 LeftX 0\n"
"	Set string value... 17 RightX 0\n"
"	Set string value... 17 LowY 0\n"
"	Set string value... 17 HighY 0\n"
"	Set string value... 17 Color Black\n"
"	Set string value... 17 Draw DrawSave\n"
"	# Row 18\n"
"	Set string value... 18 Label Draw_Sound\n"
"	Set string value... 18 LeftX 0\n"
"	Set string value... 18 RightX 0\n"
"	Set string value... 18 LowY 0\n"
"	Set string value... 18 HighY 0\n"
"	Set string value... 18 Color Black\n"
"	Set string value... 18 Draw DrawNull\n"
"	# Row 19\n"
"	Set string value... 19 Label Draw_Pitch\n"
"	Set string value... 19 LeftX 0\n"
"	Set string value... 19 RightX 0\n"
"	Set string value... 19 LowY 0\n"
"	Set string value... 19 HighY 0\n"
"	Set string value... 19 Color Black\n"
"	Set string value... 19 Draw DrawNull\n"
"	# Row 20\n"
"	Set string value... 20 Label Draw_Spectrogram\n"
"	Set string value... 20 LeftX 0\n"
"	Set string value... 20 RightX 0\n"
"	Set string value... 20 LowY 0\n"
"	Set string value... 20 HighY 0\n"
"	Set string value... 20 Color Black\n"
"	Set string value... 20 Draw DrawNull\n"
"	# Row 21\n"
"	Set string value... 21 Label Draw_Ltas\n"
"	Set string value... 21 LeftX 0\n"
"	Set string value... 21 RightX 0\n"
"	Set string value... 21 LowY 0\n"
"	Set string value... 21 HighY 0\n"
"	Set string value... 21 Color Black\n"
"	Set string value... 21 Draw DrawNull\n"
"	# Row 22\n"
"	Set string value... 22 Label Draw_Intensity\n"
"	Set string value... 22 LeftX 0\n"
"	Set string value... 22 RightX 0\n"
"	Set string value... 22 LowY 0\n"
"	Set string value... 22 HighY 0\n"
"	Set string value... 22 Color Black\n"
"	Set string value... 22 Draw DrawNull\n"
"	# Row 23\n"
"	Set string value... 23 Label Draw_Harmonicity\n"
"	Set string value... 23 LeftX 0\n"
"	Set string value... 23 RightX 0\n"
"	Set string value... 23 LowY 0\n"
"	Set string value... 23 HighY 0\n"
"	Set string value... 23 Color Black\n"
"	Set string value... 23 Draw DrawNull\n"
"	# Row 24\n"
"	Set string value... 24 Label Draw_Rating\n"
"	Set string value... 24 LeftX 0\n"
"	Set string value... 24 RightX 0\n"
"	Set string value... 24 LowY 0\n"
"	Set string value... 24 HighY 0\n"
"	Set string value... 24 Color Black\n"
"	Set string value... 24 Draw DrawNull\n"
"	# Row 25\n"
"	Set string value... 25 Label Select\n"
"	Set string value... 25 LeftX 0\n"
"	Set string value... 25 RightX 0\n"
"	Set string value... 25 LowY 0\n"
"	Set string value... 25 HighY 0\n"
"	Set string value... 25 Color Black\n"
"	Set string value... 25 Draw DrawNull\n"
"	# Row 26\n"
"	Set string value... 26 Label ToSelection\n"
"	Set string value... 26 LeftX 0\n"
"	Set string value... 26 RightX 0\n"
"	Set string value... 26 LowY 0\n"
"	Set string value... 26 HighY 0\n"
"	Set string value... 26 Color Black\n"
"	Set string value... 26 Draw DrawNull\n"
"	# Row 27\n"
"	Set string value... 27 Label ZoomOut\n"
"	Set string value... 27 LeftX 0\n"
"	Set string value... 27 RightX 0\n"
"	Set string value... 27 LowY 0\n"
"	Set string value... 27 HighY 0\n"
"	Set string value... 27 Color Black\n"
"	Set string value... 27 Draw DrawNull\n"
"	# Row 28\n"
"	Set string value... 28 Label ZoomIn\n"
"	Set string value... 28 LeftX 0\n"
"	Set string value... 28 RightX 0\n"
"	Set string value... 28 LowY 0\n"
"	Set string value... 28 HighY 0\n"
"	Set string value... 28 Color Black\n"
"	Set string value... 28 Draw DrawNull\n"
"	# Row 29\n"
"	Set string value... 29 Label Previous\n"
"	Set string value... 29 LeftX 0\n"
"	Set string value... 29 RightX 0\n"
"	Set string value... 29 LowY 0\n"
"	Set string value... 29 HighY 0\n"
"	Set string value... 29 Color Black\n"
"	Set string value... 29 Draw DrawPrevious\n"
"	# Row 30\n"
"	Set string value... 30 Label Next\n"
"	Set string value... 30 LeftX 0\n"
"	Set string value... 30 RightX 0\n"
"	Set string value... 30 LowY 0\n"
"	Set string value... 30 HighY 0\n"
"	Set string value... 30 Color Black\n"
"	Set string value... 30 Draw DrawNext\n"
"endproc\n"
"\n"
"procCreateRecPage_EN$ = \"RecPage_EN\"\n"
"procedure CreateRecPage_EN\n"
"	Create Table with column names... RecPage_EN 30\n"
"	... Label Text Key Helptext\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Label !Author\n"
"	Set string value... 1 Text Author\n"
"	Set string value... 1 Key !\n"
"	Set string value... 1 Helptext R.J.J.H. van Son\n"
"	# Row 2\n"
"	Set string value... 2 Label !Copyright\n"
"	Set string value... 2 Text Copyright\n"
"	Set string value... 2 Key !\n"
"	Set string value... 2 Helptext Copyright \\co 2010-2012 R.J.J.H. van Son \\&  the NKI\n"
"	# Row 3\n"
"	Set string value... 3 Label !License\n"
"	Set string value... 3 Text License\n"
"	Set string value... 3 Key !\n"
"	Set string value... 3 Helptext GNU GPL version 2 or later\n"
"	# Row 4\n"
"	Set string value... 4 Label !WindowTitle\n"
"	Set string value... 4 Text NKI TE-VOICE ANALYSIS tool: Main page\n"
"	Set string value... 4 Key !\n"
"	Set string value... 4 Helptext NKI TE-VOICE ANALYSIS tool: Main page\n"
"	# Row 5\n"
"	Set string value... 5 Label !CANVAS\n"
"	Set string value... 5 Text Display\n"
"	Set string value... 5 Key ¤\n"
"	Set string value... 5 Helptext Display area\n"
"	# Row 6\n"
"	Set string value... 6 Label !PathologicalType\n"
"	Set string value... 6 Text - Signal Type:\n"
"	Set string value... 6 Key 012349\n"
"	Set string value... 6 Helptext Pathological Signal Type (AST) in window title I-IV, type 1-4, 0 erases\n"
"	# Row 7\n"
"	Set string value... 7 Label Speaker\n"
"	Set string value... 7 Text Speaker\n"
"	Set string value... 7 Key k\n"
"	Set string value... 7 Helptext Input speaker data\n"
"	# Row 8\n"
"	Set string value... 8 Label !NextItem\n"
"	Set string value... 8 Text Next\n"
"	Set string value... 8 Key x|\\\\\n"
"	Set string value... 8 Helptext Next recording in %serial mode\n"
"	# Row 9\n"
"	Set string value... 9 Label !PreviousItem\n"
"	Set string value... 9 Text Spk\n"
"	Set string value... 9 Key x|\\\\\n"
"	Set string value... 9 Helptext Previous recording in %serial mode\n"
"	# Row 10\n"
"	Set string value... 10 Label File\n"
"	Set string value... 10 Text Open\n"
"	Set string value... 10 Key O\n"
"	Set string value... 10 Helptext Open sound file\n"
"	# Row 11\n"
"	Set string value... 11 Label Record\n"
"	Set string value... 11 Text Record\n"
"	Set string value... 11 Key R\n"
"	Set string value... 11 Helptext Record your speech. You have 4 seconds, watch the recording \"light\"\n"
"	# Row 12\n"
"	Set string value... 12 Label Play\n"
"	Set string value... 12 Text Play\n"
"	Set string value... 12 Key P\n"
"	Set string value... 12 Helptext Play back of your recorded pronunciation\n"
"	# Row 13\n"
"	Set string value... 13 Label Quit\n"
"	Set string value... 13 Text Quit\n"
"	Set string value... 13 Key Q\n"
"	Set string value... 13 Helptext Quit TEVA\n"
"	# Row 14\n"
"	Set string value... 14 Label Config\n"
"	Set string value... 14 Text Settings\n"
"	Set string value... 14 Key S\n"
"	Set string value... 14 Helptext Go to %%Configuration% page\n"
"	# Row 15\n"
"	Set string value... 15 Label Refresh\n"
"	Set string value... 15 Text Refresh\n"
"	Set string value... 15 Key h\n"
"	Set string value... 15 Helptext Redraw the current screen, the space-bar always refreshes screen\n"
"	# Row 16\n"
"	Set string value... 16 Label Help\n"
"	Set string value... 16 Text Help\n"
"	Set string value... 16 Key ?/\n"
"	Set string value... 16 Helptext Press the button you want information on, \"Help\" to continue\n"
"	# Row 17\n"
"	Set string value... 17 Label Save\n"
"	Set string value... 17 Text Print \\# \n"
"	Set string value... 17 Key #\n"
"	Set string value... 17 Helptext Save a report in printer format\n"
"	# Row 18\n"
"	Set string value... 18 Label Draw_Sound\n"
"	Set string value... 18 Text Sound\n"
"	Set string value... 18 Key S\n"
"	Set string value... 18 Helptext Draw the Sound\n"
"	# Row 19\n"
"	Set string value... 19 Label Draw_Pitch\n"
"	Set string value... 19 Text Pitch\n"
"	Set string value... 19 Key t\n"
"	Set string value... 19 Helptext Draw Pitch\n"
"	# Row 20\n"
"	Set string value... 20 Label Draw_Harmonicity\n"
"	Set string value... 20 Text Harmonicity\n"
"	Set string value... 20 Key H\n"
"	Set string value... 20 Helptext Draw the Harmonicity to Noise ratio\n"
"	# Row 21\n"
"	Set string value... 21 Label Draw_Spectrogram\n"
"	Set string value... 21 Text Spectrogram\n"
"	Set string value... 21 Key L\n"
"	Set string value... 21 Helptext Narrow band spectrogram (100 ms) with formants superimposed\n"
"	# Row 22\n"
"	Set string value... 22 Label Draw_Ltas\n"
"	Set string value... 22 Text Ltas\n"
"	Set string value... 22 Key L\n"
"	Set string value... 22 Helptext Long time average spectrum\n"
"	# Row 23\n"
"	Set string value... 23 Label Draw_Intensity\n"
"	Set string value... 23 Text Intensity\n"
"	Set string value... 23 Key I\n"
"	Set string value... 23 Helptext Draw Intensity\n"
"	# Row 24\n"
"	Set string value... 24 Label Draw_Rating\n"
"	Set string value... 24 Text Rating\n"
"	Set string value... 24 Key #\n"
"	Set string value... 24 Helptext Rate the speech on scales \n"
"	# Row 25\n"
"	Set string value... 25 Label Select\n"
"	Set string value... 25 Text Select\n"
"	Set string value... 25 Key e\n"
"	Set string value... 25 Helptext Select new start and endtime\n"
"	# Row 26\n"
"	Set string value... 26 Label ToSelection\n"
"	Set string value... 26 Text To selection\n"
"	Set string value... 26 Key c\n"
"	Set string value... 26 Helptext Go to selected start and endtime\n"
"	# Row 27\n"
"	Set string value... 27 Label ZoomOut\n"
"	Set string value... 27 Text Zoom out -\n"
"	Set string value... 27 Key u\\-_\n"
"	Set string value... 27 Helptext Double the current time window\n"
"	# Row 28\n"
"	Set string value... 28 Label ZoomIn\n"
"	Set string value... 28 Text Zoom in +\n"
"	Set string value... 28 Key n+=\n"
"	Set string value... 28 Helptext Halve the current time window\n"
"	# Row 29\n"
"	Set string value... 29 Label Previous\n"
"	Set string value... 29 Text < Previous\n"
"	Set string value... 29 Key \\<\\,\n"
"	Set string value... 29 Helptext Previous interval, or shift current time window to the left\n"
"	# Row 30\n"
"	Set string value... 30 Label Next\n"
"	Set string value... 30 Text Next >\n"
"	Set string value... 30 Key \\>\\.\n"
"	Set string value... 30 Helptext Next interval, or shift the current time window to the right\n"
"endproc\n"
"\n"
"procCreateCreateTables$ = \"CreateTables\"\n"
"procedure CreateCreateTables\n"
"	Create Table with column names... CreateTables 72\n"
"	... Name\n"
"	# Fill table values\n"
"	# Row 1\n"
"	Set string value... 1 Name Background\n"
"	# Row 2\n"
"	Set string value... 2 Name Config\n"
"	# Row 3\n"
"	Set string value... 3 Name Config_DE\n"
"	# Row 4\n"
"	Set string value... 4 Name Config_EN\n"
"	# Row 5\n"
"	Set string value... 5 Name Config_ES\n"
"	# Row 6\n"
"	Set string value... 6 Name Config_JA\n"
"	# Row 7\n"
"	Set string value... 7 Name Config_NL\n"
"	# Row 8\n"
"	Set string value... 8 Name Credits_DE\n"
"	# Row 9\n"
"	Set string value... 9 Name Credits_EN\n"
"	# Row 10\n"
"	Set string value... 10 Name Credits_ES\n"
"	# Row 11\n"
"	Set string value... 11 Name Credits_JA\n"
"	# Row 12\n"
"	Set string value... 12 Name Credits_NL\n"
"	# Row 13\n"
"	Set string value... 13 Name Feedback_DE\n"
"	# Row 14\n"
"	Set string value... 14 Name Feedback_EN\n"
"	# Row 15\n"
"	Set string value... 15 Name Feedback_ES\n"
"	# Row 16\n"
"	Set string value... 16 Name Feedback_JA\n"
"	# Row 17\n"
"	Set string value... 17 Name Feedback_NL\n"
"	# Row 18\n"
"	Set string value... 18 Name Instruction_DE\n"
"	# Row 19\n"
"	Set string value... 19 Name Instruction_EN\n"
"	# Row 20\n"
"	Set string value... 20 Name Instruction_ES\n"
"	# Row 21\n"
"	Set string value... 21 Name Instruction_JA\n"
"	# Row 22\n"
"	Set string value... 22 Name Instruction_NL\n"
"	# Row 23\n"
"	Set string value... 23 Name MainPage\n"
"	# Row 24\n"
"	Set string value... 24 Name MainPage_DE\n"
"	# Row 25\n"
"	Set string value... 25 Name MainPage_EN\n"
"	# Row 26\n"
"	Set string value... 26 Name MainPage_ES\n"
"	# Row 27\n"
"	Set string value... 27 Name MainPage_JA\n"
"	# Row 28\n"
"	Set string value... 28 Name MainPage_NL\n"
"	# Row 29\n"
"	Set string value... 29 Name PrintSignal_DE\n"
"	# Row 30\n"
"	Set string value... 30 Name PrintSignal_EN\n"
"	# Row 31\n"
"	Set string value... 31 Name PrintSignal_ES\n"
"	# Row 32\n"
"	Set string value... 32 Name PrintSignal_JA\n"
"	# Row 33\n"
"	Set string value... 33 Name PrintSignal_NL\n"
"	# Row 34\n"
"	Set string value... 34 Name RatingA\n"
"	# Row 35\n"
"	Set string value... 35 Name RatingA_DE\n"
"	# Row 36\n"
"	Set string value... 36 Name RatingA_EN\n"
"	# Row 37\n"
"	Set string value... 37 Name RatingA_ES\n"
"	# Row 38\n"
"	Set string value... 38 Name RatingA_NL\n"
"	# Row 39\n"
"	Set string value... 39 Name RatingGRBAS\n"
"	# Row 40\n"
"	Set string value... 40 Name RatingGRBASPlus\n"
"	# Row 41\n"
"	Set string value... 41 Name RatingGRBASPlus_EN\n"
"	# Row 42\n"
"	Set string value... 42 Name RatingGRBASPlus_NL\n"
"	# Row 43\n"
"	Set string value... 43 Name RatingGRBAS_EN\n"
"	# Row 44\n"
"	Set string value... 44 Name RatingINFVo\n"
"	# Row 45\n"
"	Set string value... 45 Name RatingINFVo_DE\n"
"	# Row 46\n"
"	Set string value... 46 Name RatingINFVo_EN\n"
"	# Row 47\n"
"	Set string value... 47 Name RatingINFVo_ES\n"
"	# Row 48\n"
"	Set string value... 48 Name RatingINFVo_NL\n"
"	# Row 49\n"
"	Set string value... 49 Name RatingNKIAVL_NL\n"
"	# Row 50\n"
"	Set string value... 50 Name RatingTEpair\n"
"	# Row 51\n"
"	Set string value... 51 Name RatingTEpair_DE\n"
"	# Row 52\n"
"	Set string value... 52 Name RatingTEpair_EN\n"
"	# Row 53\n"
"	Set string value... 53 Name RatingTEpair_ES\n"
"	# Row 54\n"
"	Set string value... 54 Name RatingTEpair_NL\n"
"	# Row 55\n"
"	Set string value... 55 Name RatingTEsingle\n"
"	# Row 56\n"
"	Set string value... 56 Name RatingTEsingle_DE\n"
"	# Row 57\n"
"	Set string value... 57 Name RatingTEsingle_EN\n"
"	# Row 58\n"
"	Set string value... 58 Name RatingTEsingle_ES\n"
"	# Row 59\n"
"	Set string value... 59 Name RatingTEsingle_JA\n"
"	# Row 60\n"
"	Set string value... 60 Name RatingTEsingle_NL\n"
"	# Row 61\n"
"	Set string value... 61 Name RatingText\n"
"	# Row 62\n"
"	Set string value... 62 Name RatingText_DE\n"
"	# Row 63\n"
"	Set string value... 63 Name RatingText_EN\n"
"	# Row 64\n"
"	Set string value... 64 Name RatingText_ES\n"
"	# Row 65\n"
"	Set string value... 65 Name RatingText_NL\n"
"	# Row 66\n"
"	Set string value... 66 Name RatingVowel\n"
"	# Row 67\n"
"	Set string value... 67 Name RatingVowel_DE\n"
"	# Row 68\n"
"	Set string value... 68 Name RatingVowel_EN\n"
"	# Row 69\n"
"	Set string value... 69 Name RatingVowel_ES\n"
"	# Row 70\n"
"	Set string value... 70 Name RatingVowel_NL\n"
"	# Row 71\n"
"	Set string value... 71 Name RecPage\n"
"	# Row 72\n"
"	Set string value... 72 Name RecPage_EN\n"
"endproc\n"
"\n"
"# When using this script as a library in \"include <script>\", \n"
"# suppress the execution of actual code but DO run the \n"
"# non-interactive initialisation\n"
"if variableExists(\"non_interactive_initialize\")\n"
"	# Initialization from Initialise.praat\n"
"	call global_initialization\n"
"	call global_setup\n"
"	call initializeMainPage\n"
"endif\n"
"if variableExists(\"non_interactive\") or variableExists(\"non_interactive_initialize\")\n"
"	# Jump\n"
"	goto NON_INTERACTIVE\n"
"endif\n"
"\n"
"# Set up system\n"
"call reset_viewport\n"
"\n"
"# Load supporting scripts\n"
"#!praat\n"
"#\n"
"# Library of functions to perform LPC analysis-synthesis\n"
"# of Tracheoesophageal speech. The emphasis is on\n"
"# the ability to manipulate the source characteristics\n"
"# of the synthesized speech.\n"
"#\n"
"# Copyright (C) 2010 R. J. J. H. van Son\n"
"# R.J.J.H.vanSon@gmail.com\n"
"# \n"
"# This program is free software: you can redistribute it and/or modify\n"
"# it under the terms of the GNU General Public License as published by\n"
"# the Free Software Foundation, either version 3 of the License, or\n"
"# (at your option) any later version.\n"
"#\n"
"# This program is distributed in the hope that it will be useful,\n"
"# but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"# GNU General Public License for more details.\n"
"#\n"
"# You should have received a copy of the GNU General Public License\n"
"# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n"
"# \n"
"# To print out documentation, call:\n"
"#> perl -x LPCsourceLib.praat\n"
"# \n"
"################################################################\n"
"#\n"
"# Automatically generated documentation\n"
"#\n"
"# Generate stimuli from Sound+TextGrid\n"
"# Replace unvoiced parts with originals\n"
"# AR: Analysis-Resynthesis\n"
"# EP: Equalized pitch (120-100)\n"
"# EI: Equalized intensity\n"
"# NS: New source using existing pulses\n"
"# Selected Sound plus TextGrid\n"
"#> call generate_stimuli .stimname$ .dirname$\n"
"#\n"
"# Regularize pitch\n"
"# Replace variable periods with fixed pitch period\n"
"# Use Analysis-Resynthesis of selected original\n"
"# (build using the selected TextGrid)\n"
"# as the source for the manipulation\n"
"# Add pitch accents where the textgrid has + in the Accents\n"
"# tier\n"
"# Selected Sound plus TextGrid\n"
"#> call equalize_pitch_in_AnaRes .pitchstart .pitchend\n"
"# \n"
"# Replace variable periods with fixed pitch period on\n"
"# a declination. Use selected original\n"
"# Selected Sound\n"
"#> call equalize_pitch .pitchstart .pitchend\n"
"#\n"
"# Resynthesize with equalized amplitude\n"
"# Add intensity accents where the textgrid has + in the Accents\n"
"# Selected Sound plus TextGrid\n"
"#> call resynthesize_equalized_amplitude .fluctuation\n"
"#\n"
"# Resynthesize LPC Sound with new source\n"
"# Selected Sound plus TextGrid\n"
"#> call resynthesize_LPC_with_new_source\n"
"# \n"
"# Create synthetic new source based on \n"
"# pulse marking estimates.\n"
"# Selected Sound\n"
"#> call synthesize_new_source\n"
"#\n"
"# Simple two way analysis-resynthesis\n"
"# Replace unvoiced parts with original\n"
"# Selected: Sound and TextGrid\n"
"#> call LPC_analysis_resynthesis\n"
"#\n"
"# Equalize source amplitude\n"
"# Read LPC source, determine intensity and create a\n"
"# version with a given standard deviation in the intensity\n"
"# .newSD = Requested Standard Deviation in dB\n"
"# If .newSD = 0, the source is equalized as much as possible.\n"
"# Selected Sound\n"
"#> call equalize_source .newSD\n"
"#\n"
"# Superimpose accent stress on Intensity \n"
"# Selected Sound plus TextGrid\n"
"#> call add_accent_intensity_source\n"
"# \n"
"# Take selected LPC source and construct an intensity tier\n"
"# Selected Sound\n"
"#> call intensityTier_from_LPC_source\n"
"# \n"
"# Convert a flow based source into a differentiated source\n"
"# Set intensity to 70dB. \n"
"# Low-pass filter at .cutoffFreq\n"
"# Selected Sound\n"
"#> call differentiate_LPC_source .cutoffFreq\n"
"# \n"
"# Get pulses from double integrated original wave file\n"
"# Selected Sound\n"
"#> call create_pulses_from_sound\n"
"#\n"
"# Convert an differentiated LPC source into a flow based source\n"
"# De-emphasize and integrate all samples, set intensity to 70 dB\n"
"# Selected Sound\n"
"#> call integrate_DiffLPC_source\n"
"#\n"
"# Extract an LPC source based on the inverse filtering of\n"
"# the selected Sound with its LPC\n"
"# Selected Sound\n"
"#> call extract_DiffLPC_source\n"
"# \n"
"# LPC source to Pointprocess\n"
"# Selected Sound\n"
"#> call create_pointprocess_from_LPCsource\n"
"#\n"
"# Zero out intervals\n"
"#> call zero_intervals .sound$ .textgrid$ .tier .label$\n"
"# \n"
"# Copy samples from sound1 to sound2, using the textgrid\n"
"# Use the intervals with \"label\" on tier \"tier\"\n"
"#> call replace_samples .sound1$ .sound2$ .textgrid$ .tier .label$\n"
"# \n"
"# Add a '+' in the Accents tier for every stressed position\n"
"# Selected TextGrid\n"
"#> call stress_voiced_stretches .wordTier .word$ .vuvTier .accTier .accPosition\n"
"# \n"
"# Add an Accents tier with given default value\n"
"# Selected TextGrid\n"
"#> call add_accent_tier .default$\n"
"# \n"
"# Get the number of the Accents tier, if any\n"
"# Read out with accents_tier_number.accTier\n"
"# Zero of there is no Accents tier\n"
"# Selected TextGrid\n"
"#> call accents_tier_number\n"
"#\n"
"################################################################\n"
"#\n"
"# This is a fake procedure DO NOT CALL\n"
"# It hides the perl script text that generates the documentation \n"
"# from Praat\n"
"procedure helptext_do_not_call\n"
"#\n"
"# To print out documentation, call:\n"
"#> perl -x LPCsourceLib.praat\n"
"#\n"
"#!perl\n"
"print <<\"END_OF_HEADER\";\n"
"################################################################\n"
"#\n"
"# Automatically generated documentation\n"
"END_OF_HEADER\n"
"@lines = <DATA>;\n"
"foreach (@lines){\n"
"    if(/^#(\\s|$)/){\n"
"        print(\"$_\");\n"
"    } elsif(/^procedure\\s/) {\n"
"        s/^procedure\\s/call /g;\n"
"        print(\"#> $_\");\n"
"    };\n"
"}\n"
"print <<\"END_OF_FOOTER\";\n"
"#\n"
"################################################################\n"
"END_OF_FOOTER\n"
"\n"
"__END__\n"
"endproc\n"
"#################################################################\n"
"#\n"
"# Resynthesize an utterrance with a TE voice from a sustained /a/\n"
"#\n"
"# Debugging\n"
"resynthesize_with_TE_source.testResysnthesis = 0\n"
"\n"
"procedure resynthesize_with_TE_source .prosody .targetAR .originalRecording .teSourceRecording\n"
"\n"
"	# Determine articulation rate etc in original\n"
"	call syllable_nuclei -25 2 0.3 1 .originalRecording\n"
"	.articulationrate = syllable_nuclei.articulationrate\n"
"	.speed = 1\n"
"	if .targetAR > 0 and .targetAR < 2\n"
"		.speed = .targetAR\n"
"	elsif syllable_nuclei.voicedcount > 4 and .articulationrate >= 2 and .articulationrate <= 6\n"
"		.speed = .targetAR/.articulationrate\n"
"	endif\n"
"\n"
"	# Scale duration\n"
"	.scaleDuration = 1\n"
"	if .speed > 0\n"
"		.scaleDuration = 1/.speed\n"
"	endif\n"
"	\n"
"	# Scale prosody\n"
"	if .prosody > 1\n"
"		.prosody /= 100\n"
"	endif\n"
"\n"
"	###################################################################\n"
"	#\n"
"	# Set up original recording and generate original parameters\n"
"	#\n"
"	###################################################################\n"
"	\n"
"	selectObject: .originalRecording\n"
"	.origDuration = Get total duration\n"
"	\n"
"	# Source\n"
"	selectObject: .originalRecording\n"
"	call extract_DiffLPC_source\n"
"	.origSource = selected: \"Sound\"\n"
"	Rename: \"OriginalSource\"\n"
"	\n"
"	# Pitch. It is best to determine pitch on the source signal\n"
"	selectObject: .origSource\n"
"	.origPitch = noprogress To Pitch: 0, 75, 600\n"
"	.origPitchTier = Down to PitchTier\n"
"	.origMeanPitch = Get mean (curve): 0, 0\n"
"\n"
"	# Voicing It is best to determine voicing on the source signal\n"
"	# Use one of these two methods!!!\n"
"	selectObject: .origSource\n"
"	.origPoint = noprogress To PointProcess (periodic, cc): 80, 400\n"
"	.origVoicing = noprogress To TextGrid (vuv): 0.020, 0.01\n"
"	Rename: \"OriginalVoicing\"\n"
"	\n"
"	if 0\n"
"		select .origVoicing\n"
"		Remove\n"
"		call voicing_detector .origSource\n"
"		.origVoicing = voicing_detector.voicing\n"
"		select .origVoicing\n"
"		Rename: \"OriginalVoicing\"\n"
"	endif\n"
"	\n"
"	# Remove spurious voiced intervals\n"
"	select .origVoicing\n"
"	.numIntervals = Get number of intervals: 1\n"
"	for .interval to .numIntervals\n"
"		select .origVoicing\n"
"		.label$ = Get label of interval: 1, .interval\n"
"		.start = Get start point: 1, .interval\n"
"		.end = Get end point: 1, .interval\n"
"		call zero_crossing_rate '.originalRecording' '.start' '.end'\n"
"		if zero_crossing_rate.zc_rate > 5000\n"
"			select .origVoicing\n"
"			Set interval text: 1, .interval, \"U\"\n"
"		endif\n"
"	endfor\n"
"\n"
"	# Source Intensity\n"
"	selectObject: .origSource\n"
"	call intensityTier_from_LPC_source\n"
"	.origIntensity = selected: \"IntensityTier\"\n"
"	.origMeanInt = intensityTier_from_LPC_source.energy\n"
"\n"
"	# Original filter. \n"
"	# Add some white noise to silent stretches to prevent instable filters\n"
"	selectObject: .originalRecording\n"
"	.tmp = Copy: \"AdditiveNoise\"\n"
"	Scale intensity: 70.0\n"
"	Formula... if abs(self) < 0.0001 then self + randomGauss(0,0.0001) else self fi\n"
"	call extract_LPC_filter\n"
"	.origFilter = selected: \"LPC\"\n"
"	Rename: \"OriginalFilter\"\n"
"	select .tmp\n"
"	Remove\n"
"	\n"
"	# Test resynthesis\n"
"	if .testResysnthesis\n"
"		select .origPoint\n"
"		Copy: \"TestVoicing\"\n"
"		select .origVoicing\n"
"		Copy: \"TestVoicing\"\n"
"		selectObject: .origFilter\n"
"		plusObject: .origSource\n"
"		.testSound_1 = Filter: \"no\"\n"
"		Scale intensity: 70.0\n"
"		Rename: \"TestSynthesis_1\"\n"
"	endif\n"
"\n"
"	# Clean up\n"
"	select .origPoint\n"
"	plus .origPitch\n"
"	Remove\n"
"	\n"
"	###################################################################\n"
"	#\n"
"	# Scale parameters of original speech against mean \n"
"	#\n"
"	###################################################################\n"
"	\n"
"	# Scale original pitch countour\n"
"	if .prosody <> 1\n"
"		select .origPitchTier\n"
"		Formula... .prosody*self + (1-.prosody)*.origMeanPitch\n"
"	endif\n"
"\n"
"	# Scale original (source) intensity countour\n"
"	if .prosody <> 1\n"
"		select .origIntensity\n"
"		Formula... .prosody*self + (1-.prosody)*.origMeanInt\n"
"	endif\n"
"\n"
"	###################################################################\n"
"	#\n"
"	# Set up source recording and generate source parameters\n"
"	#\n"
"	###################################################################\n"
"\n"
"	# Set up TE source recording\n"
"	selectObject: .teSourceRecording\n"
"	.teSourceDuration = Get total duration\n"
"	\n"
"	# Get source sound\n"
"	selectObject: .teSourceRecording\n"
"	.sourceName$ = selected$(\"Sound\")\n"
"	if index_regex(.sourceName$, \"(?i_LPCsource)\") <= 0\n"
"		call extract_DiffLPC_source\n"
"		.teSource = selected: \"Sound\"\n"
"	else\n"
"		selectObject: .teSourceRecording\n"
"		.teSource = Copy: \"TESource\"\n"
"	endif\n"
"	.teSourceDuration = Get total duration\n"
"	\n"
"	# Determine segments with speech\n"
"	selectObject: .teSource\n"
"	.teTextGrid = noprogress To TextGrid (silences): 80, 0, -10, 0.001, 0.001, \"silent\", \"sounding\"\n"
"\n"
"	# Get source filter\n"
"	selectObject: .teSourceRecording\n"
"	call extract_LPC_filter\n"
"	.teFilter = selected: \"LPC\"\n"
"	\n"
"	###################################################################\n"
"	#\n"
"	# Replace Original source with TE source\n"
"	#\n"
"	###################################################################\n"
"\n"
"	###################################################################\n"
"	#\n"
"	# Construct a new source signal that is long enough\n"
"	#\n"
"	###################################################################\n"
"	.teSourceCopy = -1\n"
"	.durationOfCopy = 0\n"
"	while .durationOfCopy + 0.001 < .origDuration\n"
"		selectObject: .teTextGrid\n"
"		.numSoundIntervals = Get number of intervals: 1\n"
"		for .i to .numSoundIntervals\n"
"			selectObject: .teTextGrid\n"
"			.label$ = Get label of interval: 1, .i\n"
"			if .label$ = \"sounding\" and .durationOfCopy + 0.001 < .origDuration\n"
"				.start = Get start point: 1, .i\n"
"				.end = Get end point: 1, .i\n"
"				# There are silent margins in the source\n"
"				if .start < 0.025\n"
"					.start = 0.025\n"
"				endif\n"
"				if .end > .teSourceDuration - 0.025\n"
"					.end = .teSourceDuration - 0.025\n"
"				endif\n"
"				.duration = .end - .start\n"
"				selectObject: .teSource\n"
"				if .durationOfCopy + .duration > .origDuration\n"
"					.end = .origDuration - .durationOfCopy + .start\n"
"				endif\n"
"				.tmp = Extract part: .start, .end, \"rectangular\", 1.0, \"no\"\n"
"				if .teSourceCopy > 0\n"
"					selectObject: .teSourceCopy\n"
"					plusObject: .tmp\n"
"					.new = Concatenate\n"
"					selectObject: .teSourceCopy\n"
"					plusObject: .tmp\n"
"					Remove\n"
"					.teSourceCopy = .new\n"
"				else\n"
"					.teSourceCopy = .tmp\n"
"				endif\n"
"				.tmp = -1\n"
"				.new = -1\n"
"				selectObject: .teSourceCopy\n"
"				.durationOfCopy = Get total duration\n"
"			endif\n"
"		endfor\n"
"	endwhile\n"
"	selectObject: .teSourceCopy\n"
"	Rename: \"CroppedSource\"\n"
"	\n"
"	# Test resynthesis\n"
"	if .testResysnthesis\n"
"		selectObject: .origFilter\n"
"		plusObject: .teSourceCopy\n"
"		.testSound_2 = Filter: \"no\"\n"
"		Scale intensity: 70.0\n"
"		Rename: \"TestSynthesis_2\"\n"
"	endif\n"
"	\n"
"	###################################################################\n"
"	#\n"
"	# Copy original intensity countour to new source\n"
"	#\n"
"	###################################################################\n"
"	if .prosody > 0\n"
"		selectObject: .teSourceCopy\n"
"		plusObject: .origIntensity\n"
"		.scaledTEsource = Multiply: 0.9\n"
"		Rename: \"ScaledSource\"\n"
"		\n"
"		# Clean up\n"
"		select .teSourceCopy\n"
"		Remove\n"
"	else\n"
"		selectObject: .teSourceCopy\n"
"		Rename: \"ScaledSource\"\n"
"		.scaledTEsource = .teSourceCopy\n"
"		.teSourceCopy = -1\n"
"	endif\n"
"	\n"
"	# Test resynthesis\n"
"	if .testResysnthesis\n"
"		selectObject: .origFilter\n"
"		plusObject: .scaledTEsource\n"
"		.testSound_3 = Filter: \"no\"\n"
"		Scale intensity: 70.0\n"
"		Rename: \"TestSynthesis_3\"\n"
"	endif\n"
"\n"
"	###################################################################\n"
"	#\n"
"	# Superimpose Pitch of original over new source\n"
"	#\n"
"	###################################################################\n"
"	if .prosody > 0\n"
"		select .scaledTEsource\n"
"		.newSourceManipulation = noprogress To Manipulation: 0.01, 75, 600\n"
"		.newSourcePitch = Extract pitch tier\n"
"		.meanSourcePitch = Get mean (curve): 0, 0\n"
"		# Reduce pitch movements\n"
"		select .origPitchTier\n"
"		.meanTargetPitch = Get mean (curve): 0, 0\n"
"		if .meanTargetPitch > 0\n"
"			Formula... self * (.meanSourcePitch / .meanTargetPitch)\n"
"		endif\n"
"		plus .newSourceManipulation\n"
"		Replace pitch tier\n"
"		select .newSourceManipulation\n"
"		.intonatedTEsource = Get resynthesis (overlap-add)\n"
"		Rename: \"IntonatedSource\"\n"
"		\n"
"		select .newSourceManipulation\n"
"		plus .newSourcePitch\n"
"		plus .scaledTEsource\n"
"		Remove\n"
"	else\n"
"		select .scaledTEsource\n"
"		Rename: \"IntonatedSource\"		\n"
"		.intonatedTEsource = .scaledTEsource\n"
"		.scaledTEsource = -1\n"
"	endif\n"
"	\n"
"	# Test resynthesis\n"
"	if .testResysnthesis\n"
"		selectObject: .origFilter\n"
"		plusObject: .intonatedTEsource\n"
"		.testSound_4 = Filter: \"no\"\n"
"		Scale intensity: 70.0\n"
"		Rename: \"TestSynthesis_4\"\n"
"	endif\n"
"	\n"
"	###################################################################\n"
"	#\n"
"	# Replace voiced parts of original with new voice\n"
"	#\n"
"	###################################################################\n"
"	selectObject: .origSource\n"
"	.newSource = Copy: \"NewSource\"\n"
"	Scale intensity: 70.0\n"
"	selectObject: .intonatedTEsource\n"
"	Scale intensity: 70.0\n"
"	\n"
"	call replace_samples IntonatedSource NewSource OriginalVoicing 1 V\n"
"\n"
"	selectObject: .origFilter\n"
"	plusObject: .newSource\n"
"	.speedSound = Filter: \"no\"\n"
"	Scale intensity: 70.0\n"
"	Rename: \"OriginalWithTE\"\n"
"	\n"
"	# Test resynthesis\n"
"	if .testResysnthesis\n"
"		selectObject: .origFilter\n"
"		plusObject: .newSource\n"
"		.testSound_5 = Filter: \"no\"\n"
"		Scale intensity: 70.0\n"
"		Rename: \"TestSynthesis_5\"\n"
"	endif\n"
"\n"
"	###################################################################\n"
"	#\n"
"	# Clean up\n"
"	#\n"
"	###################################################################\n"
"	select .origPitchTier\n"
"	plus .origIntensity\n"
"	plus .origFilter\n"
"	plus .origSource\n"
"	plus .origVoicing\n"
"	plus .teTextGrid\n"
"	plus .teSource\n"
"	plus .intonatedTEsource\n"
"	plus .teFilter\n"
"	plus .newSource\n"
"	Remove\n"
"	\n"
"	###################################################################\n"
"	#\n"
"	# Change duration\n"
"	#\n"
"	###################################################################\n"
"	if .scaleDuration <> 1\n"
"		select .speedSound\n"
"		.newSoundManipulation = noprogress To Manipulation: 0.01, 60, 300\n"
"		.newSoundDurTier = Extract duration tier\n"
"		Add point: 0, .scaleDuration\n"
"		\n"
"		# Synthesize\n"
"		select .newSoundManipulation\n"
"		plus .newSoundDurTier\n"
"		Replace duration tier\n"
"	\n"
"		select .newSoundManipulation\n"
"		.newSound = noprogress Get resynthesis (overlap-add)\n"
"			\n"
"		select .newSoundManipulation\n"
"		plus  .newSoundDurTier\n"
"		plus .speedSound\n"
"		Remove\n"
"	else\n"
"		.newSound = .speedSound\n"
"		.speedSound = -1\n"
"	endif\n"
"	\n"
"	select .newSound \n"
"endproc\n"
"\n"
"\n"
"# Get the average impulse response of the source\n"
"procedure deconvolute_impulse_response .minPitch .source\n"
"	select .source\n"
"	.duration = Get total duration\n"
"	.sampleFrequency = Get sampling frequency\n"
"	.points = noprogress To PointProcess (periodic, cc): 75, 400\n"
"	\n"
"	# Calculate window length\n"
"	if .minPitch <= 0\n"
"		.minPitch = 100\n"
"	endif\n"
"	.windowLength = 1.0/.minPitch\n"
"	.halfWindow = .windowLength / 2\n"
"	\n"
"	# generate summation\n"
"	.impulseResponse = Create Sound from formula: \"ImpulseResponse\", 1, 0.0, .windowLength, .sampleFrequency, \"0\"\n"
"\n"
"	select .points\n"
"	.numPulses = Get number of points\n"
"	for .p to .numPulses\n"
"		select .points\n"
"		.time = Get time from index: .p\n"
"		.start = .time - .halfWindow\n"
"		.end = .start + .windowLength\n"
"		if .start >= 0 and .end <= .duration\n"
"			select .source\n"
"			.tmp = Extract part: .start, .end, \"rectangular\", 1.0, \"no\"\n"
"			Rename: \"Impulse\"\n"
"			select .impulseResponse\n"
"			Formula: \"self + Object_'.tmp'[row,col]\"\n"
"			\n"
"			# Clean up\n"
"			select .tmp\n"
"			Remove\n"
"		endif\n"
"	endfor\n"
"	select .impulseResponse\n"
"	Formula: \"self / '.numPulses'\"\n"
"endproc\n"
"\n"
"#\n"
"# Generate stimuli from Sound+TextGrid\n"
"# Replace unvoiced parts with originals\n"
"# AR: Analysis-Resynthesis\n"
"# EP: Equalized pitch (120-100)\n"
"# EI: Equalized intensity\n"
"# NS: New source using existing pulses\n"
"# Selected Sound plus TextGrid\n"
"procedure generate_stimuli .stimname$ .dirname$\n"
"    .basename$ = selected$(\"Sound\")\n"
"    .textGridname$ = selected$(\"TextGrid\")\n"
"    \n"
"    # Analysis Resynthesis\n"
"    select Sound '.basename$'\n"
"    plus TextGrid '.textGridname$'\n"
"	call LPC_analysis_resynthesis\n"
"    Rename... '.stimname$'AR\n"
"    \n"
"    # Equalized pitch\n"
"    select Sound '.basename$'\n"
"    plus TextGrid '.textGridname$'\n"
"    call equalize_pitch_in_AnaRes 120 100\n"
"    Rename... '.stimname$'EP\n"
"    # Replace unvoiced parts\n"
"	call replace_samples '.basename$' '.stimname$'EP '.textGridname$' 3 U\n"
"    \n"
"	# Equalize source amplitude\n"
"    select Sound '.basename$'\n"
"    plus TextGrid '.textGridname$'\n"
"    call resynthesize_equalized_amplitude 0\n"
"    Rename... '.stimname$'EI\n"
"\n"
"    # Create new source and resynthesize\n"
"    select Sound '.basename$'\n"
"    plus TextGrid '.textGridname$'\n"
"    call resynthesize_LPC_with_new_source\n"
"    Rename... '.stimname$'NS\n"
"\n"
"    # Write out\n"
"    if index_regex(.dirname$, \"[\\w\\.]\") > 0\n"
"        select Sound '.stimname$'AR\n"
"        nowarn Write to WAV file... '.dirname$'/'.stimname$'AR.wav\n"
"        select Sound '.stimname$'EP\n"
"        nowarn Write to WAV file... '.dirname$'/'.stimname$'EP.wav\n"
"        select Sound '.stimname$'EI\n"
"        nowarn Write to WAV file... '.dirname$'/'.stimname$'EI.wav\n"
"        select Sound '.stimname$'NS\n"
"        nowarn Write to WAV file... '.dirname$'/'.stimname$'NS.wav\n"
"        select Sound '.stimname$'AR\n"
"        plus Sound '.stimname$'EP\n"
"        plus Sound '.stimname$'EI\n"
"        plus Sound '.stimname$'NS\n"
"        Remove\n"
"    endif\n"
"\n"
"endproc\n"
"\n"
"#\n"
"# Regularize pitch\n"
"# Replace variable periods with fixed pitch period\n"
"# Use Analysis-Resynthesis of selected original\n"
"# (build using the selected TextGrid)\n"
"# as the source for the manipulation\n"
"# Add pitch accents where the textgrid has + in the Accents\n"
"# tier\n"
"# Selected Sound plus TextGrid\n"
"procedure equalize_pitch_in_AnaRes .pitchstart .pitchend\n"
"    .basename$ = selected$(\"Sound\")\n"
"    .textGridname$ = selected$(\"TextGrid\")\n"
"    .basePointsName$ = .basename$+\"_Pulses\"\n"
"    call create_pulses_from_sound\n"
"    Rename... '.basePointsName$'\n"
"    select PointProcess '.basePointsName$'\n"
"    \n"
"    select TextGrid '.textGridname$'\n"
"    call accents_tier_number\n"
"    .accTier = accents_tier_number.accTier\n"
"    .numAccIntervals = Get number of intervals... '.accTier'\n"
"    \n"
"    # Analysis Resynthesis\n"
"    select Sound '.basename$'\n"
"    plus TextGrid '.textGridname$'\n"
"	call LPC_analysis_resynthesis\n"
"    Rename... '.basename$'AR_TMP\n"
"    \n"
"    select Sound '.basename$'AR_TMP\n"
"    .duration = Get total duration\n"
"    To Manipulation... 0.005 50 350\n"
"    Rename... '.basename$'TMP\n"
"    plus PointProcess '.basePointsName$'\n"
"    Replace pulses\n"
"    select Manipulation '.basename$'TMP\n"
"    Extract pitch tier\n"
"    Rename... '.basename$'TMP\n"
"    \n"
"    Remove points between... 0 '.duration'\n"
"    Add point... 0 '.pitchstart'\n"
"    Add point... .duration '.pitchend'\n"
"    for .i to .numAccIntervals\n"
"        select TextGrid '.textGridname$'\n"
"        .currentAcc$ = Get label of interval... '.accTier' '.i'\n"
"        # Add accent movement\n"
"        if .currentAcc$ = \"+\"\n"
"            .currentStart = Get start point... '.accTier' '.i'\n"
"            .currentEnd = Get end point... '.accTier' '.i'\n"
"            .currentThird = .currentStart + (.currentEnd - .currentStart)/3\n"
"            select PitchTier '.basename$'TMP\n"
"            .currentStartF0 = Get value at time... '.currentStart'\n"
"            .currentEndF0 = Get value at time... '.currentEnd'\n"
"            .currentThirdF0 = Get value at time... '.currentThird'\n"
"            # Add 2 semitones\n"
"            .currentThirdF0 *= 10^(2/12)\n"
"            Add point... '.currentStart' '.currentStartF0'\n"
"            Add point... '.currentThird' '.currentThirdF0'\n"
"            Add point... '.currentEnd' '.currentEndF0'\n"
"        endif\n"
"    endfor\n"
"\n"
"    # Replace PitchTier\n"
"    select PitchTier '.basename$'TMP\n"
"    plus Manipulation '.basename$'TMP\n"
"    Replace pitch tier\n"
"    select Manipulation '.basename$'TMP\n"
"    Get resynthesis (overlap-add)\n"
"    Rename... '.basename$'_normalizedPitch\n"
"    \n"
"    select Manipulation '.basename$'TMP\n"
"    plus PitchTier '.basename$'TMP\n"
"    plus PointProcess '.basePointsName$'\n"
"    plus Sound '.basename$'AR_TMP\n"
"    Remove\n"
"    \n"
"    select Sound '.basename$'_normalizedPitch\n"
"endproc\n"
"\n"
"# \n"
"# Replace variable periods with fixed pitch period on\n"
"# a declination. Use selected original\n"
"# Selected Sound\n"
"procedure equalize_pitch .pitchstart .pitchend\n"
"    .basename$ = selected$(\"Sound\")\n"
"    .basePointsName$ = .basename$+\"_Pulses\"\n"
"    call create_pulses_from_sound\n"
"    Rename... '.basePointsName$'\n"
"    select PointProcess '.basePointsName$'\n"
"    \n"
"    select Sound '.basename$'\n"
"    .duration = Get total duration\n"
"    To Manipulation... 0.005 50 350\n"
"    Rename... '.basename$'TMP\n"
"    plus PointProcess '.basePointsName$'\n"
"    Replace pulses\n"
"    select Manipulation '.basename$'TMP\n"
"    Extract pitch tier\n"
"    Rename... '.basename$'TMP\n"
"    \n"
"    Remove points between... 0 '.duration'\n"
"    Add point... 0 '.pitchstart'\n"
"    Add point... .duration '.pitchend'\n"
"    plus Manipulation '.basename$'TMP\n"
"    Replace pitch tier\n"
"    select Manipulation '.basename$'TMP\n"
"    Get resynthesis (overlap-add)\n"
"    Rename... '.basename$'_normalizedPitch\n"
"    \n"
"    select Manipulation '.basename$'TMP\n"
"    plus PitchTier '.basename$'TMP\n"
"    plus PointProcess '.basePointsName$'\n"
"    Remove\n"
"    \n"
"    select Sound '.basename$'_normalizedPitch\n"
"endproc\n"
"\n"
"#\n"
"# Resynthesize with equalized amplitude\n"
"# Add intensity accents where the textgrid has + in the Accents\n"
"# Selected Sound plus TextGrid\n"
"procedure resynthesize_equalized_amplitude .fluctuation\n"
"    .basename$ = selected$(\"Sound\")\n"
"    .textGridname$ = selected$(\"TextGrid\")\n"
"    \n"
"    select Sound '.basename$'\n"
"    Resample... 11000 50\n"
"    .downbasename$ = selected$(\"Sound\")\n"
"    .duration = Get total duration\n"
"    .sampleFreq = Get sampling frequency\n"
"    \n"
"    # LPC\n"
"    select Sound '.downbasename$'\n"
"    To LPC (autocorrelation)... 10 0.025 0.005 50\n"
"    Rename... '.basename$'_LPC\n"
"\n"
"    # LPC Source\n"
"    select Sound '.downbasename$'\n"
"	call extract_DiffLPC_source\n"
"	Rename... '.basename$'_DiffLPCSource\n"
"    call integrate_DiffLPC_source\n"
"    Rename... '.basename$'_LPCSource\n"
"    \n"
"    select Sound '.basename$'_LPCSource\n"
"  	call equalize_source '.fluctuation'\n"
"    Rename... '.basename$'_TMPintnormalized\n"
"    plus TextGrid '.textGridname$'\n"
"    call add_accent_intensity_source\n"
"    Rename... '.basename$'_TMPintaccented\n"
"    call differentiate_LPC_source 4500\n"
"    Rename... '.basename$'_TMPnormalized\n"
"    call zero_intervals '.basename$'_TMPnormalized '.textGridname$' 3 U\n"
"\n"
"    # Synthesize sound\n"
"    select Sound '.basename$'_TMPnormalized\n"
"	Scale intensity... 70\n"
"    plus LPC '.basename$'_LPC\n"
"    Filter... Yes\n"
"    Rename... '.basename$'_eqintensity\n"
"	Scale intensity... 70\n"
"   \n"
"    # Replace unvoiced parts\n"
"	call replace_samples '.basename$' '.basename$'_eqintensity '.textGridname$' 3 U\n"
"    \n"
"    # Clean up\n"
"    select Sound '.basename$'_TMPnormalized\n"
"    plus Sound '.downbasename$'\n"
"    plus Sound '.basename$'_DiffLPCSource\n"
"    plus Sound '.basename$'_LPCSource\n"
"    plus LPC '.basename$'_LPC\n"
"    plus Sound '.basename$'_TMPintnormalized\n"
"    plus Sound '.basename$'_TMPintaccented\n"
"    Remove\n"
"    \n"
"    select Sound '.basename$'_eqintensity\n"
"endproc\n"
"\n"
"#\n"
"# Resynthesize LPC Sound with new source\n"
"# Selected Sound plus TextGrid\n"
"procedure resynthesize_LPC_with_new_source\n"
"    .basename$ = selected$(\"Sound\")\n"
"    .textGridname$ = selected$(\"TextGrid\")\n"
"    \n"
"    select Sound '.basename$'\n"
"    Resample... 11000 50\n"
"    .downbasename$ = selected$(\"Sound\")\n"
"    .duration = Get total duration\n"
"    .sampleFreq = Get sampling frequency\n"
"    \n"
"    # LPC\n"
"    select Sound '.downbasename$'\n"
"    To LPC (autocorrelation)... 10 0.025 0.005 50\n"
"    Rename... '.basename$'_LPC\n"
"    \n"
"    # New source\n"
"    select Sound '.downbasename$'\n"
"    call synthesize_new_source\n"
"    Rename... '.basename$'_new_phonation\n"
"    De-emphasize (in-line)... 50\n"
"    call zero_intervals '.basename$'_new_phonation '.textGridname$' 3 U\n"
"\n"
"    # LPC resynthesis\n"
"    select LPC '.basename$'_LPC\n"
"    plus Sound '.basename$'_new_phonation\n"
"    Filter... yes\n"
"    Scale intensity... 70\n"
"    Rename... '.basename$'_LPCsynthphon\n"
"	call replace_samples '.downbasename$' '.basename$'_LPCsynthphon '.textGridname$' 3 U\n"
"    \n"
"    # Clean up\n"
"    select Sound '.basename$'_new_phonation\n"
"    plus LPC '.basename$'_LPC\n"
"    plus Sound '.downbasename$'\n"
"    Remove\n"
"    \n"
"    select Sound '.basename$'_LPCsynthphon\n"
"    \n"
"endproc\n"
"\n"
"# \n"
"# Create synthetic new source based on \n"
"# pulse marking estimates.\n"
"# Selected Sound\n"
"procedure synthesize_new_source\n"
"    .basename$ = selected$(\"Sound\")\n"
"    \n"
"    select Sound '.basename$'\n"
"    .duration = Get total duration\n"
"    .sampleFreq = Get sampling frequency\n"
"    \n"
"    # Get original source\n"
"    select Sound '.basename$'\n"
"	call extract_DiffLPC_source\n"
"	Rename... '.basename$'_DiffLPCSource\n"
"    \n"
"    # Intensity\n"
"	select Sound '.basename$'_DiffLPCSource\n"
"	call intensityTier_from_LPC_source\n"
"    Rename... TMPintensityTier\n"
"    Down to TableOfReal\n"
"    \n"
"    # Pulses\n"
"    select Sound '.basename$'\n"
"    call create_pulses_from_sound\n"
"    Rename... '.basename$'\n"
"    \n"
"    # Generate phonation\n"
"    select PointProcess '.basename$'\n"
"    To Sound (phonation)... '.sampleFreq' 1.0 0.05 0.7 0.03 3.0 4.0\n"
"    Rename... '.basename$'_new_phonation\n"
"    \n"
"    # Transfer intensity to new source\n"
"    select Sound '.basename$'_new_phonation\n"
"    Formula... self * 10^(IntensityTier_TMPintensityTier(x)/20)\n"
"    \n"
"    # Clean up\n"
"    select Sound '.basename$'_DiffLPCSource\n"
"    plus PointProcess '.basename$'\n"
"    plus IntensityTier TMPintensityTier\n"
"    plus TableOfReal TMPintensityTier\n"
"    Remove\n"
"    \n"
"    select Sound '.basename$'_new_phonation\n"
"endproc\n"
"\n"
"#\n"
"# Simple two way analysis-resynthesis\n"
"# Replace unvoiced parts with original\n"
"# Selected: Sound and TextGrid\n"
"procedure LPC_analysis_resynthesis\n"
"    .basename$ = selected$(\"Sound\")\n"
"    .textGridname$ = selected$(\"TextGrid\")\n"
"    \n"
"    select Sound '.basename$'\n"
"    Resample... 11000 50\n"
"    .downbasename$ = selected$(\"Sound\")\n"
"    .duration = Get total duration\n"
"    .sampleFreq = Get sampling frequency\n"
"    \n"
"    \n"
"    # LPC\n"
"    select Sound '.downbasename$'\n"
"    To LPC (autocorrelation)... 10 0.025 0.005 50\n"
"    Rename... '.basename$'_LPC\n"
"    \n"
"    # Extract source\n"
"    select Sound '.downbasename$'\n"
"	call extract_DiffLPC_source\n"
"	Rename... '.basename$'_DiffLPCSource\n"
"	call integrate_DiffLPC_source\n"
"    Rename... '.basename$'_LPCSource\n"
"\n"
"    # Diff source again\n"
"    select Sound '.basename$'_LPCSource\n"
"    call differentiate_LPC_source 4000\n"
"    Rename... '.basename$'_DiffIntDiffLPCSource\n"
"    \n"
"    # Resynthesize\n"
"    select Sound '.basename$'_DiffIntDiffLPCSource\n"
"    plus LPC '.basename$'_LPC\n"
"    Filter... Yes\n"
"    Rename... '.basename$'_AnalResyn\n"
"    Scale intensity... 70\n"
"    call replace_samples '.downbasename$' '.basename$'_AnalResyn '.textGridname$' 3 US\n"
"\n"
"    # Clean up\n"
"    select Sound '.basename$'_DiffIntDiffLPCSource\n"
"    plus Sound '.basename$'_DiffLPCSource\n"
"    plus Sound '.basename$'_LPCSource\n"
"    plus Sound '.downbasename$'\n"
"    plus LPC '.basename$'_LPC\n"
"    Remove\n"
"    \n"
"    # Ready\n"
"    select Sound '.basename$'_AnalResyn\n"
"endproc\n"
"\n"
"#\n"
"# Equalize source amplitude\n"
"# Read LPC source, determine intensity and create a\n"
"# version with a given standard deviation in the intensity\n"
"# .newSD = Requested Standard Deviation in dB\n"
"# If .newSD = 0, the source is equalized as much as possible.\n"
"# Selected Sound\n"
"procedure equalize_source .newSD\n"
"    .basename$ = selected$(\"Sound\")\n"
"	 .duration = Get total duration\n"
"    Copy... '.basename$'_normalized\n"
"	call intensityTier_from_LPC_source\n"
"    Rename... TMPintensityTier\n"
"    Down to TableOfReal\n"
"    .oldMean = Get column mean (index)... 2\n"
"    .oldSD = Get column stdev (index)... 2\n"
"    .multFactor = -1\n"
"    if .oldSD > 0\n"
"        .multFactor = (.newSD - .oldSD)/.oldSD\n"
"    endif\n"
"    select IntensityTier TMPintensityTier\n"
"    Formula... .oldMean + (self - .oldMean) * .multFactor\n"
"    select Sound '.basename$'_normalized\n"
"    Formula... self * 10^((IntensityTier_TMPintensityTier(x) - .oldMean)/20)\n"
"    .numSamples = Get number of samples\n"
"    Set value at sample number... Both 1 0\n"
"    Set value at sample number... Both '.numSamples' 0\n"
"    Scale intensity... 70\n"
"    # Clean up\n"
"    select IntensityTier TMPintensityTier\n"
"    plus TableOfReal TMPintensityTier\n"
"    Remove\n"
"    \n"
"    select Sound '.basename$'_normalized\n"
"endproc\n"
"\n"
"#\n"
"# Superimpose accent stress on Intensity \n"
"# Selected Sound plus TextGrid\n"
"procedure add_accent_intensity_source\n"
"    .basename$ = selected$(\"Sound\")\n"
"    .textGridname$ = selected$(\"TextGrid\")\n"
"    select Sound '.basename$'\n"
"    .duration = Get total duration\n"
"\n"
"    select TextGrid '.textGridname$'\n"
"    call accents_tier_number\n"
"    .accTier = accents_tier_number.accTier\n"
"    .numAccIntervals = Get number of intervals... '.accTier'\n"
"    \n"
"    Create IntensityTier... '.basename$'TMP 0.0 '.duration'\n"
"    \n"
"    .startI = 70\n"
"    .endI = 68\n"
"    Add point... 0 '.startI'\n"
"    Add point... .duration '.endI'\n"
"    for .i to .numAccIntervals\n"
"        select TextGrid '.textGridname$'\n"
"        .currentAcc$ = Get label of interval... '.accTier' '.i'\n"
"        # Add accent movement\n"
"        if .currentAcc$ = \"+\"\n"
"            .currentStart = Get start point... '.accTier' '.i'\n"
"            .currentEnd = Get end point... '.accTier' '.i'\n"
"            .currentThird = .currentStart + (.currentEnd - .currentStart)/3\n"
"            select IntensityTier '.basename$'TMP\n"
"            .currentStartI = .startI + ((.endI - .startI)/.duration)*.currentStart\n"
"            .currentEndI = .startI + ((.endI - .startI)/.duration)*.currentEnd\n"
"            .currentThirdI = .startI + ((.endI - .startI)/.duration)*.currentThird\n"
"            # Add 2 semitones\n"
"            .currentThirdI += 3\n"
"            Add point... '.currentStart' '.currentStartI'\n"
"            Add point... '.currentThird' '.currentThirdI'\n"
"            Add point... '.currentEnd' '.currentEndI'\n"
"        endif\n"
"    endfor\n"
"    select Sound '.basename$'\n"
"    plus IntensityTier '.basename$'TMP\n"
"    Multiply... yes\n"
"    Rename... '.basename$'_accentedI\n"
"\n"
"    select IntensityTier '.basename$'TMP\n"
"    Remove\n"
"    \n"
"    select Sound '.basename$'_accentedI\n"
"endproc\n"
"\n"
"# \n"
"# Take selected LPC source and construct an intensity tier\n"
"# Selected Sound\n"
"procedure intensityTier_from_LPC_source\n"
"    .basename$ = selected$(\"Sound\")\n"
"	   To Intensity... 40 0 yes\n"
"	   .energy = Get mean: 0, 0, \"energy\"\n"
"	   .sones = Get mean: 0, 0, \"sones\"\n"
"	   .dB = Get mean: 0, 0, \"dB\"\n"
"	   Down to IntensityTier\n"
"    select Intensity '.basename$'\n"
"    Remove\n"
"    select IntensityTier '.basename$'\n"
"endproc\n"
"\n"
"# \n"
"# Convert a flow based source into a differentiated source\n"
"# Set intensity to 70dB. \n"
"# Low-pass filter at .cutoffFreq\n"
"# Selected Sound\n"
"procedure differentiate_LPC_source .cutoffFreq\n"
"    .basename$ = selected$(\"Sound\")\n"
"    Filter (pass Hann band)... 4 '.cutoffFreq' 1\n"
"    Rename... '.basename$'_Integrated\n"
"\n"
"    Formula... if col < ncol then self[col+1]-self[col] else 0 fi\n"
"    \n"
"    Scale intensity... 70\n"
"endproc\n"
"\n"
"# \n"
"# Get pulses from double integrated original wave file\n"
"# Selected Sound\n"
"procedure create_pulses_from_sound\n"
"    .basename$ = selected$(\"Sound\")\n"
"	# Create pointprocess on zeros of the integrated original\n"
"	select Sound '.basename$'\n"
"    call differentiate_LPC_source 4000\n"
"    Rename... FirstDiffOrig\n"
"    \n"
"    call integrate_DiffLPC_source\n"
"    Rename... FirstIntOrig\n"
"    call integrate_DiffLPC_source\n"
"    Rename... SecondIntOrig\n"
"    \n"
"    # Get PointProcess\n"
"	call create_pointprocess_from_LPCsource\n"
"    Rename... '.basename$'\n"
"    \n"
"    # Clean up\n"
"    select Sound FirstDiffOrig\n"
"    plus Sound FirstIntOrig\n"
"    plus Sound SecondIntOrig\n"
"    Remove\n"
"    \n"
"    select PointProcess '.basename$'\n"
"endproc\n"
"\n"
"#\n"
"# Convert an differentiated LPC source into a flow based source\n"
"# De-emphasize and integrate all samples, set intensity to 70 dB\n"
"# Selected Sound\n"
"procedure integrate_DiffLPC_source\n"
"    .basename$ = selected$(\"Sound\")\n"
"    Copy... '.basename$'_SourceInt\n"
"    De-emphasize (in-line)... 50\n"
"    Subtract mean\n"
"    Formula... self+self[col-1]\n"
"    Subtract mean\n"
"    Filter (pass Hann band)... 40 5500 1\n"
"    Subtract mean\n"
"    Rename... '.basename$'_LPCSource\n"
"    \n"
"    select Sound '.basename$'_SourceInt\n"
"    Remove\n"
"    \n"
"    select Sound '.basename$'_LPCSource\n"
"	Scale intensity... 70\n"
"endproc\n"
"\n"
"#\n"
"# Extract an LPC filter \n"
"# Selected Sound\n"
"lpcsourcelib.analysis_type = 2\n"
"procedure extract_LPC_filter\n"
"	if lpcsourcelib.analysis_type = undefined\n"
"		lpcsourcelib.analysis_type = 1\n"
"	endif\n"
"	\n"
"    .basename$ = selected$(\"Sound\")\n"
"    Resample... 11000 50\n"
"    .tmp = Rename... '.basename$'_DownSampled\n"
"    if lpcsourcelib.analysis_type = 2\n"
"		noprogress To LPC (covariance): 10, 0.025, 0.005, 50\n"
"    elsif lpcsourcelib.analysis_type = 3\n"
"		noprogress To LPC (burg): 10, 0.025, 0.005, 50\n"
"    elsif lpcsourcelib.analysis_type = 4\n"
"		noprogress To LPC (marple): 10, 0.025, 0.005, 50, 1e-6, 1e-6\n"
"	else # lpcsourcelib.analysis_type = 1 and others\n"
"		noprogress To LPC (autocorrelation): 10, 0.025, 0.005, 50\n"
"	endif\n"
"    Rename... '.basename$'_LPC\n"
"    \n"
"    select .tmp\n"
"    Remove\n"
"    \n"
"    select LPC '.basename$'_LPC\n"
"endproc\n"
"\n"
"#\n"
"# Extract an LPC source based on the inverse filtering of\n"
"# the selected Sound with its LPC\n"
"# Selected Sound\n"
"procedure extract_DiffLPC_source\n"
" 	if lpcsourcelib.analysis_type = undefined\n"
"		lpcsourcelib.analysis_type = 1\n"
"	endif\n"
"	\n"
"   .basename$ = selected$(\"Sound\")\n"
"    Resample... 11000 50\n"
"    Rename... '.basename$'_DownSampled\n"
"    if lpcsourcelib.analysis_type = 2\n"
"		noprogress To LPC (covariance): 10, 0.025, 0.005, 50\n"
"    elsif lpcsourcelib.analysis_type = 3\n"
"		noprogress To LPC (burg): 10, 0.025, 0.005, 50\n"
"    elsif lpcsourcelib.analysis_type = 4\n"
"		noprogress To LPC (marple): 10, 0.025, 0.005, 50, 1e-6, 1e-6\n"
"	else # lpcsourcelib.analysis_type = 1 and others\n"
"		noprogress To LPC (autocorrelation): 10, 0.025, 0.005, 50\n"
"	endif\n"
"    Rename... '.basename$'_LPC\n"
"    select Sound '.basename$'_DownSampled\n"
"    plus LPC '.basename$'_LPC\n"
"    Filter (inverse)\n"
"	Scale intensity... 70\n"
"    Rename... '.basename$'_DiffLPCSource\n"
"    \n"
"    select Sound '.basename$'_DownSampled\n"
"    plus LPC '.basename$'_LPC\n"
"    Remove\n"
"    \n"
"    select Sound '.basename$'_DiffLPCSource\n"
"endproc\n"
"\n"
"# \n"
"# LPC source to Pointprocess\n"
"# Selected Sound\n"
"procedure create_pointprocess_from_LPCsource\n"
"    .basename$ = selected$(\"Sound\")\n"
"	# Create pointprocess on zeros of the LPC source\n"
"	select Sound '.basename$'\n"
"	To PointProcess (zeroes)... Left yes no\n"
"endproc\n"
"\n"
"#\n"
"# Zero out intervals\n"
"procedure zero_intervals .sound$ .textgrid$ .tier .label$\n"
"    select TextGrid '.textgrid$'\n"
"    .numIntervals = Get number of intervals... '.tier'\n"
"    for .i to .numIntervals\n"
"        select TextGrid '.textgrid$'\n"
"        .currentLabel$ = Get label of interval... '.tier' '.i'\n"
"        if .currentLabel$ = .label$\n"
"            .start = Get start point... '.tier' '.i'\n"
"            .end = Get end point... '.tier' '.i'\n"
"            .midpoint = (.start + .end)/2\n"
"            select Sound '.sound$'\n"
"            .etime = 0.001\n"
"            # Zero out intervals\n"
"            # Fade in\n"
"            Formula... if x >= .start and x <= .midpoint then self * exp(-(x-.start)/.etime) else self fi\n"
"            # Fade out\n"
"            Formula... if x < .end and x >= .midpoint    then self * exp(-(.end - x)/.etime) else self fi\n"
"        endif\n"
"    endfor\n"
"endproc\n"
"\n"
"# \n"
"# Copy samples from sound1 to sound2, using the textgrid\n"
"# Use the intervals with \"label\" on tier \"tier\"\n"
"procedure replace_samples .sound1$ .sound2$ .textgrid$ .tier .label$\n"
"    select TextGrid '.textgrid$'\n"
"    .numIntervals = Get number of intervals... '.tier'\n"
"    for .i to .numIntervals\n"
"        select TextGrid '.textgrid$'\n"
"        .currentLabel$ = Get label of interval... '.tier' '.i'\n"
"        if .currentLabel$ = .label$\n"
"            .start = Get start point... '.tier' '.i'\n"
"            .end = Get end point... '.tier' '.i'\n"
"            .midpoint = (.start + .end)/2\n"
"            select Sound '.sound2$'\n"
"            .etime = 0.005\n"
"            Formula... if x >= .start and x < .midpoint then self * exp(-(x-.start)/.etime) + Sound_'.sound1$'(x)*(1-exp(-(x-.start)/.etime)) else self fi\n"
"            Formula... if x < .end and x >= .midpoint   then self * exp(-(.end - x)/.etime) + Sound_'.sound1$'(x)*(1-exp(-(.end - x)/.etime)) else self fi\n"
"        endif\n"
"    endfor\n"
"endproc\n"
"\n"
"# \n"
"# Add a '+' in the Accents tier for every stressed position\n"
"# Selected TextGrid\n"
"procedure stress_voiced_stretches .wordTier .word$ .vuvTier .accTier .accPosition\n"
"    .basename$ = selected$(\"TextGrid\")\n"
"    .numWords = Get number of intervals... '.wordTier'\n"
"    .numVUV = Get number of intervals... '.vuvTier'\n"
"    for .word to .numWords\n"
"        .currentWord$ = Get label of interval... '.wordTier' '.word'\n"
"        if .currentWord$ = .word$\n"
"            .currentStart = Get start point... '.wordTier' '.word'\n"
"            .i = 0\n"
"            repeat\n"
"                .i += 1\n"
"                .currentvuvStart = Get start point... '.vuvTier' '.i'\n"
"            until .currentvuvStart >= .currentStart or .i >= .numVUV\n"
"            .i -= 1\n"
"            repeat\n"
"                .i += 1\n"
"                .currentVoicing$ = Get label of interval... '.vuvTier' '.i'\n"
"                if .currentVoicing$ = \"V\"\n"
"                    .accPosition -= 1\n"
"                    if .accPosition = 0\n"
"                        Set interval text... '.accTier' '.i' +\n"
"                    endif\n"
"                endif\n"
"            until .accPosition <= 0 or .i >= .numVUV\n"
"        endif\n"
"    endfor\n"
"    select TextGrid '.basename$'\n"
"endproc\n"
"\n"
"# \n"
"# Add an Accents tier with given default value\n"
"# Selected TextGrid\n"
"procedure add_accent_tier .default$\n"
"    .basename$ = selected$(\"TextGrid\")\n"
"    .numTiers = Get number of tiers\n"
"    .wordsTier = 2\n"
"    .vuvTier = 3\n"
"    for .i to .numTiers\n"
"        .currentName$ = Get tier name... '.i'\n"
"        if .currentName$ = \"Words\"\n"
"            .wordsTier = .i\n"
"        elsif .currentName$ = \"VUV\"\n"
"            .vuvTier = .i\n"
"        endif\n"
"    endfor\n"
"    .newTier = .vuvTier + 1\n"
"    Duplicate tier... '.vuvTier' '.newTier' Accents\n"
"    .numIntervals = Get number of intervals... '.newTier'\n"
"    for .i to .numIntervals\n"
"        Set interval text... '.newTier' '.i' '.default$'\n"
"    endfor\n"
"    .accTier = .newTier\n"
"    \n"
"    select TextGrid '.basename$'\n"
"endproc\n"
"\n"
"# \n"
"# Get the number of the Accents tier, if any\n"
"# Read out with accents_tier_number.accTier\n"
"# Zero of there is no Accents tier\n"
"# Selected TextGrid\n"
"procedure accents_tier_number\n"
"    .basename$ = selected$(\"TextGrid\")\n"
"    .numTiers = Get number of tiers\n"
"    .accTier = 0\n"
"    for .i to .numTiers\n"
"        .currentName$ = Get tier name... '.i'\n"
"        if .currentName$ = \"Accents\"\n"
"            .accTier = .i\n"
"        endif\n"
"    endfor\n"
"    \n"
"    select TextGrid '.basename$'\n"
"endproc\n"
"\n"
"###########################################################################\n"
"#                                                                         #\n"
"#  Praat Script Syllable Nuclei                                           #\n"
"#  Copyright (C) 2008  Nivja de Jong and Ton Wempe                        #\n"
"#                                                                         #\n"
"#    This program is free software: you can redistribute it and/or modify #\n"
"#    it under the terms of the GNU General Public License as published by #\n"
"#    the Free Software Foundation, either version 3 of the License, or    #\n"
"#    (at your option) any later version.                                  #\n"
"#                                                                         #\n"
"#    This program is distributed in the hope that it will be useful,      #\n"
"#    but WITHOUT ANY WARRANTY; without even the implied warranty of       #\n"
"#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        #\n"
"#    GNU General Public License for more details.                         #\n"
"#                                                                         #\n"
"#    You should have received a copy of the GNU General Public License    #\n"
"#    along with this program.  If not, see http://www.gnu.org/licenses/   #\n"
"#                                                                         #\n"
"###########################################################################\n"
"#\n"
"# modified 2010.09.17 by Hugo Quené, Ingrid Persoon, & Nivja de Jong\n"
"# Overview of changes:\n"
"# + change threshold-calculator: rather than using median, use the almost maximum\n"
"#     minus 25dB. (25 dB is in line with the standard setting to detect silence\n"
"#     in the \"To TextGrid (silences)\" function.\n"
"#     Almost maximum (.99 quantile) is used rather than maximum to avoid using\n"
"#     irrelevant non-speech sound-bursts.\n"
"# + add silence-information to calculate articulation rate and ASD (average syllable\n"
"#     duration.\n"
"#     NB: speech rate = number of syllables / total time\n"
"#         articulation rate = number of syllables / phonation time\n"
"# + remove max number of syllable nuclei\n"
"# + refer to objects by unique identifier, not by name\n"
"# + keep track of all created intermediate objects, select these explicitly,\n"
"#     then Remove\n"
"# + provide summary output in Info window\n"
"# + do not save TextGrid-file but leave it in Object-window for inspection\n"
"#     (if requested in startup-form)\n"
"# + allow Sound to have starting time different from zero\n"
"#      for Sound objects created with Extract (preserve times)\n"
"# + programming of checking loop for mindip adjusted\n"
"#      in the orig version, precedingtime was not modified if the peak was rejected !!\n"
"#      var precedingtime and precedingint renamed to .currenttime and .currentint\n"
"#\n"
"# + bug fixed concerning summing total pause, feb 28th 2011\n"
"#\n"
"# modified 2014.10.24 by Rob van Son\n"
"# Overview of changes:\n"
"# + Converted to a function form. Can be called as -\n"
"# call syllable_nuclei -25 2 0.3 1 .soundFile\n"
"#   where .soundFile is the ID of an open soundfile\n"
"# + Added noprogress and cleaned up object id assignment\n"
"# \n"
"###########################################################################\n"
"\n"
"# counts syllables of sound utterances\n"
"# NB unstressed syllables are sometimes overlooked\n"
"# NB filter sounds that are quite noisy beforehand\n"
"# NB use Silence threshold (dB) = -25 (or -20?)\n"
"# NB use Minimum .dip between peaks (dB) = between 2-4 (you can first try;\n"
"#                                                      For clean and filtered: 4)\n"
"# syllable_nuclei.soundname$	- Name of sound object\n"
"# syllable_nuclei.voicedcount	- Count of vocied segments\n"
"# syllable_nuclei.npause		- Count of pauses\n"
"# syllable_nuclei.originaldur	- Original duration\n"
"# syllable_nuclei.speakingtot	- Duration of speech\n"
"# syllable_nuclei.speakingrate	- Syllable per second, gross\n"
"# syllable_nuclei.articulationrate - Syllables per speaking time\n"
"# syllable_nuclei.asd			- Average syllable duration\n"
"# \n"
"# Arguments\n"
"# real .silence_threshold -25 (dB)\n"
"# real .minimum_dip_between_peaks 2 (dB)\n"
"# real .minimum_pause_duration 0.3 (s)\n"
"# boolean .keep_Soundfiles_and_Textgrids 1\n"
"# fileID .soundFile\n"
"#\n"
"# Example \n"
"# call syllable_nuclei -25 2 0.3 1 .originalRecording\n"
"\n"
"procedure syllable_nuclei .silence_threshold .minimum_dip_between_peaks .minimum_pause_duration .keep_Soundfiles_and_Textgrids .soundid\n"
"\n"
"	# Get object name\n"
"	select .soundid\n"
"	.soundname$ = selected$(\"Sound\")\n"
"\n"
"	# shorten variables\n"
"	.silencedb = .silence_threshold\n"
"	.mindip = .minimum_dip_between_peaks\n"
"	.showtext = .keep_Soundfiles_and_Textgrids\n"
"	.minpause = .minimum_pause_duration\n"
"\n"
"	.originaldur = Get total duration\n"
"	# allow non-zero starting time\n"
"	.bt = Get starting time\n"
"\n"
"	# Use intensity to get .threshold\n"
"	.intid = noprogress To Intensity... 50 0 yes\n"
"	.start = Get time from frame number... 1\n"
"	.nframes = Get number of frames\n"
"	.end = Get time from frame number... '.nframes'\n"
"\n"
"	# estimate noise floor\n"
"	select .intid\n"
"	.minint = Get minimum... 0 0 Parabolic\n"
"	# estimate noise max\n"
"	.maxint = Get maximum... 0 0 Parabolic\n"
"	#get .99 quantile to get maximum (without influence of non-speech sound bursts)\n"
"	.max99int = Get quantile... 0 0 0.99\n"
"\n"
"	# estimate Intensity .threshold\n"
"	.threshold = .max99int + .silencedb\n"
"	.threshold2 = .maxint - .max99int\n"
"	.threshold3 = .silencedb - .threshold2\n"
"	if .threshold < .minint\n"
"	    .threshold = .minint\n"
"	endif\n"
"\n"
"	# get pauses (silences) and speakingtime\n"
"	select .soundid\n"
"	.textgridid = noprogress To TextGrid (silences)... 80 0 '.threshold3' '.minpause' 0.1 silent sounding\n"
"	.silencetierid = Extract tier... 1\n"
"	.silencetableid = Down to TableOfReal... sounding\n"
"	nsounding = Get number of rows\n"
"	.npauses = 'nsounding'\n"
"	.speakingtot = 0\n"
"	for ipause from 1 to .npauses\n"
"	   beginsound = Get value... 'ipause' 1\n"
"	   endsound = Get value... 'ipause' 2\n"
"	   speakingdur = 'endsound' - 'beginsound'\n"
"	   .speakingtot = 'speakingdur' + '.speakingtot'\n"
"	endfor\n"
"\n"
"	select '.intid'\n"
"	Down to Matrix\n"
"	.matid = selected(\"Matrix\")\n"
"	# Convert intensity to sound\n"
"	.sndintid = noprogress To Sound (slice)... 1\n"
"\n"
"	# use total duration, not .end time, to find out duration of .intdur\n"
"	# in order to allow nonzero starting times.\n"
"	.intdur = Get total duration\n"
"	intmax = Get maximum... 0 0 Parabolic\n"
"\n"
"	# estimate peak positions (all peaks)\n"
"	.ppid = noprogress To PointProcess (extrema)... Left yes no Sinc70\n"
"\n"
"	numpeaks = Get number of points\n"
"\n"
"	# fill array with time points\n"
"	for .i from 1 to numpeaks\n"
"	    t'.i' = Get time from index... '.i'\n"
"	endfor\n"
"\n"
"\n"
"	# fill array with intensity values\n"
"	select '.sndintid'\n"
"	.peakcount = 0\n"
"	for .i from 1 to numpeaks\n"
"	    value = Get value at time... t'.i' Cubic\n"
"	    if value > .threshold\n"
"	          .peakcount += 1\n"
"	          int'.peakcount' = value\n"
"	          .timepeaks'.peakcount' = t'.i'\n"
"	    endif\n"
"	endfor\n"
"\n"
"\n"
"	# fill array with valid peaks: only intensity values if preceding\n"
"	# .dip in intensity is greater than .mindip\n"
"	select '.intid'\n"
"	.validpeakcount = 0\n"
"	.currenttime = .timepeaks1\n"
"	.currentint = int1\n"
"\n"
"	for .p to .peakcount-1\n"
"	   .following = .p + 1\n"
"	   .followingtime = .timepeaks'.following'\n"
"	   .dip = Get minimum... '.currenttime' '.followingtime' None\n"
"	   .diffint = abs(.currentint - .dip)\n"
"\n"
"	   if .diffint > .mindip\n"
"	      .validpeakcount += 1\n"
"	      validtime'.validpeakcount' = .timepeaks'.p'\n"
"	   endif\n"
"	      .currenttime = .timepeaks'.following'\n"
"	      .currentint = Get value at time... .timepeaks'.following' Cubic\n"
"	endfor\n"
"\n"
"\n"
"	# Look for only voiced parts\n"
"	select '.soundid'\n"
"	.pitchid = noprogress To Pitch (ac)... 0.02 30 4 no 0.03 0.25 0.01 0.35 0.25 450\n"
"\n"
"	.voicedcount = 0\n"
"	for .i from 1 to .validpeakcount\n"
"	   .querytime = validtime'.i'\n"
"\n"
"	   select '.textgridid'\n"
"	   .whichinterval = Get interval at time... 1 '.querytime'\n"
"	   .whichlabel$ = Get label of interval... 1 '.whichinterval'\n"
"\n"
"	   select '.pitchid'\n"
"	   value = Get value at time... '.querytime' Hertz Linear\n"
"\n"
"	   if value <> undefined\n"
"	      if .whichlabel$ = \"sounding\"\n"
"	          .voicedcount = .voicedcount + 1\n"
"	          voicedpeak'.voicedcount' = validtime'.i'\n"
"	      endif\n"
"	   endif\n"
"	endfor\n"
"\n"
"	# calculate time correction due to shift in time for Sound object versus\n"
"	# intensity object\n"
"	.timecorrection = .originaldur/.intdur\n"
"\n"
"	# Insert voiced peaks in TextGrid\n"
"	if .showtext > 0\n"
"	   select '.textgridid'\n"
"	   Insert point tier... 1 syllables\n"
"	  \n"
"	   for .i from 1 to .voicedcount\n"
"	       position = voicedpeak'.i' * .timecorrection\n"
"	       Insert point... 1 position '.i'\n"
"	   endfor\n"
"	endif\n"
"\n"
"	# clean up before next sound file is opened\n"
"	select .intid\n"
"	plus .matid\n"
"	plus .sndintid\n"
"	plus .ppid\n"
"	plus .pitchid\n"
"	plus .silencetierid\n"
"	plus .silencetableid\n"
"	plus .textgridid\n"
"	Remove\n"
"	if .showtext < 1\n"
"	   select '.soundid'\n"
"	   plus '.textgridid'\n"
"	   Remove\n"
"	endif\n"
"\n"
"	# summarize results in Info window\n"
"	.speakingrate = '.voicedcount'/'.originaldur'\n"
"	.articulationrate = '.voicedcount'/'.speakingtot'\n"
"	.npause = '.npauses'-1\n"
"	.asd = '.speakingtot'/'.voicedcount'\n"
"endproc\n"
"\n"
"procedure zero_crossing_rate .soundfile .start .end\n"
"	select .soundfile\n"
"	.tmp = Extract part: .start, .end, \"rectangular\", 1, \"no\"\n"
"	.duration = Get total duration\n"
"	.tmpPoint = noprogress To PointProcess (zeroes): 1, \"yes\", \"yes\"\n"
"	.zero_crossings = Get number of points\n"
"	.zc_rate = -1\n"
"	if .duration > 0\n"
"		.zc_rate = .zero_crossings / .duration\n"
"	endif\n"
"	\n"
"	select .tmp\n"
"	plus .tmpPoint\n"
"	Remove\n"
"endproc\n"
"\n"
"procedure voicing_detector .soundfile\n"
"	select .soundfile\n"
"	.tmp = noprogress To Harmonicity (cc): 0.01, 75, 0.1, 1\n"
"	.tmpMatrix = To Matrix\n"
"	.tmpIntensity = To Intensity\n"
"	.voicing = To TextGrid (silences): -40, 0.01, 0.01, \"U\", \"V\"\n"
"\n"
"	select .tmp\n"
"	plus .tmpMatrix\n"
"	plus .tmpIntensity\n"
"	Remove\n"
"endproc\n"
"\n"
"# Set up system and load preferences\n"
"#\n"
"# TEVA 1.1\n"
"# \n"
"# Intializing Praat script\n"
"#\n"
"#     TEVA: Initialize.praat defines and sets the global variables\n"
"#     and loads general application specific code \n"
"#     \n"
"#     Copyright (C) 2010-2012  R.J.J.H. van Son and the Netherlands Cancer Institute\n"
"# \n"
"#     This program is free software; you can redistribute it and/or modify\n"
"#     it under the terms of the GNU General Public License as published by\n"
"#     the Free Software Foundation; either version 2 of the License, or\n"
"#     (at your option) any later version.\n"
"# \n"
"#     This program is distributed in the hope that it will be useful,\n"
"#     but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"#     GNU General Public License for more details.\n"
"# \n"
"#     You should have received a copy of the GNU General Public License\n"
"#     along with this program; if not, write to the Free Software\n"
"#     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA\n"
"# \n"
"\n"
"procedure global_initialization\n"
"	# Information for logging\n"
"	currentDate$ = date$()\n"
"	dateYear$ = right$(currentDate$, length(currentDate$) - rindex(currentDate$, \" \"))\n"
"	call getTimeStamp\n"
"	logtimeStamp$ = getTimeStamp.string$\n"
"	config.currentLogDirectory$ = \"\"\n"
"	\n"
"	# Define canvas\n"
"	viewportMargin = 5\n"
"	feedbackYL = 13\n"
"	feedbackXL = 0\n"
"	feedbackXR = 80\n"
"	feedbackYL = 13\n"
"	feedbackYH = 20\n"
"	wipeFeedbackArea$ = \"demo Paint rectangle... White 'feedbackXL' 'feedbackXR' 'feedbackYL' 'feedbackYH'\"\n"
"	# Note: These are relative to the INNER viewport\n"
"	headerXL = 5\n"
"	headerXR = 85\n"
"	headerYL = 95\n"
"	headerYH = 100\n"
"	wipeHeaderArea$ = \"demo Paint rectangle... White 'headerXL' 'headerXR' 'headerYL' 'headerYH'\"\n"
"	\n"
"	canvasXL = 5\n"
"	canvasXR = 85\n"
"	canvasYL = 25\n"
"	canvasYH = 95\n"
"	canvasLeftCorrection = 0.5\n"
"	canvasRightCorrection = -1.5\n"
"	wipeCanvasArea$ = \"demo Paint rectangle... White 'canvasXL' 'canvasXR' 'canvasYL' 'canvasYH'\"\n"
"	wipePlotArea$ = \"demo Paint rectangle... White -5 'canvasXR' 'feedbackYL' 'headerYH'\"\n"
"\n"
"	# Pop-Up window and other colors\n"
"	popUp.bordercolor$ = \"{0.5,0.5,1}\"\n"
"	popUp.backgroundcolor$ = \"{0.9,0.9,1}\"\n"
"	\n"
"	# Voicing markers\n"
"	te.voicingcolor$ = \"{0.3, 0.3, 0.9}\"\n"
"	\n"
"	# (Re-)Initialize parameters\n"
"	runningCommandMode = 0\n"
"	alertText$ = \"\"\n"
"	buttonsFilePath$ = \"Data/MainPage.Table\"\n"
"	buttonsLangFilePath$ = left$(buttonsFilePath$, rindex(buttonsFilePath$, \".Table\")-1)\n"
"	configFilePath$ = \"Data/Config.Table\"\n"
"	configLangFilePath$ = left$(configFilePath$, rindex(configFilePath$, \".Table\")-1)\n"
"	feedbackFilePath$ = \"Data/Feedback_\"\n"
"	instructionTable$ = \"Instruction\"\n"
"	te.buttons$ = \"\"\n"
"	te.config$ = \"\"\n"
"	config.input$ = \"Microphone\"\n"
"	config.showBackground = 0\n"
"	config.recordingTime$ = \"4\"\n"
"	config.speakerData$ = \"\"\n"
"	config.speakerDataBackup$ = \"\"\n"
"	config.createBackup = 0\n"
"	config.speakerDataTable = -1\n"
"	if te.recordingMode\n"
"		config.speakerSerial$ = \"Forw\"\n"
"	else\n"
"		config.speakerSerial$ = \"None\"\n"
"	endif\n"
"	config.localInitializationFile$ = \"TEVAinit.tsv\"\n"
"	config.saveAll = 0\n"
"	config.autoSelect = 0\n"
"	config.calcGNE = 0\n"
"	te.calcLowHighHNR = 0\n"
"	config.showFormants = 0\n"
"	config.muteOutput = 0\n"
"	config.selectionWindow = 2.0\n"
"	config.ratingForm$ = \"Vowel\"\n"
"	config.vasScaleTicks = 0\n"
"	#config.pitchalgorithm$ = \"VanAs\"\n"
"	config.pitchalgorithm$ = \"CC300\"\n"
"	config.source$ = \"Original\"\n"
"	config.sourceFile$ = \"\"\n"
"	# config.useCache\n"
"	# Use a hidden cach directory to store results of lengthy analysis\n"
"	# config.useCache > 0 : Enforce a cache\n"
"	# config.useCache = 0 : Use cache if present\n"
"	# config.useCache < 0 : Never use a cache\n"
"	config.useCache = 0\n"
"	localCacheDir$ = \".tevaCache\"\n"
"	\n"
"	#\n"
"	# root directory for automatic runs (experiments)\n"
"	# the root directory always ends with a /\n"
"	config.rootDirectory$ = shellDirectory$\n"
"	# On macs, use the Volume \"TEVAEXP\" (case sensitive)\n"
"	if macintosh\n"
"		config.rootDirectory$ = \"/Volumes/TEVAEXP/\"\n"
"	endif\n"
"	# Set to 1 to clean GUI interface\n"
"	config.ratingExperiment = 0\n"
"	config.randomizeSpeakerData = 0\n"
"	\n"
"	pathologicalType = 0\n"
"	pathologicalTypeText$ = \"- Pathological type = 'pathologicalType'\"\n"
"	predictedPathType = 0\n"
"	# Table for CART\n"
"	pathologicalParameters = Create TableOfReal... PathParam 1 1\n"
"	Set row label (index)... 1 AST\n"
"	Set value... 1 1 -1\n"
"	pathologicalAutoType = Create TableOfReal... PathAutoType 1 1\n"
"	Set row label (index)... 1 Median\n"
"	Set value... 1 1 -1\n"
"	\n"
"	# What signal to draw\n"
"	mainPage.draw$ = \"Sound\"\n"
"	pitchName$ = \"\"\n"
"	pitchTierName$ = \"\"\n"
"	ltasName$ = \"\"\n"
"	intensityName$ = \"\"\n"
"	spectrogramName$ = \"\"\n"
"	harmonicityName$ = \"\"\n"
"	gneName$ = \"\"\n"
"	pointProcessName$ = \"\"\n"
"	te.voicingTextGrid = -1\n"
"	\n"
"	# Global time\n"
"	currentStartTime = 0\n"
"	currentEndTime = 0\n"
"	selectedStartTime = currentStartTime\n"
"	selectedEndTime = currentEndTime\n"
"	minPitch = 0\n"
"	minHarmonicity = 0\n"
"	minIntensity = 0\n"
"	maxPitch = 0\n"
"	maxIntensity = 0\n"
"	maxTimeIntensity = 0\n"
"	maxHarmonicity = 0\n"
"	\n"
"	config.language$ = \"EN\"\n"
"	logging = 0\n"
"	# preferencesAppDir$ must have been defined, which happens in the App file\n"
"	preferencesAppFile$ = preferencesAppDir$+\"/'demoAppName$'rc.tsv\"\n"
"	preferencesTableDir$ = \"'preferencesAppDir$'/Data\"\n"
"	config.openLog$ = \"'preferencesAppDir$'/log\"\n"
"	preferencesScriptsDir$ = \"'preferencesAppDir$'/scripts\"\n"
"	defaultFontSize = 12\n"
"	defaultFont$ = \"Helvetica\"\n"
"	defaultFontColor$ = \"Black\"\n"
"	defaultLineWidth = 1\n"
"	currentSoundName$ = \"\"\n"
"	speakerID$ = \"\"\n"
"	speakerInfo$ = \"\"\n"
"	speakerComments$ = \"\"\n"
"	noDrawingOrWriting = 0\n"
"	noDrawingSelection = 0\n"
"	selectionIsDrawn = 0\n"
"\n"
"	globaltablelists$ = \"\"\n"
"	if unix\n"
"		globaltablelists$ = \"/etc/praat/'demoAppName$'/Data\"	\n"
"	elsif macintosh\n"
"		globaltablelists$ = \"/Library/Praat/'demoAppName$'/Data\"\n"
"	elsif windows\n"
"		globaltablelists$ = \"C:/Documents and Settings/All Users/Application Data/praat/'demoAppName$'/Data\"\n"
"	endif\n"
"	\n"
"	#\n"
"	drawSound = 1\n"
"	drawPitch = 0\n"
"	drawPitchTier = 0\n"
"	drawIntensity = 0\n"
"	te.useFullASTselection = 1\n"
"	\n"
"	# On unix and mac, default to PDF and allow PNG files\n"
"	config.saveFMT$ = \"PDF\"\n"
"	if windows\n"
"		# On windows, only PNG and EPS are possible (kill EMF)\n"
"		config.saveFMT$ = \"PNG\"\n"
"	endif\n"
"\n"
"endproc\n"
"\n"
"procedure global_setup\n"
"	# Set up directories if they do not exist already\n"
"	call set_up_directories\n"
"	# Get saved preferences\n"
"	call read_preferences \"\"\n"
"	\n"
"	# Load local preferences if present\n"
"	if fileReadable(config.rootDirectory$+config.localInitializationFile$)\n"
"		call read_preferences 'config.rootDirectory$''config.localInitializationFile$'\n"
"	elsif fileReadable(homeDirectory$+\"/\"+config.localInitializationFile$)\n"
"		call read_preferences 'homeDirectory$'/'config.localInitializationFile$'\n"
"	endif\n"
"	\n"
"	# Set inital language\n"
"	call set_language 'config.language$'\n"
"	# Set Speaker color\n"
"	call switch_speaker_next_button 'config.speakerSerial$'\n"
"\n"
"	# Expand relative file names\n"
"	call expand_releative_paths\n"
"	\n"
"	# In case a SpeakerData table is given, load speakerdata, and set to first item\n"
"	if config.speakerData$ <> \"\"\n"
"		# Allow to ask for a new table component\n"
"		if index_regex(config.speakerData$, \"\\[\\[[^\\]]*\\]\\]\")\n"
"			.requestText$ = replace_regex$(config.speakerData$, \"^.*\\[\\[([^\\]]*)\\]\\].*$\", \"\\1\", 0)\n"
"			call getLanguageTexts Config SpeakerData\n"
"			beginPause(\"\")\n"
"				sentence (.requestText$, \"\")\n"
"			clicked = endPause (\"'getLanguageTexts.cancelText$'\", \"'getLanguageTexts.continueText$'\", 2, 1)\n"
"			# Cancel\n"
"			if clicked = 2\n"
"				.requestTextVar$ = replace_regex$(.requestText$, \"^([A-Z])\", \"\\l\\1\", 0)\n"
"				.requestTextVar$ = replace_regex$(.requestTextVar$, \"\\s*\\(.*$\", \"\", 0)\n"
"				.requestTextVar$ = replace_regex$(.requestTextVar$, \"[\\s.?!()/\\\\\\\\]\", \"_\", 0)\n"
"				.replaceText$ = '.requestTextVar$'$\n"
"				config.speakerData$ = replace_regex$(config.speakerData$, \"\\[\\[[^\\]]*\\]\\]\", \"[[]]\", 0)\n"
"				config.speakerData$ = replace$(config.speakerData$, \"[[]]\", .replaceText$, 0)\n"
"			endif\n"
"		endif\n"
"		call ReadSpeakerData 'config.speakerData$'\n"
"		# Set display to first item\n"
"		call processMainPageNextItem 0 0 0\n"
"		# Search first empty row\n"
"		if config.speakerDataTable > 0 and speakerID$ <> \"\" and speakerID$ <> \"0\"\n"
"			selectObject: config.speakerDataTable\n"
"			.numColumns = Get number of columns\n"
"			.numRows = Get number of rows\n"
"			.first = 1\n"
"			if .numColumns > 4\n"
"				for .c from 5 to .numColumns\n"
"					.cLabel$ = Get column label: .c\n"
"					.r = Search column: .cLabel$, \"?\"\n"
"					if .r > .first\n"
"						.first = .r\n"
"					endif\n"
"				endfor\n"
"			endif\n"
"			if .first < .numRows\n"
"				speakerID$ = Get value: .first, \"ID\"\n"
"			endif\n"
"		endif\n"
"	endif\n"
"	\n"
"	# Set up speaker data table, if needed\n"
"	if config.speakerDataTable <= 0\n"
"		config.speakerData$ = \"\"\n"
"		config.speakerDataTable = Create Table with column names... SpeakerData 1 ID Text Description Audio AST StartTime EndTime\n"
"	endif\n"
"endproc\n"
"\n"
"procedure switch_speaker_next_button .set_nextItem$\n"
"	# Speaker & !NextItem -> !Speaker & NextItem\n"
"	if .set_nextItem$ = \"Forw\"\n"
"		call hide_button 'te.buttons$' Speaker\n"
"		call hide_button 'te.buttons$' PreviousItem\n"
"		call unhide_button 'te.buttons$' !NextItem\n"
"	elsif .set_nextItem$ = \"Backw\" \n"
"		call hide_button 'te.buttons$' Speaker\n"
"		call hide_button 'te.buttons$' NextItem\n"
"		call unhide_button 'te.buttons$' !PreviousItem\n"
"	# !Speaker & Next -> Speaker & !NextItem\n"
"	elsif .set_nextItem$ = \"None\"\n"
"		call unhide_button 'te.buttons$' !Speaker\n"
"		call hide_button 'te.buttons$' NextItem\n"
"		call hide_button 'te.buttons$' PreviousItem\n"
"	endif\n"
"endproc\n"
"\n"
"# In a rating experiment, all unnecessary buttons are removed\n"
"procedure hide_buttons_for_rating_experiment\n"
"		call hide_all_buttons 'te.buttons$'\n"
"		call unhide_button 'te.buttons$' Play\n"
"		call unhide_button 'te.buttons$' Quit\n"
"		call unhide_button 'te.buttons$' Refresh\n"
"		call unhide_button 'te.buttons$' Speaker\n"
"endproc\n"
"\n"
"procedure expand_releative_paths\n"
"	# config.speakerData$\n"
"	if startsWith(config.speakerData$, \"./\")\n"
"		config.speakerData$ = replace_regex$(config.speakerData$, \"^\\./\", \"'config.rootDirectory$'\", 0)\n"
"	elsif startsWith(config.speakerData$, \"~/\")\n"
"		config.speakerData$ = replace_regex$(config.speakerData$, \"^~/\", \"'homeDirectory$'/\", 0)\n"
"	endif\n"
"	# config.sourceFile$\n"
"	if startsWith(config.sourceFile$, \"./\")\n"
"		config.sourceFile$ = replace_regex$(config.sourceFile$, \"^\\./\", \"'config.rootDirectory$'\", 0)\n"
"	elsif startsWith(config.sourceFile$, \"~/\")\n"
"		config.sourceFile$ = replace_regex$(config.sourceFile$, \"^~/\", \"'homeDirectory$'/\", 0)\n"
"	endif\n"
"	# config.openLog$\n"
"	if startsWith(config.openLog$, \"./\")\n"
"		config.openLog$ = replace_regex$(config.openLog$, \"^\\./\", \"'config.rootDirectory$'\", 0)\n"
"	elsif startsWith(config.openLog$, \"~/\")\n"
"		config.openLog$ = replace_regex$(config.openLog$, \"^~/\", \"'homeDirectory$'/\", 0)\n"
"	endif\n"
"endproc\n"
"\n"
"# Initialize\n"
"call global_initialization\n"
"call global_setup\n"
"\n"
"# Draw inital window\n"
"call init_window\n"
"\n"
"###############################################################\n"
"#\n"
"# Miscelaneous supporting code\n"
"#\n"
"###############################################################\n"
"\n"
"###############################################################\n"
"#\n"
"# Obligatory procedures\n"
"#\n"
"###############################################################\n"
"\n"
"# Initialize demo Window\n"
"procedure init_window\n"
"    demo Erase all\n"
"	demo Line width... 'defaultLineWidth'\n"
"	demo 'defaultFont$'\n"
"	call set_font_size 'defaultFontSize'\n"
"	demo 'defaultFontColor$'\n"
"	call reset_viewport\n"
"	# Set canvas (if available)\n"
"	call findLabel 'te.buttons$' !CANVAS\n"
"	.row = findLabel.row\n"
"	if .row > 0\n"
"		select Table 'te.buttons$'\n"
"		canvasXL = Get value... '.row' LeftX\n"
"		canvasXR = Get value... '.row' RightX\n"
"		canvasYL = Get value... '.row' LowY\n"
"		canvasYH = Get value... '.row' HighY\n"
"		wipeCanvasArea$ = \"demo Paint rectangle... White 'canvasXL' 'canvasXR' 'canvasYL' 'canvasYH'\"\n"
"	endif\n"
"	\n"
"	# Draw background\n"
"	if config.showBackground\n"
"		call draw_background Background\n"
"	endif\n"
"    # Define buttons in a table\n"
"    call init_buttons\n"
"	# Handle window title\n"
"	.typeRoman$ = \"-\"\n"
"	if pathologicalType > 0\n"
"		call toRoman pathologicalType\n"
"		.typeRoman$ = toRoman.roman$\n"
"	endif\n"
"	call findLabel 'te.buttons$' !PathologicalType\n"
"	.row = findLabel.row\n"
"	select Table 'te.buttons$'\n"
"	pathologicalTypeText$ = Get value... '.row' Text\n"
"	pathologicalTypeText$ = \"'pathologicalTypeText$' '.typeRoman$'\"\n"
"	# If present, get other path type entries\n"
"	otherASTentries$ = \"\"\n"
"	call get_speakerInfo 'speakerID$'\n"
"	if get_speakerInfo.row > 0\n"
"		select config.speakerDataTable\n"
"		.iColl = 2\n"
"		.column = Get column index... AST'.iColl'\n"
"		while .column > 0\n"
"			.pathType$ = Get value... get_speakerInfo.row AST'.iColl'\n"
"			if .pathType$ = \"\"\n"
"				.pathType$ = \"-\"\n"
"			endif\n"
"			if index_regex(.pathType$, \"[^0-9]\") <= 0\n"
"				call toRoman '.pathType$'\n"
"				.pathType$ = toRoman.roman$\n"
"			elsif index_regex(.pathType$, \"[\\?\\-]\")\n"
"				.pathType$ = \"\"\n"
"			endif\n"
"			otherASTentries$ = otherASTentries$+\" \"+.pathType$\n"
"			# Next round\n"
"			.iColl += 1\n"
"			.column = Get column index... AST'.iColl'\n"
"		endwhile\n"
"	endif\n"
"	# Set automatic Pathological type and write header\n"
"	call autoSetPathType\n"
"	if speakerID$ <> \"\"\n"
"		call get_speakerInfo 'speakerID$'\n"
"		.speakerNumber = get_speakerInfo.row\n"
"		if .speakerNumber > 0\n"
"			.numText$ = \"['.speakerNumber']\"\n"
"		else\n"
"			.numText$ = \"\"\n"
"		endif\n"
"		call protect_praat_special_characters 'speakerID$'\n"
"		if pathologicalType > 0\n"
"			call write_header_text Blue '.numText$' 'protect_praat_special_characters.text$' 'pathologicalTypeText$' 'otherASTentries$'\n"
"		else\n"
"			call write_header_text Blue '.numText$' 'protect_praat_special_characters.text$' - 'otherASTentries$'\n"
"		endif\n"
"	endif\n"
"	# Set draw button\n"
"	call set_draw_signal_button\n"
"	# Sound recording level\n"
"	call draw_recording_level\n"
"	# Logging light\n"
"	call paint_logging_light\n"
"	# Draw something (do it last so the axes do not get erased)\n"
"	selectionIsDrawn = 0\n"
"	call draw_signal\n"
"endproc\n"
"\n"
"procedure print_window\n"
"    demo Erase all\n"
"	demo Line width... 'defaultLineWidth'\n"
"	demo 'defaultFont$'\n"
"	call set_font_size 'defaultFontSize'\n"
"	demo 'defaultFontColor$'\n"
"	call reset_viewport\n"
"	call autoSetPathType\n"
"	# Draw something\n"
"	call draw_signal\n"
"	# Sound recording level\n"
"	call draw_recording_level\n"
"endproc\n"
"\n"
"# Make sure all Preferences directories are available\n"
"procedure set_up_directories\n"
"	createDirectory(preferencesDirectory$)	\n"
"	createDirectory(preferencesAppDir$)\n"
"	createDirectory(config.openLog$)\n"
"	createDirectory(preferencesScriptsDir$)\n"
"	\n"
"endproc\n"
"\n"
"# \n"
"# Retrieve and store setting between sessions\n"
"#\n"
"procedure read_preferences .preferencesFile$\n"
"	if not fileReadable(.preferencesFile$)\n"
"		.preferencesFile$ = preferencesAppFile$\n"
"	endif\n"
"	if fileReadable(.preferencesFile$)\n"
"		call readTable '.preferencesFile$'\n"
"		if readTable.tableID > 0\n"
"			.preferenceTable$ = selected$(\"Table\")\n"
"			.numPrefKeys = Get number of rows\n"
"	\n"
"			for .row to .numPrefKeys\n"
"				.variableName$ = Get value... '.row' Key\n"
"				# Check names of variables\n"
"				if index_regex(.variableName$, \"^(config|mainPage)\\.\")\n"
"					if variableExists(.variableName$)\n"
"						.variableValue = Get value... '.row' Value\n"
"						if .variableValue <> undefined\n"
"							'.variableName$' = '.variableValue'\n"
"						endif\n"
"					elsif variableExists(.variableName$+\"$\")\n"
"						.variableValue$ = Get value... '.row' Value\n"
"						# Double check language!!!!\n"
"						if .variableName$ = \"config.language\"\n"
"							.buttonsTable$ = te.buttons$\n"
"							if .buttonsTable$ = \"\"\n"
"								.buttonsTable$ = buttonsTableName$\n"
"							endif\n"
"							call checkTable '.buttonsTable$'_'.variableValue$'\n"
"							if not checkTable.available\n"
"								.variableValue$ = te.defaultLanguage$\n"
"							endif\n"
"						endif\n"
"						.variableName$ = .variableName$+\"$\"\n"
"						'.variableName$' = \"'.variableValue$'\"\n"
"					endif\n"
"				endif\n"
"			endfor\n"
"			select Table '.preferenceTable$'\n"
"			Remove\n"
"		endif\n"
"		\n"
"		# Reset variables\n"
"		if te.ratingTable > 0\n"
"			select te.ratingTable\n"
"			Remove\n"
"			te.ratingTable = -1\n"
"		endif\n"
"		\n"
"		# Handle relative paths\n"
"		call expand_releative_paths\n"
"	endif\n"
"endproc\n"
"\n"
"procedure write_preferences .preferencesFile$\n"
"	if config.rememberPreferences <= 0\n"
"		goto ENDOFWRITEPREFERENCES\n"
"	endif\n"
"	Create Table with column names... Preferences 0 Key Value\n"
"	if index_regex(.preferencesFile$, \"[a-zA-Z0-9]\") <= 0\n"
"		.preferencesFile$ = preferencesAppFile$\n"
"	endif\n"
"	.row = 0\n"
"	\n"
"	for .tableNum from 1 to 2\n"
"		if .tableNum = 1\n"
"			.table$ = \"Config\"\n"
"		elsif .tableNum = 2\n"
"			.table$ = \"MainPage\"\n"
"		endif\n"
"		.varPrefix$ = replace_regex$(.table$, \"^(.)\", \"\\l\\1\", 0)\n"
"\n"
"		select Table '.table$'\n"
"		.numTableRows = Get number of rows\n"
"		for .tablerow to .numTableRows\n"
"			select Table '.table$'\n"
"			.label$ = Get value... '.tablerow' Label\n"
"			.label$ = replace_regex$(.label$, \"^[!]\", \"\", 0)\n"
"			.variableName$ = .varPrefix$+\".\"+(replace_regex$(.label$, \"^(.)\", \"\\l\\1\", 0))\n"
"			.keyName$ = .variableName$\n"
"			.value$ = \"\"\n"
"			if variableExists(.variableName$)\n"
"				.value = '.variableName$'\n"
"				.value$ = \"'.value'\"\n"
"			elsif variableExists(.variableName$ + \"$\")\n"
"				.variableName$ = .variableName$ + \"$\"\n"
"				.value$ = '.variableName$'\n"
"			elsif index(.variableName$, \"_\") > 0\n"
"				.variableName$ = left$(.variableName$, rindex(.variableName$, \"_\") - 1)	\n"
"				.keyName$ = .variableName$\n"
"				select Table Preferences\n"
"				.prefRow = Search column... Key '.keyName$'\n"
"				if .prefRow <= 0\n"
"					if variableExists(.variableName$)\n"
"					   .value = '.variableName$'\n"
"					   .value$ = \"'.value'\"\n"
"					elsif variableExists(.variableName$ + \"$\")\n"
"					   .variableName$ = .variableName$ + \"$\"\n"
"					   .value$ = '.variableName$'\n"
"					endif\n"
"				endif\n"
"			endif\n"
"\n"
"			if .value$ <> \"\"\n"
"				select Table Preferences\n"
"				Append row\n"
"				.row += 1\n"
"				Set string value... '.row' Key '.keyName$'\n"
"				Set string value... '.row' Value '.value$'\n"
"			endif\n"
"		endfor\n"
"	endfor\n"
"	\n"
"	# Write out\n"
"	select Table Preferences\n"
"	Write to table file... '.preferencesFile$'\n"
"	Remove\n"
"	label ENDOFWRITEPREFERENCES\n"
"endproc\n"
"\n"
"procedure get_nextSpeaker .speakerID$\n"
"	.reset = 0\n"
"	.numRows = 0\n"
"	call get_speakerInfo '.speakerID$'\n"
"	.row = get_speakerInfo.row\n"
"	call ReadSpeakerData 'config.speakerData$'\n"
"	if config.speakerDataTable > 0\n"
"		select config.speakerDataTable\n"
"		.numRows = Get number of rows\n"
"		.row += 1\n"
"		if .row <= 0\n"
"			.row = .numRows\n"
"			.reset = 1\n"
"		elsif .row > .numRows\n"
"			.row = 1\n"
"			.reset = 1\n"
"		endif\n"
"						\n"
"		# Randomize rows if necessary\n"
"		if .reset > 0 and config.randomizeSpeakerData\n"
"			select config.speakerDataTable\n"
"			Randomize rows\n"
"		endif\n"
"\n"
"		.speakerID$ = Get value... '.row' ID\n"
"	endif\n"
"	call  get_speakerInfo '.speakerID$'\n"
"   .id$ = get_speakerInfo.id$\n"
"   .text$ = get_speakerInfo.text$\n"
"   .description$ = get_speakerInfo.description$\n"
"   .audio$ = get_speakerInfo.audio$\n"
"   .ast$ = get_speakerInfo.ast$\n"
"   .startTime = get_speakerInfo.startTime\n"
"   .endTime = get_speakerInfo.endTime\n"
"endproc\n"
"\n"
"procedure get_previousSpeaker .speakerID$\n"
"	.reset = 0\n"
"	call get_speakerInfo '.speakerID$'\n"
"	.row = get_speakerInfo.row\n"
"	call ReadSpeakerData 'config.speakerData$'\n"
"	if config.speakerDataTable > 0\n"
"		select config.speakerDataTable\n"
"		.numRows = Get number of rows\n"
"		.row -= 1\n"
"		if .row <= 0\n"
"			.row = .numRows\n"
"			.reset = 1\n"
"		elsif .row > .numRows\n"
"			.row = 1\n"
"			.reset = 1\n"
"		endif\n"
"		\n"
"		# Randomize rows if necessary\n"
"		if .reset > 0 and config.randomizeSpeakerData\n"
"			select config.speakerDataTable\n"
"			Randomize rows\n"
"		endif\n"
"\n"
"		.speakerID$ = Get value... '.row' ID\n"
"	endif\n"
"	call  get_speakerInfo '.speakerID$'\n"
"   .id$ = get_speakerInfo.id$\n"
"   .text$ = get_speakerInfo.text$\n"
"   .description$ = get_speakerInfo.description$\n"
"   .audio$ = get_speakerInfo.audio$\n"
"   .ast$ = get_speakerInfo.ast$\n"
"   .startTime = get_speakerInfo.startTime\n"
"   .endTime = get_speakerInfo.endTime\n"
"endproc\n"
"\n"
"procedure get_speakerInfo .speakerID$\n"
"	# 0 is a reset\n"
"	if .speakerID$ = \"0\"\n"
"		.speakerID$ = \"\"\n"
"		speakerInfo$ = \"\"\n"
"		speakerComments$ = \"\"\n"
"		pathologicalType = 0\n"
"	endif\n"
"	\n"
"	.id$ = .speakerID$\n"
"	.text$ = speakerInfo$\n"
"	.description$ = speakerComments$\n"
"	.audio$ = te.currentFileName$\n"
"	.ast$ = \"'pathologicalType'\"\n"
"	.row = 0\n"
"	.startTime = -1\n"
"	.endTime = -1\n"
"	.saveAudio$ = \"No\"\n"
"	\n"
"	if .speakerID$ <> \"\" and config.speakerData$ <> \"\" and fileReadable (config.speakerData$)\n"
"		call ReadSpeakerData 'config.speakerData$'\n"
"	endif\n"
"	\n"
"	if .speakerID$ <> \"\"\n"
"		if config.speakerDataTable > 0\n"
"			select config.speakerDataTable\n"
"			.numRows = Get number of rows\n"
"			.numEntries = .numRows\n"
"			.numCols = Get number of columns\n"
"			.row = Search column... ID '.speakerID$'\n"
"			if .row <= 0 and index_regex(.speakerID$, \"^\\d+$\") > 0\n"
"				.row = '.speakerID$'\n"
"				if .row < 0 or .row > .numRows\n"
"					.row = 0\n"
"				endif\n"
"			elsif .row <= 0 and index_regex(.speakerID$, \"[^\\d]\") > 0\n"
"				# Do a limited match\n"
"				for .r to .numRows\n"
"					if .row <= 0\n"
"						select config.speakerDataTable\n"
"						.currentKey$ = Get value... '.r' ID\n"
"						if startsWith(.currentKey$, .speakerID$) > 0\n"
"							.row = .r\n"
"						endif\n"
"					endif\n"
"				endfor\n"
"			endif\n"
"			if .row > 0\n"
"				.id$ = Get value... '.row' ID\n"
"				.text$ = Get value... '.row' Text\n"
"				.description$ = Get value... '.row' Description\n"
"				.audio$ = Get value... '.row' Audio\n"
"				if .audio$ = \"-\"\n"
"					.audio$ = \"\"\n"
"				elsif .audio$ <> \"\"\n"
"					# Root of audio files is in config.speakerData$, if not rooted elsewhere\n"
"					if index_regex(.audio$, \"^(?i[\\\\/:~]|[a-z]:)\") <= 0\n"
"						.audio$ = replace_regex$(config.speakerData$, \"[^\\\\/:]+$\", \"'.audio$'\", 0)\n"
"					endif\n"
"				endif\n"
"				# Look if the audio has to be saved\n"
"				.saveAudio$ = \"No\"\n"
"				if .audio$ <> \"\"\n"
"					select config.speakerDataTable\n"
"					.colIndex = Get column index... SaveAudio\n"
"					if .colIndex > 0\n"
"						.saveAudio$ = Get value... '.row' SaveAudio\n"
"					endif\n"
"				endif\n"
"				\n"
"				.ast$ = Get value... '.row' AST\n"
"				if index_regex(.ast$, \"\\d\") <= 0\n"
"					if index_regex(.text$, \"Type[:=\\s]+IV($|[^[IV])\")\n"
"						.ast$ = \"4\"\n"
"					elsif index_regex(.text$, \"Type[:=\\s]+III($|[^[IV])\")\n"
"						.ast$ = \"3\"\n"
"					elsif index_regex(.text$, \"Type[:=\\s]+II($|[^[IV])\")\n"
"						.ast$ = \"2\"\n"
"					elsif index_regex(.text$, \"Type[:=\\s]+I($|[^[IV])\")\n"
"						.ast$ = \"1\"\n"
"					elsif index_regex(.text$, \"Type[:=\\s]+\\d+\")\n"
"						.ast$ = replace_regex$(.text$, \".*Type[:=\\s]+(\\d+).*$\", \"\\1\", 0)\n"
"					else\n"
"						.ast$ = \"0\"\n"
"					endif\n"
"				endif\n"
"				.startTime = Get value... '.row' StartTime\n"
"				.endTime = Get value... '.row' EndTime\n"
"				if .startTime = undefined or .endTime = undefined\n"
"					.startTime = -1\n"
"					.endTime = -1\n"
"				endif\n"
"			endif\n"
"		endif\n"
"	endif\n"
"endproc\n"
"\n"
"procedure delete_speakerData .speakerID$\n"
"	call get_nextSpeaker '.speakerID$'\n"
"	.newID$ = get_nextSpeaker.id$\n"
"	call get_speakerInfo '.speakerID$'\n"
"	.deleteRow = get_speakerInfo.row\n"
"	if .deleteRow > 0\n"
"		select config.speakerDataTable\n"
"		Remove row... '.deleteRow'\n"
"		.speakerID$ = .newID$\n"
"	endif\n"
"endproc\n"
"\n"
"# Set all audio files paths relative to the path to the .tableFile$\n"
"# Write them into a COPY of the table\n"
"procedure normalize_speakerData .tableFile$\n"
"	.rootPath$ = replace_regex$(.tableFile$, \"[^/]+$\", \"\", 0)\n"
"	.rootCurrent$ = \"\"\n"
"	if .tableFile$ <> config.speakerData$\n"
"		.rootCurrent$ = replace_regex$(config.speakerData$, \"[^/]+$\", \"\", 0)\n"
"	endif\n"
"	select config.speakerDataTable\n"
"	.table = Copy... TempTable\n"
"	.numRows = Get number of rows\n"
"	for .row to .numRows\n"
"		select .table\n"
"		.audioPath$ = Get value... '.row' Audio\n"
"		# Expand current audio paths\n"
"		if .rootCurrent$ <> \"\" and not startsWith(.audioPath$, \"/\")\n"
"			.audioPath$ = .rootCurrent$+.audioPath$\n"
"		endif\n"
"		# Remove .rootPath's from audio paths\n"
"		if startsWith(.audioPath$, .rootPath$)\n"
"			.audioPath$ = replace$(.audioPath$, .rootPath$, \"\", 1)\n"
"			Set string value... '.row' Audio '.audioPath$'\n"
"		endif\n"
"	endfor\n"
"endproc\n"
"\n"
"# Non-interactive procedure to load a specific speaker from Speaker Data\n"
"procedure loadSpeaker .newSpeakerID$\n"
"	call get_speakerInfo '.newSpeakerID$'\n"
"	.newSpeakerID$ = get_speakerInfo.id$\n"
"	speakerInfo$ = get_speakerInfo.text$\n"
"	speakerComments$ = get_speakerInfo.description$\n"
"	te.currentFileName$ = get_speakerInfo.audio$\n"
"	pathologicalType = 'get_speakerInfo.ast$'\n"
"	call getOpenFile 'te.currentFileName$'\n"
"	Rename... Speech\n"
"	call set_new_speakerdata '.newSpeakerID$'\n"
"	.duration = Get total duration\n"
"	call post_processing_sound\n"
"endproc\n"
"\n"
"# Read a text file with speaker data with format\n"
"# ID: text\n"
"# Text without empty lines\n"
"# <empty line>\n"
"#\n"
"# If you read a table (tsv/Table) it should have the columns\n"
"# ID Text Description Audio\n"
"#\n"
"procedure ReadSpeakerData .speakerData$\n"
"	# Create a new table or read the file\n"
"	if .speakerData$ <> \"\" and fileReadable(.speakerData$) and config.speakerDataTable <= 0\n"
"		# New SpeakerData, forget old backup\n"
"		config.speakerDataBackup$ = \"\"\n"
"		config.createBackup = 1\n"
"		# Set local preferences\n"
"		.dataDir$ = replace_regex$(config.speakerData$, \"(^|[/:\\\\])[^/:\\\\]+$\", \"\", 0)\n"
"		# After loading speaker data, this becomes the root directory.\n"
"		config.rootDirectory$ = .dataDir$+\"/\"\n"
"		call load_local_preferences '.dataDir$'\n"
"		# Find the table\n"
"		if index_regex(.speakerData$, \"\\.(?itsv|table)\")\n"
"			.numSelected = numberOfSelected()\n"
"			if .numSelected > 0\n"
"				.currentSelected = selected()\n"
"			else\n"
"				.currentSelected = -1\n"
"			endif\n"
"			call readTable '.speakerData$'\n"
"			config.speakerDataTable = readTable.tableID\n"
"			if config.speakerDataTable <= 0 or .currentSelected = config.speakerDataTable\n"
"				config.speakerDataTable = Create Table with column names... SpeakerData 1 ID Text Description Audio AST StartTime EndTime\n"
"			else\n"
"				# Complete columns\n"
"				.col = Get column index... ID\n"
"				if .col <= 0\n"
"					Append column... ID\n"
"					# We really need unique IDs!!! Supply them\n"
"					.numRows = Get number of rows\n"
"					for .i to .numRows\n"
"						Set string value... '.i' ID Item'.i'\n"
"					endfor\n"
"				else\n"
"					# Check and correct ID's for uniqueness\n"
"					select config.speakerDataTable\n"
"					.numRows = Get number of rows\n"
"					.idList$ = tab$\n"
"					for .row to .numRows\n"
"						select config.speakerDataTable\n"
"						.id$ = Get value... '.row' ID\n"
"						.exists = index_regex(.idList$, \"\\t'.id$'\\t\")\n"
"						if .exists != undefined and .exists > 0\n"
"							.copyNum = 1\n"
"							while index_regex(.idList$, \"\\t'.id$'_'.copyNum'\\t\")\n"
"								.copyNum += 1\n"
"							endwhile\n"
"							.id$ = .id$+\"_'.copyNum'\"\n"
"							Set string value... '.row' ID '.id$'\n"
"						endif\n"
"						.idList$ = .idList$+.id$+tab$\n"
"					endfor\n"
"				endif\n"
"				.col = Get column index... Text\n"
"				if .col <= 0\n"
"					Append column... Text\n"
"				endif\n"
"				.col = Get column index... Description\n"
"				if .col <= 0\n"
"					Append column... Description\n"
"				endif\n"
"				.col = Get column index... Audio\n"
"				if .col <= 0\n"
"					Append column... Audio\n"
"				endif\n"
"				.col = Get column index... AST\n"
"				if .col <= 0\n"
"					Append column... AST\n"
"				endif\n"
"				.col = Get column index... StartTime\n"
"				if .col <= 0\n"
"					Append column... StartTime\n"
"				endif\n"
"				.col = Get column index... EndTime\n"
"				if .col <= 0\n"
"					Append column... EndTime\n"
"				endif\n"
"			endif\n"
"			# Set local preferences\n"
"			.dataDir$ = replace_regex$(config.speakerData$, \"(^|[/:\\\\])[^/:\\\\]+$\", \"\", 0)\n"
"			# After loading speaker data, this becomes the root directory.\n"
"			config.rootDirectory$ = .dataDir$+\"/\"\n"
"			call load_local_preferences '.dataDir$'\n"
"					\n"
"			# Randomize rows if necessary\n"
"			if config.randomizeSpeakerData\n"
"				select config.speakerDataTable\n"
"				Randomize rows\n"
"			endif\n"
"		else\n"
"			# Reset SpeakerData table\n"
"			call initializeSpeakerData\n"
"			config.speakerData$ = .speakerData$\n"
"			# Create new SpeakerData table\n"
"			.rawStrings = Read Strings from raw text file... '.speakerData$'\n"
"			.numStrings = Get number of strings\n"
"			if .numStrings > 0\n"
"				config.speakerDataTable = Create Table with column names... SpeakerData 1 ID Text Description Audio AST StartTime EndTime\n"
"\n"
"				for .row to .numStrings\n"
"					select .rawStrings\n"
"					.currentString$ = Get string... '.row'\n"
"					\n"
"					select config.speakerDataTable\n"
"					Append row\n"
"					if index_regex(.currentString$, \"\\t\")\n"
"						.column = 1\n"
"						while index_regex(.currentString$, \"\\S\")\n"
"							.nextEnd = index_regex(.currentString$, \"[\\t\\n]\")\n"
"							if .nextEnd <= 0\n"
"								.nextEnd = length(.currentString$) + 1\n"
"							endif\n"
"							.colLabel$ = Get column label... '.column'\n"
"							.nextValue$ = left$(.currentString$, (.nextEnd - 1))\n"
"							.currentString$ = right$(.currentString$, (length(.currentString$) - .nextEnd))\n"
"							Set string value... '.row' '.colLabel$' '.currentString$'\n"
"							.column += 1\n"
"						endwhile\n"
"					else\n"
"						Set string value... '.row' ID Item'.row'\n"
"						Set string value... '.row' Audio '.currentString$'\n"
"					endif\n"
"				endfor\n"
"				# Remove empty first row\n"
"				select config.speakerDataTable\n"
"				.lastRow = Get number of rows\n"
"				Remove row... .lastRow\n"
"			endif\n"
"			select .rawStrings\n"
"			Remove\n"
"			\n"
"			# Created new data table, backup if needed\n"
"			if config.createBackup\n"
"				config.speakerData$ = replace_regex$(config.speakerData$, \"(\\.\\w+)$\", \".tsv\", 0)\n"
"				select config.speakerDataTable\n"
"				Save as tab-separated file... 'config.speakerData$'\n"
"			endif\n"
"		endif\n"
"	endif\n"
"endproc\n"
"\n"
"procedure load_audio_file .newSpeakerID$ .fileName$\n"
"	if .fileName$ <> \"\"\n"
"		call getOpenFile '.fileName$'\n"
"		Rename... Speech\n"
"		recordedSound$ = selected$(\"Sound\")\n"
"		te.openSound = selected(\"Sound\")\n"
"		call set_new_speakerdata '.newSpeakerID$'\n"
"		call post_processing_sound\n"
"		# Draw\n"
"		call init_window\n"
"	endif\n"
"endproc\n"
"\n"
"procedure initializeSpeakerData\n"
"	.speakerID$ = speakerID$\n"
"	if  config.speakerDataTable > 0\n"
"		select config.speakerDataTable\n"
"		Remove\n"
"	endif\n"
"	call get_speakerInfo 0\n"
"	config.speakerDataBackup$ = \"\"\n"
"	config.speakerData$ = \"\"\n"
"	config.speakerDataTable = -1\n"
"endproc\n"
"\n"
"procedure WriteSpeakerData\n"
"	call get_speakerInfo 'speakerID$'\n"
"	# Table does not exist\n"
"	if config.speakerDataTable <= 0\n"
"		config.speakerDataBackup$ = \"\"\n"
"		config.speakerData$ = \"\"\n"
"		config.speakerDataTable = Create Table with column names... SpeakerData 1 ID Text Description Audio AST StartTime EndTime\n"
"		select config.speakerDataTable\n"
"		.row = Get number of rows\n"
"	elsif get_speakerInfo.row > 0\n"
"		.row = get_speakerInfo.row\n"
"	else\n"
"		select config.speakerDataTable\n"
"		.id$ = Get value... 1 ID\n"
"		.numRows = Get number of rows\n"
"		if .numRows = 1 and (.id$ = \"\" or .id$ <> \"?\")\n"
"			.row = 1\n"
"		else		\n"
"			Append row\n"
"			.row = Get number of rows\n"
"		endif\n"
"	endif\n"
"	select config.speakerDataTable\n"
"	Set string value... '.row' ID 'speakerID$'\n"
"	Set string value... '.row' Text 'speakerInfo$'\n"
"	Set string value... '.row' Description 'speakerComments$'\n"
"	.speakerDataDir$ = replace_regex$(config.speakerData$, \"[^\\\\/:]+$\", \"\", 0)\n"
"	.audio$ = te.currentFileName$\n"
"	# Catch Windows \\ path separator\n"
"	if windows\n"
"		.speakerDataDir$ = replace_regex$(.speakerDataDir$, \"\\\\\", \"\\\\\\\\\", 0)\n"
"	endif\n"
"	if index_regex(.audio$, \"'.speakerDataDir$'\") > 0\n"
"		.audio$ = replace_regex$(.audio$, \"'.speakerDataDir$'\", \"\", 0)\n"
"	endif\n"
"	Set string value... '.row' Audio '.audio$'\n"
"	if pathologicalType > 0\n"
"		Set string value... '.row' AST 'pathologicalType'\n"
"	else\n"
"		Set string value... '.row' AST -\n"
"	endif\n"
"	\n"
"	if config.speakerData$ <> \"\" and fileReadable(config.speakerData$)\n"
"		if config.createBackup\n"
"			config.createBackup = 0\n"
"			config.speakerDataBackup$ = replace_regex$(config.speakerData$, \"(\\.\\w+)$\", \"~\\1\", 0)\n"
"\n"
"			# The backup file is a Table, so give it the correct extension\n"
"			if index_regex(config.speakerDataBackup$, \"\\.(?itsv|table)\") <= 0\n"
"				config.speakerDataBackup$ = replace_regex$(config.speakerDataBackup$, \"\\.\\w+$\", \".tsv\", 0)\n"
"			endif\n"
"			call readTable 'config.speakerData$'\n"
"			.tmpTable = readTable.tableID\n"
"			if .tmpTable > 0\n"
"				Save as tab-separated file... 'config.speakerDataBackup$'\n"
"				select .tmpTable\n"
"				Remove\n"
"			endif\n"
"		endif\n"
"		select config.speakerDataTable\n"
"		# Sort rows if necessary\n"
"		if config.speakerDataTable > 0 and config.randomizeSpeakerData\n"
"			select config.speakerDataTable\n"
"			Sort rows: \"ID\"\n"
"		endif\n"
"		Save as tab-separated file... 'config.speakerData$'\n"
"	endif\n"
"endproc\n"
"\n"
"procedure autoSetPathType\n"
"	if pathologicalType = undefined or pathologicalType <= 0\n"
"		.pathologicalAutoType = predictedPathType\n"
"		if .pathologicalAutoType <> undefined and .pathologicalAutoType > 0\n"
"			pathologicalTypeText$ = replace_regex$(pathologicalTypeText$, \"[\\d\\-\\.]+\\s*$\", \"'.pathologicalAutoType'\", 0)\n"
"		endif\n"
"	endif\n"
"	if not noDrawingOrWriting\n"
"		call get_speakerInfo 'speakerID$'\n"
"		.speakerNumber = get_speakerInfo.row\n"
"		if .speakerNumber > 0\n"
"			.numText$ = \"['.speakerNumber']\"\n"
"		else\n"
"			.numText$ = \"\"\n"
"		endif\n"
"		call set_window_title 'te.buttons$' '.numText$' 'speakerID$' 'pathologicalTypeText$'\n"
"	endif\n"
"endproc\n"
"\n"
"procedure setPathType .pathType\n"
"	if .pathType < 9\n"
"		pathologicalType = .pathType\n"
"	endif\n"
"	call get_speakerInfo 'speakerID$'\n"
"	if get_speakerInfo.row > 0\n"
"		# .pathType 9 is just for marking the interval\n"
"		if .pathType >= 9\n"
"			Set string value... 'get_speakerInfo.row' StartTime 'selectedStartTime:4'\n"
"			Set string value... 'get_speakerInfo.row' EndTime 'selectedEndTime:4'\n"
"		elsif pathologicalType > 0\n"
"			Set string value... 'get_speakerInfo.row' AST 'pathologicalType'\n"
"			Set string value... 'get_speakerInfo.row' StartTime 'selectedStartTime:4'\n"
"			Set string value... 'get_speakerInfo.row' EndTime 'selectedEndTime:4'\n"
"		else\n"
"			Set string value... 'get_speakerInfo.row' AST -\n"
"			Set string value... 'get_speakerInfo.row' StartTime -\n"
"			Set string value... 'get_speakerInfo.row' EndTime -\n"
"		endif\n"
"		call WriteSpeakerData\n"
"	endif\n"
"endproc\n"
"\n"
"procedure setPathParameter .table .paramName$ .valueText$\n"
"	select .table\n"
"	.rowIndex = Get row index... '.paramName$'\n"
"	if .rowIndex <= 0\n"
"		Insert row (index)... 1\n"
"		.rowIndex = 1\n"
"		Set row label (index)... 1 '.paramName$'\n"
"	endif\n"
"	if index(.valueText$, \"undefined\") <= 0\n"
"		Set value... '.rowIndex' 1 '.valueText$'\n"
"	endif\n"
"endproc\n"
"\n"
"procedure getPathParameter .table .paramName$\n"
"	.value = undefined\n"
"	select .table\n"
"	.rowIndex = Get row index... '.paramName$'\n"
"	if .rowIndex > 0\n"
"		.value = Get value... '.rowIndex' 1\n"
"	endif\n"
"endproc\n"
"\n"
"procedure toRoman .arabic\n"
"	.roman$ = \"\"\n"
"	while .arabic > 0\n"
"		if .arabic >= 1000\n"
"			.roman$ = .roman$+\"M\"\n"
"			.arabic -= 1000\n"
"		elsif .arabic >= 500\n"
"			.roman$ = .roman$+\"D\"\n"
"			.arabic -= 500\n"
"		elsif .arabic >= 100\n"
"			.roman$ = .roman$+\"C\"\n"
"			.arabic -= 100\n"
"		elsif .arabic >= 50\n"
"			.roman$ = .roman$+\"L\"\n"
"			.arabic -= 50\n"
"		elsif .arabic >= 10\n"
"			.roman$ = .roman$+\"X\"\n"
"			.arabic -= 10\n"
"		elsif .arabic >= 5\n"
"			.roman$ = .roman$+\"V\"\n"
"			.arabic -= 5\n"
"		elsif .arabic >= 1\n"
"			.roman$ = .roman$+\"I\"\n"
"			.arabic -= 1\n"
"		endif\n"
"	endwhile\n"
"	.roman$ = replace$(.roman$, \"VIIII\", \"IX\", 0)\n"
"	.roman$ = replace$(.roman$, \"IIII\", \"IV\", 0)\n"
"	.roman$ = replace$(.roman$, \"LXXXX\", \"XC\", 0)\n"
"	.roman$ = replace$(.roman$, \"XXXX\", \"XL\", 0)\n"
"	.roman$ = replace$(.roman$, \"DCCCC\", \"CM\", 0)\n"
"	.roman$ = replace$(.roman$, \"CCCC\", \"CD\", 0)\n"
"endproc\n"
"# Include the main page buttons and procedures\n"
"#\n"
"# TEVA 1.1\n"
"# \n"
"# Praat script handling buttons page\n"
"#\n"
"#     TEVA: MainPage.praat loads the code needed for the \n"
"#     main, practice, page of DemoApp and the sound handling and recognition.\n"
"#     \n"
"#     Copyright (C) 2010-2012  R.J.J.H. van Son and the Netherlands Cancer Institute\n"
"# \n"
"#     This program is free software; you can redistribute it and/or modify\n"
"#     it under the terms of the GNU General Public License as published by\n"
"#     the Free Software Foundation; either version 2 of the License, or\n"
"#     (at your option) any later version.\n"
"# \n"
"#     This program is distributed in the hope that it will be useful,\n"
"#     but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"#     GNU General Public License for more details.\n"
"# \n"
"#     You should have received a copy of the GNU General Public License\n"
"#     along with this program; if not, write to the Free Software\n"
"#     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA\n"
"# \n"
"mainPage.outputPraatObject$ = \"Draw\"\n"
"\n"
"# Define some variables\n"
"procedure initializeMainPage\n"
"	# Do not recalculate needlessly\n"
"	calculateHarmonicityValues.previousSelectedGNEStartTime = -1\n"
"	calculateHarmonicityValues.previousSelectedGNEEndTime = -1\n"
"	calculateHarmonicityValues.previousHarmonicity = -1\n"
"	previousHarmonicityStart = -1\n"
"	previousHarmonicityEnd = -1\n"
"	previousGNEstart = -1\n"
"	previousGNEend = -1\n"
"endproc\n"
"call initializeMainPage\n"
"\n"
"###############################################################\n"
"#\n"
"# Button Drawing Routines\n"
"#\n"
"###############################################################\n"
"\n"
"procedure drawTriangle .direction .x .y .size\n"
"	# Make sure direction = +/- 1\n"
"	if .direction = 0\n"
"		.direction = 1 \n"
"	endif\n"
"	.direction /= abs(.direction)\n"
"	\n"
"	.offset = 0.01\n"
"	.currentHeight = .size\n"
"	.currentX = .x - .direction*.size\n"
"	\n"
"	demo Line width... 2.0\n"
"\n"
"	while .currentHeight> 0\n"
"		.ystart = .y + .currentHeight\n"
"		.yend = .y - .currentHeight\n"
"		demo Draw line... .currentX .ystart .currentX .yend\n"
"		.currentHeight -= .offset *3/4\n"
"		.currentX += .direction*.offset * 1.5\n"
"	endwhile\n"
"	demo Line width... 'defaultLineWidth'\n"
"endproc\n"
"\n"
"procedure DrawPrevious .color$ .x .y .size\n"
"	demo Colour... '.color$'\n"
"	.y += .size / 2\n"
"	.size *= 2/3\n"
"	call drawTriangle -1 .x .y .size\n"
"	.currentX = drawTriangle.currentX\n"
"	.endX = .currentX - 0.5\n"
"	.lowY = .y - .size\n"
"	.highY = .y + .size\n"
"	demo Paint rectangle... '.color$' '.currentX' '.endX' '.lowY' '.highY'\n"
"endproc\n"
"\n"
"procedure DrawNext .color$ .x .y .size\n"
"	demo Colour... '.color$'\n"
"	.y += .size / 2\n"
"	.size *= 2/3\n"
"	call drawTriangle 1 .x .y .size\n"
"	.currentX = drawTriangle.currentX\n"
"	.endX = .currentX + 0.5\n"
"	.lowY = .y - .size\n"
"	.highY = .y + .size\n"
"	demo Paint rectangle... '.color$' '.currentX' '.endX' '.lowY' '.highY'\n"
"endproc\n"
"\n"
"\n"
"###############################################################\n"
"#\n"
"# Obligatory button Drawing Routines\n"
"# \n"
"# These MUST be defined\n"
"#\n"
"###############################################################\n"
"\n"
"procedure DrawRecord .color$ .x .y .size\n"
"	.size /= 2\n"
"    demo Paint circle... '.color$' '.x' '.y' '.size'\n"
"endproc\n"
"\n"
"procedure DrawPlay .color$ .x .y .size\n"
"	demo Colour... '.color$'\n"
"	call drawTriangle 1 .x .y .size\n"
"endproc\n"
"\n"
"procedure DrawQuit .color$ .x .y .size\n"
"	demo Colour... '.color$'\n"
"	.lineWidth = 0.5*.size**2\n"
"	demo Line width... '.lineWidth'\n"
"	.xstart = .x - .size\n"
"	.ystart = .y + .size\n"
"	.xend = .x + .size\n"
"	.yend = .y - .size\n"
"	demo Draw line... .xstart .ystart .xend .yend\n"
"	.xstart = .x - .size\n"
"	.ystart = .y - .size\n"
"	.xend = .x + .size\n"
"	.yend = .y + .size\n"
"	demo Draw line... .xstart .ystart .xend .yend\n"
"	demo Line width... 'defaultLineWidth'\n"
"	demo Colour... Black\n"
"endproc\n"
"\n"
"procedure DrawConfig .color$ .x .y .size\n"
"	.size *= 1\n"
"	.lineWidth = 0.4*.size\n"
"	demo Arrow size... '.lineWidth'\n"
"	.lineWidth = 0.4*.size**2\n"
"	demo Line width... '.lineWidth'\n"
"	.y += .size/2\n"
"	.xstart = .x - .size\n"
"	.xend = .x + .size\n"
"	demo Draw arrow... .xstart .y .xend .y\n"
"	demo Line width... 'defaultLineWidth'\n"
"endproc\n"
"\n"
"procedure DrawRefresh .color$ .x .y .size\n"
"	.lineWidth = 0.5*.size**2\n"
"	.size /= 2\n"
"	demo Line width... '.lineWidth'\n"
"	demo Draw arc... '.x' '.y' '.size' 0 270\n"
"	demo Line width... 'defaultLineWidth'\n"
"endproc\n"
"\n"
"procedure draw_signal\n"
"	# Draw\n"
"	if mainPage.draw$ = \"Sound\"\n"
"		# Draw Sound\n"
"		call DrawSoundObject\n"
"	elsif mainPage.draw$ = \"Pitch\"\n"
"		# Draw Pitch\n"
"		call DrawPitchObject\n"
"	elsif mainPage.draw$ = \"Harmonicity\"\n"
"		# Draw Harmonicity\n"
"		call DrawHarmonicityObject\n"
"	elsif mainPage.draw$ = \"GNE\"\n"
"		# Draw GNE\n"
"		call DrawGNEObject\n"
"	elsif mainPage.draw$ = \"PitchTier\"\n"
"		# Draw PitchTier\n"
"		call DrawPitchTierObject\n"
"	elsif mainPage.draw$ = \"Spectrogram\"\n"
"		# Draw Spectrogram\n"
"		call DrawSpectrogramObject\n"
"	elsif mainPage.draw$ = \"Ltas\"\n"
"		# Draw Ltas\n"
"		call DrawLtasObject\n"
"	elsif mainPage.draw$ = \"Intensity\"\n"
"		# Draw Intensity\n"
"		call DrawIntensityObject\n"
"	elsif mainPage.draw$ = \"Rating\"\n"
"		# Draw Rating scales\n"
"		call DrawRatingObject\n"
"	endif\n"
"endproc\n"
"\n"
"procedure print_signal .outFileName$\n"
"	.outFileName$ = replace_regex$(.outFileName$, \"\\.[a-z0-9A-Z]+$\",\"\",0)\n"
"	\n"
"	# Switch off Formant display\n"
"	.currentShowFormants = config.showFormants\n"
"	config.showFormants = 0\n"
"	\n"
"	# Set output format\n"
"	.outEPSExtension$ = \"eps\"\n"
"	.outEPSFileType$ = \"EPS file\"\n"
"	.outExtension$ = .outEPSExtension$\n"
"	.outFileType$ = .outEPSFileType$\n"
"	if config.saveFMT$ = \"PDF\"\n"
"		.outExtension$ = \"pdf\"\n"
"		.outFileType$ = \"PDF file\"\n"
"	elsif config.saveFMT$ = \"PNG\"\n"
"		.outExtension$ = \"png\"\n"
"		.outFileType$ = \"300-dpi PNG file\"\n"
"	elsif config.saveFMT$ = \"EMF\"\n"
"		.outExtension$ = \"emf\"\n"
"		.outFileType$ = \"Windows metafile\"\n"
"	endif\n"
"	\n"
"	# Print\n"
"	mainPage.outputPraatObject$ = \"Print\"\n"
"	Erase all\n"
"	\n"
"	# Set drawing (A4 with 0.5 inch margins)\n"
"	.plotWidth = 7\n"
"	.plotHeight = 10/5\n"
"	\n"
"	.plotyTop = 0.5\n"
"	.labelText$ = \"\"\n"
"	\n"
"	# Date and time\n"
"	call i8n_date\n"
"	.datetime$ = i8n_date.date$\n"
"	\n"
"	# Write title\n"
"	.titleText$ = speakerID$\n"
"	if .titleText$ = \"\"\n"
"		.titleText$ = te.currentFileName$\n"
"		.last_point = index_regex(te.currentFileName$, \"([\\\\/:])([^\\\\/:]*)$\")\n"
"		.titleText$ = right$(.titleText$, length(.titleText$) - .last_point)\n"
"		if .titleText$ = \"\"\n"
"			.titleText$ = .outFileName$		\n"
"			.last_point = index_regex(te.currentFileName$, \"([\\\\/:])([^\\\\/:]*)$\")\n"
"			.titleText$ = right$(.titleText$, length(.titleText$) - .last_point)\n"
"		endif\n"
"		.titleText$ = replace_regex$(.titleText$, \"\\.[^\\.]*$\", \"\", 0)\n"
"	endif\n"
"	call protect_praat_special_characters '.titleText$'\n"
"	.titleText$ = protect_praat_special_characters.text$\n"
"	\n"
"	.x = 50\n"
"	.y = 0\n"
"	do(\"Select outer viewport...\", 0, 7.27, 0, 0.45)\n"
"	do(\"Axes...\", 0, 100, 0, 1)\n"
"	# Print Date and Time of print\n"
"	.subtext$ = .datetime$\n"
"	do(\"Text special...\", 108, \"right\", .y+1, \"bottom\", \"Helvetica\", 9, \"0\", .subtext$)\n"
"	\n"
"	do(\"Text special...\", .x, \"centre\", .y, \"bottom\", \"Helvetica\", 14, \"0\", .titleText$)\n"
"\n"
"	# Get predictions\n"
"	call predictASTvalue\n"
"	predictedPathType = predictASTvalue.ast\n"
"\n"
"	# Get subtext\n"
"	.subtext$ = \"\"\n"
"	.typeASTText$ = \"-\"\n"
"	.typeCompASTText$ = \"-\"\n"
"	if pathologicalType != 0 or predictedPathType != 0\n"
"		call get_printsignal_text 'config.language$' AST\n"
"		.astText$ = get_printsignal_text.text$\n"
"		call get_printsignal_text 'config.language$' CompAST\n"
"		.astCompText$ = get_printsignal_text.text$\n"
"		.type = abs(pathologicalType)\n"
"		.typeASTText$ = \"-\"\n"
"		if .type > 0\n"
"			.typeASTText$ = \"'.type'\"\n"
"		endif\n"
"		.subtext$ = .subtext$ + .astText$ + \": \" + .typeASTText$\n"
"		.typeCompText$ = \"-\"\n"
"		if predictedPathType > 0\n"
"			.typeCompText$ = \"'predictedPathType:1'\"\n"
"		endif\n"
"		.subtext$ = .subtext$ + \", \" + .astCompText$ + \": \" + .typeCompText$\n"
"	endif\n"
"	\n"
"	# Ratings\n"
"	call rating_String 'speakerID$'\n"
"	.subtext$ = .subtext$ + rating_String.subtext$\n"
"	\n"
"	# Print text\n"
"	call points_to_wc 11\n"
"	.y -= points_to_wc.wc/2\n"
"	do(\"Text special...\", .x, \"centre\", .y, \"half\", \"Helvetica\", 11, \"0\",  .subtext$)	\n"
"	\n"
"	# Waveform\n"
"	call get_printsignal_text 'config.language$' Waveform\n"
"	.labelText$ = get_printsignal_text.text$\n"
"	.duration = selectedEndTime - selectedStartTime\n"
"	\n"
"	@PrintSoundObject(.plotWidth, .plotyTop + 0.1, .plotHeight, .labelText$ + \" ('.duration:3's)\")\n"
"	# Select 0.1 second from the center\n"
"	.start = (selectedEndTime + selectedStartTime)/2 - 0.05\n"
"	.end = (selectedEndTime + selectedStartTime)/2 + 0.05\n"
"	@draw_SelectionLines (.plotWidth, .plotyTop + 0.1, .plotHeight, .start, .end)\n"
"\n"
"	# Waveform (selection)\n"
"	call get_printsignal_text 'config.language$' Waveform\n"
"	.labelText$ = get_printsignal_text.text$\n"
"	call get_printsignal_text 'config.language$' seconds\n"
"	.secondsText$ = get_printsignal_text.text$\n"
"\n"
"	# Switch to 0.1 second\n"
"	.oldSelectedStartTime = selectedStartTime\n"
"	.oldSelectedEndTime = selectedEndTime\n"
"	selectedStartTime = .start\n"
"	selectedEndTime = .end\n"
"	.duration = selectedEndTime - selectedStartTime\n"
"\n"
"	.plotyTop += .plotHeight\n"
"	@PrintSoundObject(.plotWidth, .plotyTop, .plotHeight, .labelText$ + \" '.duration:1' \" + .secondsText$)\n"
"	\n"
"	# Switch back to original selection\n"
"	selectedStartTime = .oldSelectedStartTime\n"
"	selectedEndTime = .oldSelectedEndTime\n"
"	\n"
"	# Spectrogram\n"
"	call get_printsignal_text 'config.language$' Spectrogram\n"
"	.labelText$ = get_printsignal_text.text$\n"
"	.plotyTop += .plotHeight\n"
"	@PrintSpectrogramObject (.plotWidth, .plotyTop, .plotHeight, .labelText$)\n"
"	@PrintVoicingBar (.plotWidth, .plotyTop, .plotHeight, .labelText$)\n"
"\n"
"	# Pitch\n"
"	call get_printsignal_text 'config.language$' Pitch\n"
"	.labelText$ = get_printsignal_text.text$\n"
"	.plotyTop += .plotHeight\n"
"	@PrintPitchObject (.plotWidth, .plotyTop, .plotHeight, .labelText$)\n"
"\n"
"	# Ltas\n"
"	call get_printsignal_text 'config.language$' Ltas\n"
"	.labelText$ = get_printsignal_text.text$\n"
"	.plotyTop += .plotHeight\n"
"	@PrintLtasObject (.plotWidth, .plotyTop, .plotHeight, .labelText$)\n"
"\n"
"	# Write to file\n"
"	.plotyTop += .plotHeight\n"
"	do(\"Select outer viewport...\", 0, 7.27, 0, 10.69)\n"
"	if config.saveFMT$ = \"EPS\" and .outExtension$ <> \"eps\"\n"
"		do(\"Save as '.outEPSFileType$'...\", \"'.outFileName$'.'.outEPSExtension$'\")\n"
"	endif\n"
"	do(\"Save as '.outFileType$'...\", \"'.outFileName$'.'.outExtension$'\")\n"
"\n"
"	# Reset draw\n"
"	mainPage.outputPraatObject$ = \"Draw\"\n"
"	# Reset changed settings\n"
"	config.showFormants = .currentShowFormants\n"
"endproc\n"
"\n"
"# Print selected waveform or total file\n"
"procedure PrintSoundObject (.plotWidth, .plotyTop, .plotHeight, .labelText$)\n"
"	if recordedSound$ <> \"\"\n"
"		select te.openSound\n"
"		.minimum = Get minimum... 0 0 None\n"
"		.maximum = Get maximum... 0 0 None\n"
"		if not (.minimum = undefined or .maximum = undefined)\n"
"			if .minimum = .maximum			\n"
"				.minimum -= 1\n"
"				.maximum += 1\n"
"			endif\n"
"			\n"
"			# Get label of X-axis\n"
"			call get_printsignal_text 'config.language$' time\n"
"			.xaxisLabel$ = get_printsignal_text.text$\n"
"			\n"
"			# Draw\n"
"			select te.openSound\n"
"			Helvetica\n"
"			Font size... 10\n"
"			do(\"Select outer viewport...\", 0.5, .plotWidth, .plotyTop, .plotyTop+.plotHeight)\n"
"			do (\"Draw...\", selectedStartTime, selectedEndTime, 0, 0, \"no\", \"Curve\")\n"
"			do (\"Draw inner box\")\n"
"			@leftMarks (.minimum, .maximum, \"\")\n"
"			@bottomMarks (selectedStartTime, selectedEndTime, \"yes\", .xaxisLabel$)\n"
"			\n"
"			Helvetica\n"
"			Font size... 14\n"
"			do(\"Viewport text...\", \"Left\", \"Top\", 0, .labelText$)\n"
"			Font size... 10\n"
"		endif\n"
"	endif\n"
"endproc\n"
"\n"
"procedure PrintSpectrogramObject (.plotWidth, .plotyTop, .plotHeight, .labelText$)\n"
"\n"
"	if recordedSound$ <> \"\" and te.spectrogram = 0\n"
"		# Check for cached analysis file\n"
"		if config.useCache > 0 and variableExists(\"currentDirectoryName$\")\n"
"			createDirectory(\"'currentDirectoryName$''localCacheDir$'\")\n"
"		endif\n"
"		if config.useCache >= 0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Spectrogram\")\n"
"			te.spectrogram = Read from file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Spectrogram\n"
"		else\n"
"			select te.openSound\n"
"			.currentSampleFrequency = Get sampling frequency\n"
"			.nyquistFrequency = .currentSampleFrequency / 2\n"
"			te.spectrogram = noprogress To Spectrogram... 0.1 '.nyquistFrequency' 0.001 10 Gaussian\n"
"			# Write file to cache\n"
"			if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"				Save as binary file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Spectrogram\n"
"			endif\n"
"		endif\n"
"		spectrogramName$ = selected$(\"Spectrogram\")\n"
"		if config.useCache >= 0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Formant\")\n"
"			te.formant = Read from file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Formant\n"
"		else\n"
"			select te.openSound\n"
"			te.formant = noprogress To Formant (burg)... 0.02 4 4400 0.1 50\n"
"			# Write file to cache\n"
"			if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"				Save as binary file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Formant\n"
"			endif\n"
"		endif\n"
"		\n"
"		formantName$ = selected$(\"Formant\")\n"
"	endif\n"
"\n"
"	if te.spectrogram > 0 and not noDrawingOrWriting\n"
"		call calcMaxHarmonicity te.openSound\n"
"		maxHarmonicity = calcMaxHarmonicity.value\n"
"		.hnrValuesText$ = \"HNR__max_: 'maxHarmonicity:2'dB\"\n"
"	\n"
"		# Get label of X&Y-axes\n"
"		call get_printsignal_text 'config.language$' time\n"
"		.xaxisLabel$ = get_printsignal_text.text$\n"
"		call get_printsignal_text 'config.language$' Hz\n"
"		.yaxisLabel$ = get_printsignal_text.text$\n"
"\n"
"		select te.spectrogram\n"
"	\n"
"		do(\"Select outer viewport...\", 0.5, .plotWidth, .plotyTop, .plotyTop+.plotHeight)\n"
"		if .labelText$ = \"\"\n"
"			.labelText$ = \"Spectrogram\"\n"
"		endif\n"
"		Helvetica\n"
"		do(\"Paint...\", selectedStartTime, selectedEndTime, 0, config.frequency, 80, \"no\", 70, 6, 0, \"no\")\n"
"		if config.showFormants > 0\n"
"			do(\"Colour...\", \"Maroon\")\n"
"			select te.formant\n"
"			do(\"Speckle...\", currentStartTime, currentEndTime, config.frequency, 25, \"no\")\n"
"			do(\"Colour...\",  \"Black\")\n"
"		endif\n"
"		do (\"Draw inner box\")\n"
"		@leftMarks (0, config.frequency, .yaxisLabel$)\n"
"		@bottomMarks (selectedStartTime, selectedEndTime, \"yes\", .xaxisLabel$)\n"
"		Font size... 14\n"
"		do(\"Viewport text...\", \"Left\", \"Top\", 0, .labelText$)\n"
"		Font size... 11\n"
"		do(\"Viewport text...\", \"Right\", \"Top\", 0, newline$+.hnrValuesText$+\" \")\n"
"		Font size... 10\n"
"	endif\n"
"endproc\n"
"\n"
"procedure PrintVoicingBar (.plotWidth, .plotyTop, .plotHeight, .labelText$)\n"
"	if te.openSound > 0 and te.voicingTextGrid = 0\n"
"		call calculatePitchValues\n"
"	endif\n"
"	\n"
"	if te.voicingTextGrid > 0\n"
"		do(\"Select outer viewport...\", 0.5, .plotWidth, .plotyTop, .plotyTop+.plotHeight)\n"
"		do(\"Axes...\", selectedStartTime, selectedEndTime, 0, 1)\n"
"		select te.voicingTextGrid\n"
"		.numIntervals = Get number of intervals... 1\n"
"		for .interval to .numIntervals\n"
"			select te.voicingTextGrid\n"
"			.label$ = Get label of interval... 1 '.interval'\n"
"			if .label$ = \"V\"\n"
"				.start = Get start point... 1 '.interval'\n"
"				.end = Get end point... 1 '.interval'\n"
"				.duration = .end - .start\n"
"				# Interval is in window\n"
"				if .start < selectedEndTime and .end > selectedStartTime\n"
"				    do(\"Colour...\", te.voicingcolor$)\n"
"				    do(\"Line width...\", 1)\n"
"				    .botPoint = -0.03\n"
"				    .leftPoint = max(.start, selectedStartTime)\n"
"				    .rightPoint = min(.end, selectedEndTime)\n"
"					do(\"Draw line...\", .leftPoint, .botPoint, .rightPoint, .botPoint)\n"
"				    do(\"Line width...\", defaultLineWidth)\n"
"				    \n"
"				    # Print label\n"
"					call get_feedback_text 'config.language$' VoicingMarker\n"
"					.voicingText$ = get_feedback_text.text$\n"
"					.voiceMarkerPositionX = selectedStartTime -(selectedEndTime - selectedStartTime)/11\n"
"					.voiceMarkerPositionY = .botPoint - 0.02\n"
"					do(\"Text special...\", .voiceMarkerPositionX, \"Left\", .voiceMarkerPositionY, \"Top\", \"Helvetica\", 11, \"0\", .voicingText$)\n"
"				    do(\"Colour...\", \"Black\")\n"
"				    \n"
"				endif\n"
"			endif\n"
"			\n"
"		endfor\n"
"	endif\n"
"endproc\n"
"\n"
"procedure PrintPitchObject (.plotWidth, .plotyTop, .plotHeight, .labelText$)\n"
"\n"
"	if te.openSound > 0 and te.pitch = 0\n"
"		# Check for cached analysis file\n"
"		if config.useCache > 0 and variableExists(\"currentDirectoryName$\")\n"
"			createDirectory(\"'currentDirectoryName$''localCacheDir$'\")\n"
"		endif\n"
"		if config.useCache >= 0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Pitch\")\n"
"			te.pitch = Read from file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Pitch\n"
"		else\n"
"			call to_pitch te.openSound\n"
"			# Write file to cache\n"
"			if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"				Save as binary file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Pitch\n"
"			endif\n"
"		endif\n"
"		pitchName$ = selected$(\"Pitch\")\n"
"		minPitch = Get minimum... 0 0 Hertz Parabolic\n"
"		minPitch = floor(minPitch)\n"
"		maxPitch = Get maximum... 0 0 Hertz Parabolic\n"
"		maxPitch = ceiling(maxPitch)\n"
"		if minPitch = undefined or maxPitch = undefined\n"
"			minPitch = 0\n"
"			maxPitch = 600\n"
"		endif\n"
"		To PointProcess\n"
"		pointProcessName$ = selected$(\"PointProcess\")\n"
"		te.voicingTextGrid = To TextGrid (vuv)... 0.2 0.1\n"
"	endif\n"
"	\n"
"	if te.pitch > 0 and not noDrawingOrWriting\n"
"		# Get Pitch values\n"
"		call calculatePitchValues\n"
"		.pitchValuesText$ = calculatePitchValues.shortText$\n"
"\n"
"		# Get label of X&Y-axes\n"
"		call get_printsignal_text 'config.language$' time\n"
"		.xaxisLabel$ = get_printsignal_text.text$\n"
"		call get_printsignal_text 'config.language$' Hz\n"
"		.yaxisLabel$ = get_printsignal_text.text$\n"
"\n"
"		select te.pitch\n"
"		do(\"Select outer viewport...\", 0.5, .plotWidth, .plotyTop, .plotyTop+.plotHeight)\n"
"		if .labelText$ = \"\"\n"
"			.labelText$ = \"Pitch\"\n"
"		endif\n"
"		Helvetica\n"
"		.lower = 20*(floor(minPitch/20))\n"
"		.upper = 20*(ceiling(maxPitch/20))\n"
"		do(\"Draw...\", selectedStartTime, selectedEndTime, .lower, .upper, \"no\")\n"
"		do (\"Draw inner box\")\n"
"		@leftMarks (.lower, .upper, .yaxisLabel$)\n"
"		@bottomMarks (selectedStartTime, selectedEndTime, \"yes\", .xaxisLabel$)\n"
"		Font size... 14\n"
"		do(\"Viewport text...\", \"Left\", \"Top\", 0, .labelText$)\n"
"		Font size... 11\n"
"		do(\"Viewport text...\", \"Right\", \"Top\", 0, newline$+.pitchValuesText$+\" \")\n"
"		Font size... 10\n"
"	endif\n"
"endproc\n"
"\n"
"procedure PrintLtasObject (.plotWidth, .plotyTop, .plotHeight, .labelText$)\n"
"\n"
"	if ltasName$ <> \"\"\n"
"		select Ltas 'ltasName$'\n"
"		Remove\n"
"		ltasName$ = \"\"\n"
"		te.Ltas = 0\n"
"	endif\n"
"	if recordedSound$ <> \"\"\n"
"		# Check for cached analysis file\n"
"		if config.useCache > 0 and variableExists(\"currentDirectoryName$\")\n"
"			createDirectory(\"'currentDirectoryName$''localCacheDir$'\")\n"
"		endif\n"
"		if config.useCache >= 0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'/'currentSoundName$'_'selectedStartTime:3'_'selectedEndTime:3'.Ltas\")\n"
"			te.Ltas = Read from file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'_'selectedStartTime:3'_'selectedEndTime:3'.Ltas\n"
"		else\n"
"			select te.openSound\n"
"			.tmpPartID = Extract part... 'selectedStartTime' 'selectedEndTime' rectangular 1.0 false\n"
"			Rename... TmpPart\n"
"			.tmpSpecID = noprogress To Spectrum... yes\n"
"			te.Ltas = noprogress To Ltas (1-to-1)\n"
"			select .tmpPartID\n"
"			plus .tmpSpecID\n"
"			Remove\n"
"			select te.Ltas\n"
"			# Write file to cache\n"
"			if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"				Save as binary file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'_'selectedStartTime:3'_'selectedEndTime:3'.Ltas\n"
"			endif\n"
"			\n"
"		endif\n"
"		ltasName$ = selected$(\"Ltas\")\n"
"		.minimum = -20\n"
"		.maximum = Get maximum... 0 0 None\n"
"	endif\n"
"	\n"
"	# Get Ltas values\n"
"	call calculateLtasValues\n"
"	.ltasValuesText$ = calculateLtasValues.shortText$\n"
"\n"
"	if ltasName$ <> \"\" and not noDrawingOrWriting\n"
"		# Get label of X&Y-axes\n"
"		call get_printsignal_text 'config.language$' Frequency\n"
"		.xaxisLabel$ = get_printsignal_text.text$\n"
"		call get_printsignal_text 'config.language$' SPL\n"
"		.yaxisLabel$ = get_printsignal_text.text$\n"
"\n"
"		select te.Ltas\n"
"		do(\"Select outer viewport...\", 0.5, .plotWidth, .plotyTop, .plotyTop+.plotHeight)\n"
"		if .labelText$ = \"\"\n"
"			.labelText$ = \"Ltas\"\n"
"		endif\n"
"		Helvetica\n"
"		.lower = 10*(floor(.minimum/10))\n"
"		.upper = 10*(ceiling(.maximum/10))\n"
"		do(\"Draw...\", 0, config.frequency, .lower, .upper, \"no\", \"Curve\")\n"
"		do (\"Draw inner box\")\n"
"		@leftMarks (-20, .upper, .yaxisLabel$ )\n"
"		@bottomMarks (0, config.frequency, \"yes\", .xaxisLabel$)\n"
"		Font size... 14\n"
"		do(\"Viewport text...\", \"Left\", \"Top\", 0, .labelText$)\n"
"		Font size... 11\n"
"		do(\"Viewport text...\", \"Right\", \"Top\", 0, newline$+.ltasValuesText$+\" \")\n"
"		Font size... 10\n"
"	endif\n"
"endproc\n"
"\n"
"procedure draw_SelectionLines (.plotWidth, .plotyTop, .plotHeight, .start, .end)\n"
"	do(\"Select outer viewport...\", 0.5, .plotWidth, .plotyTop, .plotyTop+.plotHeight)\n"
"	do(\"Axes...\", selectedStartTime, selectedEndTime, 0, 1)\n"
"	do(\"Colour...\", \"Blue\")\n"
"	do(\"Line width...\", 3)\n"
"	do(\"Draw line...\", .start, 0, .start, 1)\n"
"	do(\"Draw line...\", .end, 0, .end, 1)\n"
"	\n"
"	do(\"Line width...\", 1)\n"
"	do(\"Draw line...\", .start, 0, (.start+selectedStartTime)/2, -0.5)\n"
"	do(\"Draw line...\", .end, 0, (.end+selectedEndTime)/2, -0.5)\n"
"\n"
"	\n"
"	do(\"Colour...\", \"Black\")\n"
"	do(\"Line width...\", 1)\n"
"endproc\n"
"\n"
"procedure bottomMarks (.start, .end, .numbers$, .label$)\n"
"	.interval = .end - .start\n"
"	.scale = 10**(floor(log10(.interval))-1)/10\n"
"	if .interval/.scale > 30\n"
"		.scale *= 10\n"
"	endif\n"
"	if .interval/.scale > 20\n"
"		.scale *= 5\n"
"	endif\n"
"	if .interval/.scale > 15\n"
"		.scale *= 2\n"
"	endif\n"
"	\n"
"	Font size... 10\n"
"	do (\"Marks bottom every...\", 1, .scale, .numbers$, \"yes\", \"no\")\n"
"	do (\"Marks top every...\", 1, .scale, \"no\", \"yes\", \"no\")\n"
"	if .label$ <> \"\"\n"
"		Font size... 10\n"
"		do (\"Text bottom...\", \"yes\", .label$)\n"
"	endif\n"
"	Font size... 10\n"
"endproc\n"
"\n"
"procedure leftMarks (.low, .high, .label$)\n"
"	.interval = .high - .low\n"
"	.scale = 10**(floor(log10(.interval)))/10\n"
"	if .interval/.scale > 25\n"
"		.scale *= 10\n"
"	endif\n"
"	if .interval/.scale > 15\n"
"		.scale *= 5\n"
"	endif\n"
"	if .interval/.scale > 8\n"
"		.scale *= 2\n"
"	endif\n"
"	\n"
"	Font size... 10\n"
"	do (\"Marks left every...\", 1, .scale, \"yes\", \"yes\", \"no\")\n"
"	do (\"Marks right every...\", 1, .scale, \"no\", \"yes\", \"no\")\n"
"	if .label$ <> \"\"\n"
"		Font size... 10\n"
"		do (\"Text left...\", \"yes\", .label$)\n"
"	endif\n"
"	Font size... 10\n"
"endproc\n"
"\n"
"procedure i8n_date\n"
"	.date$ = date$()\n"
"	.dayOfWeek$ = left$(.date$, 3)\n"
"	.month$ = mid$(.date$, 5, 3)\n"
"	.year$ = right$(.date$, 4)\n"
"	.dayOfMonth$ = mid$(.date$, 9, 2)\n"
"	.time$ = mid$(.date$, 12, 8)\n"
"	.rest$ = right$(.date$, length(.date$)-7)\n"
"	# File stamp date\n"
"	\n"
"	# Get day of week\n"
"	call get_printsignal_text 'config.language$' '.dayOfWeek$'\n"
"	.i8n_dayOfWeek$ = get_printsignal_text.text$\n"
"	call get_printsignal_text 'config.language$' '.month$'\n"
"	.i8n_month$ = get_printsignal_text.text$\n"
"	call get_printsignal_text 'config.language$' num'.month$'\n"
"	.num_month$ = get_printsignal_text.text$\n"
"	.date$ = .i8n_dayOfWeek$ + \" \" + .i8n_month$ + .rest$\n"
"	# File stamp date\n"
"	.printDate$ = .year$+.num_month$+.dayOfMonth$+\"_\"+.time$\n"
"	.printDate$ = replace_regex$(.printDate$, \"[:]\", \"-\", 0)\n"
"	.printDate$ = replace_regex$(.printDate$, \"[ ]\", \"_\", 0)\n"
"endproc\n"
"\n"
"# Read feedback table and get keyed text\n"
"procedure get_printsignal_text .language$ .key$\n"
"	if not endsWith(printsignalTableName$, \"_'.language$'\")\n"
"		if printsignalTableName$ <> \"\"\n"
"			select Table 'printsignalTableName$'\n"
"			Remove\n"
"		endif\n"
"		call loadTable 'printsignalTablePrefix$'_'.language$'\n"
"		printsignalTableName$ = selected$(\"Table\")\n"
"	endif\n"
"	call findKey 'printsignalTableName$' '.key$'\n"
"	.row = findKey.row\n"
"	select Table 'printsignalTableName$'\n"
"	.text$ = Get value... '.row' Text\n"
"	# Expand variables, eg, 'praatVersion$'\n"
"	call expand_praat_variables '.text$'\n"
"	.text$ = expand_praat_variables.text$	\n"
"endproc\n"
"\n"
"\n"
"procedure set_draw_signal_button\n"
"	call Draw_button 'te.buttons$' Draw_'mainPage.draw$' 2\n"
"	if index(\" Ltas Rating \", \" 'mainPage.draw$' \") > 0 \n"
"		call Draw_button 'te.buttons$' Select 1\n"
"		call Draw_button 'te.buttons$' ToSelection 1\n"
"		call Draw_button 'te.buttons$' ZoomOut 1\n"
"		call Draw_button 'te.buttons$' ZoomIn 1\n"
"		call Draw_button 'te.buttons$' Next 1\n"
"		call Draw_button 'te.buttons$' Previous 1\n"
"	endif\n"
"	if config.muteOutput\n"
"		call Draw_button 'te.buttons$' Record 1\n"
"		call Draw_button 'te.buttons$' Play 1\n"
"	endif\n"
"endproc\n"
"\n"
"###############################################################\n"
"#\n"
"# Button Processing Routines\n"
"#\n"
"###############################################################\n"
"\n"
"\n"
"###############################################################\n"
"#\n"
"# Obligatory button Processing Routines\n"
"# \n"
"# These MUST be defined\n"
"#\n"
"###############################################################\n"
"\n"
"procedure processMainPageQuit .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"Quit\"\n"
"	call end_program\n"
"	call Draw_button '.table$' '.label$' 0\n"
"endproc\n"
"\n"
"procedure processMainPageRefresh .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"Refresh\"\n"
"	call init_window\n"
"	call Draw_button '.table$' '.label$' 0\n"
"endproc\n"
"\n"
"procedure processMainPageConfig .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"Config\"\n"
"	call config_page\n"
"	call Draw_button '.table$' '.label$' 0\n"
"endproc\n"
"\n"
"procedure processMainPageHelp .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"Help\"\n"
"	if runningCommandMode = 0\n"
"		call help_loop 'te.buttons$' init_window\n"
"	else\n"
"		te.skipNextStep = 1\n"
"	endif\n"
"	call Draw_button '.table$' '.label$' 0\n"
"endproc\n"
"\n"
"procedure processMainPageSave .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"Save\"\n"
"	call saveSound '.table$' '.label$'\n"
"	call Draw_button '.table$' '.label$' 0\n"
"endproc\n"
"\n"
"procedure processMainPagePlay .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"Play\"\n"
"	call play_sound 'te.openSound'\n"
"	call Draw_button '.table$' '.label$' config.muteOutput\n"
"endproc\n"
"\n"
"procedure processMainPageSpeaker .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"Speaker\"\n"
"	# Get help text\n"
"	call findLabel '.table$' '.label$'\n"
"	.row = findLabel.row\n"
"	select Table '.table$'\n"
"	.helpText$ = Get value... '.row' Helptext\n"
"	call convert_praat_to_latin1 '.helpText$'\n"
"	.helpText$ = convert_praat_to_latin1.text$\n"
"	\n"
"	clicked = -1\n"
"	while clicked <> 5\n"
"		# The speaker Text\n"
"		.speakerID$ = \"ID\"\n"
"		.speakerIDDefault$ = speakerID$\n"
"		if .speakerIDDefault$ = \"\"\n"
"			call get_feedback_text 'config.language$' SpeakerID\n"
"			call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"			.speakerIDDefault$ = convert_praat_to_latin1.text$\n"
"		else\n"
"			call get_speakerInfo 'speakerID$'\n"
"			.currentRow = get_speakerInfo.row\n"
"			if .currentRow <= 0\n"
"				.currentRow = 1\n"
"			endif\n"
"			.speakerIDDefault$ = \"['.currentRow'] '.speakerIDDefault$'\"\n"
"		endif\n"
"		.speakerText$ = \"Speaker\"\n"
"		.speakerDefault$ = speakerInfo$\n"
"		if .speakerDefault$ = \"\"\n"
"			call get_feedback_text 'config.language$' SpeakerDefault\n"
"			call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"			.speakerDefault$ = convert_praat_to_latin1.text$\n"
"		endif\n"
"		# The comments\n"
"		call get_feedback_text 'config.language$' SpeakerComments\n"
"		call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"		.speakerCommentInput$ = convert_praat_to_latin1.text$\n"
"		if index_regex(speakerComments$, \"\\S\") <= 0\n"
"			.speakerCommentDef$ = .speakerCommentInput$\n"
"		else\n"
"			call convert_praat_to_latin1 'speakerComments$'\n"
"			.speakerCommentDef$ = convert_praat_to_latin1.text$\n"
"		endif\n"
"		.speakerCommentDef$ = replace_regex$(.speakerCommentDef$, \"\\n\", \"\\\\n\", 0)\n"
"\n"
"		# The rest\n"
"		call get_feedback_text 'config.language$' Cancel\n"
"		call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"		.cancelText$ = convert_praat_to_latin1.text$\n"
"		call get_feedback_text 'config.language$' Continue\n"
"		call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"		.continueText$ = convert_praat_to_latin1.text$\n"
"		call get_feedback_text 'config.language$' Next\n"
"		call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"		.nextText$ = convert_praat_to_latin1.text$\n"
"		call get_feedback_text 'config.language$' Previous\n"
"		call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"		.prevText$ = convert_praat_to_latin1.text$\n"
"		call get_feedback_text 'config.language$' Current\n"
"		call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"		.currentText$ = convert_praat_to_latin1.text$\n"
"		call get_feedback_text 'config.language$' SpeakerComments\n"
"		call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"		.buttonText$ = convert_praat_to_latin1.text$\n"
"		call get_feedback_text 'config.language$' SpeakerAudio\n"
"		call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"		.audioText$ = convert_praat_to_latin1.text$\n"
"\n"
"		# The user text input window (beginPause .... endPause)\n"
"		beginPause(.helpText$)\n"
"			text (.speakerID$, .speakerIDDefault$)\n"
"			text (.speakerText$, .speakerDefault$)\n"
"			text (.speakerCommentInput$, .speakerCommentDef$)\n"
"		clicked = endPause (\"'.audioText$'\", \"'.prevText$'\", \"'.currentText$'\", \"'.nextText$'\", \"'.continueText$'\", 5, 1)\n"
"		if clicked = 3 or clicked = 5\n"
"			# The text of the field name equals the name of the variable! That is, an indirection\n"
"			.speakerID$ = replace_regex$(.speakerID$, \".+\", \"\\l&\\$\", 0)\n"
"			.speakerText$ = replace_regex$(.speakerText$, \".+\", \"\\l&\\$\", 0)\n"
"			.speakerCommentInput$ = replace_regex$(.speakerCommentInput$, \".+\", \"\\l&\\$\", 0)\n"
"			.newSpeakerID$ = '.speakerID$'\n"
"			.newSpeakerInfo$ = '.speakerText$'\n"
"			.newSpeakerComments$ = '.speakerCommentInput$'\n"
"			if .newSpeakerInfo$ = .speakerDefault$ and .newSpeakerInfo$ <> speakerInfo$\n"
"				.newSpeakerInfo$ = \"\"\n"
"			endif\n"
"			if .newSpeakerComments$ = .speakerCommentDef$ and .newSpeakerComments$ <> speakerComments$\n"
"				.newSpeakerComments$ = \"\"\n"
"			endif\n"
"			.change_speakerdata = 0\n"
"			if .newSpeakerID$ = \"-\"\n"
"				#Delete record\n"
"				call delete_speakerData  'speakerID$'\n"
"				.newSpeakerID$ = delete_speakerData.speakerID$\n"
"			endif\n"
"			if .newSpeakerID$ <> .speakerIDDefault$\n"
"				.newSpeakerID$ = replace_regex$(.newSpeakerID$, \"^\\[\\d+\\]\\s+\", \"\", 0)\n"
"				speakerID$ = .newSpeakerID$\n"
"				call get_speakerInfo 'speakerID$'\n"
"				if get_speakerInfo.row > 0\n"
"					.newSpeakerID$ = get_speakerInfo.id$\n"
"					te.currentFileName$ = get_speakerInfo.audio$\n"
"					call load_audio_file '.newSpeakerID$' 'te.currentFileName$'\n"
"					call autoSetPathType\n"
"				else\n"
"					speakerID$ = .newSpeakerID$\n"
"					speakerInfo$ = .newSpeakerInfo$\n"
"					speakerComments$ = .newSpeakerComments$\n"
"				endif\n"
"				.change_speakerdata = 1\n"
"			else\n"
"				if index_regex(.newSpeakerInfo$, \"\\S\")\n"
"					speakerInfo$ = .newSpeakerInfo$\n"
"					.change_speakerdata = 1\n"
"				endif\n"
"				if index_regex(.newSpeakerComments$, \"\\S\")\n"
"					speakerComments$ = .newSpeakerComments$\n"
"					.change_speakerdata = 1\n"
"				endif\n"
"			endif\n"
"			# Store changes\n"
"			if .change_speakerdata > 0\n"
"				call WriteSpeakerData\n"
"			endif\n"
"		elsif clicked = 1\n"
"			call get_feedback_text 'config.language$' SpeakerAudio\n"
"			call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"			.openDialogue$ = convert_praat_to_latin1.text$\n"
"			.filename$ = chooseReadFile$ (.openDialogue$)\n"
"			if .filename$ <> \"\"\n"
"				te.currentFileName$ = .filename$\n"
"				call load_audio_file 'speakerID$' 'te.currentFileName$'\n"
"				call autoSetPathType\n"
"				te.currentFileName$ = .filename$\n"
"				call WriteSpeakerData\n"
"			endif\n"
"		elsif clicked = 2\n"
"			call get_previousSpeaker 'speakerID$'\n"
"			if get_previousSpeaker.reset > 0\n"
"				call unload_RecordingTask\n"
"			endif\n"
"			.newSpeakerID$ = get_previousSpeaker.id$\n"
"			te.currentFileName$ = get_previousSpeaker.audio$\n"
"			call load_audio_file '.newSpeakerID$' 'te.currentFileName$'\n"
"			call autoSetPathType\n"
"		elsif clicked = 4\n"
"			call get_nextSpeaker 'speakerID$'\n"
"			if get_nextSpeaker.reset > 0\n"
"				call unload_RecordingTask\n"
"			endif\n"
"			.newSpeakerID$ = get_nextSpeaker.id$\n"
"			te.currentFileName$ = get_nextSpeaker.audio$\n"
"			call load_audio_file '.newSpeakerID$' 'te.currentFileName$'\n"
"			call autoSetPathType\n"
"		endif\n"
"		if clicked = 3\n"
"			call ReadSpeakerData 'config.speakerData$'\n"
"			if config.speakerDataTable > 0\n"
"				select config.speakerDataTable\n"
"				.tmpDataTable = Copy... Speaker_Data\n"
"			else\n"
"				.tmpDataTable = Create Table with column names... Speaker_Data 1 ID Text Description Audio AST\n"
"			endif\n"
"			select .tmpDataTable\n"
"			View & Edit\n"
"			demoWaitForInput()\n"
"			# Table can not be edited in List, so discard it\n"
"			select .tmpDataTable\n"
"			Remove\n"
"		endif\n"
"	endwhile\n"
"	call Draw_button '.table$' '.label$' 0\n"
"endproc\n"
"\n"
"procedure processMainPageNextItem .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"NextItem\"\n"
"\n"
"	# Check whether this is the last speaker in the list\n"
"	call get_speakerInfo 'speakerID$'\n"
"	.previousRow = get_speakerInfo.row\n"
"	\n"
"	call get_nextSpeaker 'speakerID$'\n"
"	.currentRow = get_nextSpeaker.row\n"
"	\n"
"	# If currentRow < previousRow, you start over. Show a message\n"
"	if .currentRow <= .previousRow\n"
"		# Do not bother with warning if there is only a single item\n"
"		if get_nextSpeaker.numRows > 1\n"
"			call get_feedback_text 'config.language$' Ready\n"
"			call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"			.readyText$ = convert_praat_to_latin1.text$\n"
"			call write_text_popup Helvetica 20 '.readyText$'\n"
"			demoWaitForInput()\n"
"		endif\n"
"		# Get rid of speaker table in running recording task\n"
"		if te.recordingTaskTable > 0\n"
"			call unload_RecordingTask\n"
"		endif\n"
"	endif\n"
"	\n"
"	# This was the first reference to a speaker, get first empty pos\n"
"	if speakerID$ = \"\" and config.speakerDataTable > 0\n"
"		select config.speakerDataTable\n"
"		.numRows = Get number of rows\n"
"		.numCols = Get number of columns\n"
"		if mainPage.draw$ = \"Rating\"\n"
"			.firstRow = 0\n"
"			for .c to .numCols\n"
"				select config.speakerDataTable\n"
"				.currentColLabel$ = Get column label... '.c'\n"
"				if startsWith(.currentColLabel$, \"Rating.\")\n"
"					.r = 1\n"
"					.f = 0\n"
"					while .r <= .numRows and .f = 0\n"
"						.currentValue$ = Get value... '.r' '.currentColLabel$'\n"
"						if index(.currentValue$, \";\")\n"
"							.f = .r\n"
"						endif\n"
"						.r += 1\n"
"					endwhile\n"
"					if .f < .firstRow or .firstRow < 1\n"
"						.firstRow = .f\n"
"					endif\n"
"				endif\n"
"			endfor\n"
"			if .firstRow > 0 and .firstRow <=  .numRows\n"
"				.firstRow -= 1				\n"
"			endif\n"
"			if .firstRow > 0 and .firstRow <=  .numRows\n"
"				speakerID$ = Get value... '.firstRow' ID\n"
"			else\n"
"				call get_speakerInfo 0\n"
"			endif\n"
"		elsif te.useAnnotationInterface\n"
"			# Code to start speaker data tables at first empty position\n"
"			# Has to be handled by a Configuration settings\n"
"			.astCol = Get column index... AST\n"
"			.colLabel$ = Get column label... .numCols\n"
"			.ast_row = 0\n"
"			.last_row = 0\n"
"			.i = 1\n"
"			# Iterate over all \n"
"			for .i to .numRows\n"
"				.lastValue$ = Get value... '.i' '.colLabel$'\n"
"				if length(.lastValue$) > 0 and index_regex(.lastValue$, \"[^?\\-\\s]\") > 0\n"
"					.last_row = .i\n"
"				endif\n"
"				.astValue$ = Get value... '.i' AST\n"
"				if length(.astValue$) > 0 and index_regex(.astValue$, \"[^?\\-\\s]\") > 0\n"
"					.ast_row = .i\n"
"				endif\n"
"			endfor\n"
"			if .ast_row > 0 and .ast_row <  .numRows\n"
"				speakerID$ = Get value... '.ast_row' ID\n"
"			elsif .last_row > 0 and .last_row <  .numRows\n"
"				speakerID$ = Get value... '.last_row' ID\n"
"			endif\n"
"		endif\n"
"		call get_nextSpeaker 'speakerID$'\n"
"	endif\n"
"	.newSpeakerID$ = get_nextSpeaker.id$\n"
"	.newFileName$ = get_nextSpeaker.audio$\n"
"	call reset_analysis\n"
"	speakerID$ = .newSpeakerID$\n"
"	te.currentFileName$ = .newFileName$\n"
"	if te.currentFileName$ <> \"\"\n"
"		call load_audio_file 'speakerID$' 'te.currentFileName$'\n"
"	else\n"
"		call set_new_speakerdata 'speakerID$'\n"
"		call init_window\n"
"	endif\n"
"	call autoSetPathType\n"
"	if config.speakerSerial$ = \"Backw\"\n"
"		call Draw_button '.table$' PreviousItem 0\n"
"	elsif config.speakerSerial$ = \"Forw\"\n"
"		call Draw_button '.table$' NextItem 0\n"
"	endif\n"
"endproc\n"
"\n"
"procedure processMainPagePreviousItem .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"PreviousItem\"\n"
"\n"
"	# Check whether this is the first speaker in the list\n"
"	call get_speakerInfo 'speakerID$'\n"
"	.nextRow = get_speakerInfo.row\n"
"	\n"
"	call get_previousSpeaker 'speakerID$'\n"
"	.currentRow = get_previousSpeaker.row\n"
"	\n"
"	# If currentRow > previousRow, you start over. Show a message\n"
"	if .nextRow > 0 and .currentRow >= .nextRow\n"
"		# Do not bother with warning if there is only a single item\n"
"		if get_previousSpeaker.numRows > 1\n"
"			call get_feedback_text 'config.language$' Ready\n"
"			call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"			.readyText$ = convert_praat_to_latin1.text$\n"
"			call write_text_popup Helvetica 20 '.readyText$'\n"
"			demoWaitForInput()\n"
"		endif\n"
"		# Get rid of speaker table in running recording task\n"
"		if te.recordingTaskTable > 0\n"
"			call unload_RecordingTask\n"
"		endif\n"
"	endif\n"
"	\n"
"	.newSpeakerID$ = get_previousSpeaker.id$\n"
"	.newFileName$ = get_nextSpeaker.audio$\n"
"	call reset_analysis\n"
"	speakerID$ = .newSpeakerID$\n"
"	te.currentFileName$ = .newFileName$\n"
"	if te.currentFileName$ <> \"\"\n"
"		call load_audio_file 'speakerID$' 'te.currentFileName$'\n"
"	else\n"
"		call set_new_speakerdata 'speakerID$'\n"
"		call init_window\n"
"	endif\n"
"	call autoSetPathType\n"
"	if config.speakerSerial$ = \"Backw\"\n"
"		call Draw_button '.table$' PreviousItem 0\n"
"	elsif config.speakerSerial$ = \"Forw\"\n"
"		call Draw_button '.table$' NextItem 0\n"
"	endif\n"
"endproc\n"
"\n"
"procedure processMainPageFile .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"File\"\n"
"	# Get help text\n"
"	call findLabel '.table$' '.label$'\n"
"	.row = findLabel.row\n"
"	select Table '.table$'\n"
"	.helpText$ = Get value... '.row' Helptext\n"
"	\n"
"	call getOpenFile '.helpText$'\n"
"	call set_new_speakerdata -\n"
"	call post_processing_sound\n"
"	\n"
"	# Reset button\n"
"	call Draw_button '.table$' '.label$' 0\n"
"\n"
"	# Get first item and Draw using the NextItem button\n"
"	if config.speakerDataTable <= 0 and config.speakerData$ <> \"\" and fileReadable(config.speakerData$)\n"
"		# New speaker table read\n"
"		call ReadSpeakerData 'config.speakerData$'\n"
"		call processMainPageNextItem 0 0 x\n"
"		# Search first empty row\n"
"		if config.speakerDataTable > 0 and speakerID$ <> \"\" and speakerID$ <> \"0\"\n"
"			selectObject: config.speakerDataTable\n"
"			.numColumns = Get number of columns\n"
"			.numRows = Get number of rows\n"
"			.first = 1\n"
"			if .numColumns > 4\n"
"				for .c from 5 to .numColumns\n"
"					.cLabel$ = Get column label: .c\n"
"					.r = Search column: .cLabel$, \"?\"\n"
"					if .r > .first\n"
"						.first = .r\n"
"					endif\n"
"				endfor\n"
"			endif\n"
"			if .first < .numRows\n"
"				speakerID$ = Get value: .first, \"ID\"\n"
"			endif\n"
"		endif\n"
"	else\n"
"		call WriteSpeakerData\n"
"		call init_window\n"
"	endif\n"
"endproc	\n"
"\n"
"procedure processMainPageReadFromFile .filename$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"ReadFromFile\"\n"
"	\n"
"	call readFromFile '.filename$'\n"
"	# Draw\n"
"	call init_window\n"
"endproc\n"
"\n"
"procedure processMainPageRecord .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"Record\"\n"
"	\n"
"	if not config.muteOutput\n"
"		if runningCommandMode = 0\n"
"			# If there is an active task, initialize recording\n"
"			if te.recordingTaskTable <= 0 and config.recordingTaskFile$ <> \"\"\n"
"				call setup_recordingTask\n"
"				if setup_recordingTask.skiprecording > 0\n"
"					goto SKIPRECORDING\n"
"				endif\n"
"			endif\n"
"	    	call record_sound\n"
"			call post_processing_sound\n"
"			# The old ratings should be wiped!!!!\n"
"			call set_new_speakerdata 'speakerID$'\n"
"		else\n"
"			# This is a global variable\n"
"			te.skipNextStep = 1\n"
"		endif\n"
"		# Reset button\n"
"		call Draw_button '.table$' '.label$' 0\n"
"		# Draw\n"
"		label SKIPRECORDING\n"
"		call init_window\n"
"	endif\n"
"endproc\n"
"\n"
"procedure processMainPagePathologicalType .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"!PathologicalType\"\n"
"	if index_regex(.pressed$, \"[0-4,9]\") > 0\n"
"		call setPathType '.pressed$'\n"
"		call init_window\n"
"	endif\n"
"endproc\n"
"\n"
"# Process Sound Speech\n"
"procedure post_processing_sound\n"
"	# Analyze Pitch in Serial step mode or with config.autoSelect\n"
"	if (config.speakerSerial$ <> \"None\" or config.autoSelect) and index(\" Ltas Rating \", \" 'mainPage.draw$' \") <= 0\n"
"		# Supress drawing, but set up Pitch parameters\n"
"		.tmp = noDrawingOrWriting\n"
"		noDrawingOrWriting = 1\n"
"		call DrawPitchObject\n"
"		noDrawingOrWriting = .tmp\n"
"	endif\n"
"endproc\n"
"\n"
"procedure processMainPageDraw .type$ .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"Draw_'.type$'\"\n"
"	mainPage.draw$ = .type$\n"
"	call init_window\n"
"endproc\n"
"\n"
"procedure processMainPageToSelection .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"ToSelection\"\n"
"	if index(\" Ltas Rating \", \" 'mainPage.draw$' \") > 0\n"
"		call Draw_button 'te.buttons$' '.label$' 1\n"
"		goto ENDOFTOSELECTION\n"
"	endif\n"
"	if currentStartTime <= 0 and currentEndTime <= 0\n"
"    	call Draw_button '.table$' '.label$' 0\n"
"		goto ENDOFTOSELECTION\n"
"	endif\n"
"	currentStartTime = selectedStartTime\n"
"	currentEndTime = selectedEndTime\n"
"	call Draw_button 'te.buttons$' '.label$' 0\n"
"	call init_window\n"
"	label ENDOFTOSELECTION\n"
"endproc\n"
"\n"
"procedure processMainPageSelect .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"Select\"\n"
"	\n"
"	if index(\" Ltas Rating \", \" 'mainPage.draw$' \") > 0\n"
"		call Draw_button 'te.buttons$' '.label$' 1\n"
"		goto ENDOFSELECT\n"
"	endif\n"
"	\n"
"	call get_feedback_text 'config.language$' Select1\n"
"	.feedback2$ = get_feedback_text.text$\n"
"	call reset_viewport\n"
"	call write_feedback_text Blue '.feedback2$'\n"
"	demoWaitForInput()\n"
"	.clickX = -1\n"
"	.clickY = -1\n"
"	.pressed$ = \"\"\n"
"	if demoClicked()\n"
"		.clickX = demoX()\n"
"		.clickY = demoY()\n"
"	elsif demoKeyPressed()\n"
"		.pressed$ = demoKey$()\n"
"	endif\n"
"	call processMainPageCANVAS '.clickX' '.clickY' '.pressed$'\n"
"	label ENDOFSELECT\n"
"endproc\n"
"\n"
"procedure processMainPageCANVAS .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"CANVAS\"\n"
"    .xL = canvasXL + canvasLeftCorrection\n"
"    .xR = canvasXR + canvasRightCorrection\n"
"    .yL = canvasYL\n"
"    .yH = canvasYH\n"
"	.firstT = -1\n"
"	.secondT = -1\n"
"	\n"
"	# Handle stuff that should be done before the button is set\n"
"	call buttonClicked '.table$' '.clickX' '.clickY'\n"
"	if mainPage.draw$ = \"Ltas\"\n"
"		goto ESCAPEDISPLAYSELECT\n"
"	elsif mainPage.draw$ = \"Rating\"\n"
"		if te.ratingTable\n"
"			select te.ratingTable\n"
"			te.rating$ = selected$(\"Table\")\n"
"			call buttonClicked 'te.rating$' '.clickX' '.clickY'\n"
"			if buttonClicked.label$ = \"Help\"\n"
"				call Draw_button 'te.rating$' 'buttonClicked.label$' 1\n"
"				if runningCommandMode = 0\n"
"					call help_loop 'te.rating$' init_window\n"
"				endif\n"
"				call Draw_button 'te.rating$' 'buttonClicked.label$' 0\n"
"			elsif buttonClicked.label$ = \"!CANVAS\"\n"
"				# Ignore\n"
"			elsif startsWith(buttonClicked.label$, \">\")\n"
"				.labelRating$ = replace_regex$(buttonClicked.label$, \"^[^a-zA-Z]+([A-Za-z])\", \"\\l\\1\", 0)\n"
"				rating.'.labelRating$' = buttonClicked.fractionX\n"
"\n"
"				call set_RatingValues config.speakerDataTable Rating.'.labelRating$' 'buttonClicked.fractionX'\n"
"				call get_RatingValues 'config.speakerDataTable' 'te.ratingTable'\n"
"	\n"
"				.fractionYRating = buttonClicked.fractionY\n"
"				call Draw_button_internal 1 'te.rating$' 'buttonClicked.label$' 0\n"
"				call link_RatingValues 'te.ratingTable' 'config.speakerDataTable' 'buttonClicked.label$'\n"
"			elsif index(buttonClicked.label$, \"_\")\n"
"				.labelPrefix$ = \"\"\n"
"				.labelRating$ = buttonClicked.label$\n"
"				.value$ = replace_regex$(buttonClicked.label$, \"^[^_]*_(.*)$\", \"\\1\", 0)\n"
"				if startsWith(buttonClicked.label$, \"()\")\n"
"					.labelPrefix$ = replace_regex$(.labelRating$, \"^([^a-zA-Z]+).*$\", \"\\1\", 0)\n"
"					.labelRating$ = replace_regex$(.labelRating$, \"^[^a-zA-Z]+\", \"\", 0)\n"
"				endif\n"
"				.labelRating$ = replace_regex$(.labelRating$, \"^([^_]*)_.*$\", \"\\l\\1\", 0)\n"
"				if variableExists(\"rating.'.labelRating$'$\")\n"
"					.pressed$ = rating.'.labelRating$'$\n"
"					.labelRatingName$ = replace_regex$(.labelRating$, \"^([A-Za-z])\", \"\\u\\1\", 0)\n"
"					call Draw_button_internal 1 'te.rating$' '.labelPrefix$''.labelRatingName$'_'.pressed$' 0\n"
"				endif\n"
"				call set_RawRatingValues config.speakerDataTable Rating.'.labelRating$' '.value$'\n"
"				call get_RatingValues 'config.speakerDataTable' 'te.ratingTable'\n"
"				if variableExists(\"rating.'.labelRating$'$\")\n"
"					.pressed$ = rating.'.labelRating$'$\n"
"					.labelRatingName$ = replace_regex$(.labelRating$, \"^([A-Za-z])\", \"\\u\\1\", 0)\n"
"					call Draw_button_internal 1 'te.rating$' '.labelPrefix$''.labelRatingName$'_'.pressed$' 2\n"
"				endif\n"
"			endif\n"
"		endif\n"
"		goto ESCAPEDISPLAYSELECT\n"
"	endif\n"
"	\n"
"	# Set button \n"
"	call Draw_button '.table$' Select 2\n"
"	if runningCommandMode = 1\n"
"		# Do nothing\n"
"		te.skipNextStep = 1\n"
"		goto ENDOFDISPLAYSELECT\n"
"	elsif demoKeyPressed() or buttonClicked.label$ = \"Select\"\n"
"		.firstT = -1\n"
"		.secondT = -1\n"
"		call init_window\n"
"		call Draw_button '.table$' Select 2\n"
"		goto ENDOFDISPLAYSELECT\n"
"	elsif currentStartTime <= 0 and currentEndTime <= 0\n"
"		goto ENDOFDISPLAYSELECT\n"
"	elsif .clickX < .xL or .clickX > .xR\n"
"		goto ESCAPEDISPLAYSELECT\n"
"	elsif .clickY < .yL or .clickX > .yH\n"
"		goto ESCAPEDISPLAYSELECT\n"
"	endif\n"
"	# Redraw window if there is an old selection\n"
"	if selectionIsDrawn or selectedStartTime > currentStartTime or selectedEndTime < currentEndTime\n"
"		selectedStartTime = currentStartTime\n"
"		selectedEndTime = currentEndTime\n"
"		# Clean up de screen\n"
"		# New selections are entered, do not redraw the old ones\n"
"		noDrawingSelection = 1\n"
"		call init_window\n"
"		noDrawingSelection = 0\n"
"		selectionIsDrawn = 0\n"
"	endif\n"
"	# Get feedback text\n"
"	call get_feedback_text 'config.language$' Select2\n"
"	.feedback2$ = get_feedback_text.text$\n"
"	call reset_viewport\n"
"	call write_feedback_text Blue '.feedback2$'\n"
"	\n"
"	# Set first border\n"
"	.selectedTime = currentStartTime + (currentEndTime - currentStartTime)*(.clickX - .xL)/(.xR - .xL)\n"
"	demo Colour... Blue\n"
"	demo Line width... 2\n"
"	demo Draw line... '.clickX' '.yH' '.clickX' '.yL'\n"
"	demo Text special... '.clickX' Centre '.yH' Bottom Helvetica 10 0 '.selectedTime:4'\n"
"	demoShow()\n"
"	demo Colour... Black\n"
"	demo Line width... 'defaultLineWidth'\n"
"	if .firstT < 0 and .secondT < 0\n"
"		.firstT = .selectedTime\n"
"	endif\n"
"	\n"
"	call Draw_button '.table$' Select 2\n"
"	select te.openSound\n"
"	.soundLength = Get total duration\n"
"	# Set second border\n"
"	while demoWaitForInput()\n"
"		.clickX = -1\n"
"		.clickY = -1\n"
"		if demoClicked()\n"
"			.clickX = demoX()\n"
"			.clickY = demoY()\n"
"			if demoClickedIn (.xL, .xR, .yL, .yH)\n"
"				.selectedTime = currentStartTime + (currentEndTime - currentStartTime)*(.clickX - .xL)/(.xR - .xL)\n"
"				demo Colour... Blue\n"
"				demo Line width... 2\n"
"				demo Draw line... '.clickX' '.yH' '.clickX' '.yL'\n"
"				demo Text special... '.clickX' Centre '.yH' Bottom Helvetica 10 0 '.selectedTime:4'\n"
"				demoShow()\n"
"				demo Colour... Black\n"
"				demo Line width... 'defaultLineWidth'\n"
"				selectionIsDrawn = 1\n"
"				if .firstT < 0 and .secondT < 0\n"
"					.firstT = .selectedTime\n"
"					call write_feedback_text Blue '.feedback2$'\n"
"				else\n"
"					.secondT = .selectedTime\n"
"					call wipeArea 'wipeFeedbackArea$'\n"
"					goto ENDOFDISPLAYSELECT\n"
"				endif\n"
"			else\n"
"		    	call buttonClicked 'te.buttons$' '.clickX' '.clickY'\n"
"		    	if buttonClicked.label$ = \"Select\"\n"
"					.firstT = -1\n"
"					.secondT = -1\n"
"					call init_window\n"
"					call Draw_button '.table$' Select 2\n"
"					goto ENDOFDISPLAYSELECT\n"
"				endif\n"
"			endif\n"
"		elsif demoKeyPressed()\n"
"			.pressed$ = demoKey$()\n"
"			if index_regex(.pressed$, \"[-=_+]\") > 0\n"
"				.windowSize = config.selectionWindow\n"
"				if index_regex(.pressed$, \"[-_]\") > 0\n"
"					.windowSize = 1\n"
"				endif\n"
"				# Remove line\n"
"				noDrawingSelection = 1\n"
"				call init_window\n"
"				noDrawingSelection = 0\n"
"				call Draw_button '.table$' Select 2\n"
"				.firstT -= .windowSize / 2\n"
"				if .firstT <= 0\n"
"					.firstT = 0\n"
"				endif\n"
"				.secondT = .firstT + .windowSize\n"
"				if .secondT > .soundLength\n"
"					.secondT = .soundLength\n"
"					.firstT = .secondT - .windowSize\n"
"				endif\n"
"				selectionIsDrawn = 1\n"
"				goto ENDOFDISPLAYSELECT\n"
"			else\n"
"				.firstT = -1\n"
"				.secondT = -1\n"
"				call init_window\n"
"				call Draw_button '.table$' Select 2\n"
"				\n"
"				goto ENDOFDISPLAYSELECT\n"
"			endif\n"
"		endif\n"
"\n"
"	endwhile\n"
"	\n"
"	label ENDOFDISPLAYSELECT\n"
"	# Do things\n"
"	if .firstT >= 0 and .secondT >= 0\n"
"    	select te.openSound\n"
"		.soundLength = Get total duration\n"
"		selectedStartTime = min(.firstT, .secondT)\n"
"		selectedEndTime = max(.firstT, .secondT)\n"
"		if selectedStartTime < 0\n"
"			selectedStartTime = 0\n"
"		endif\n"
"		if selectedEndTime > .soundLength\n"
"			selectedEndTime = .soundLength\n"
"		endif\n"
"		call DrawCurrentSelection 0 1\n"
"		call Draw_button '.table$' Select 2\n"
"		call log_command MainPage SetSelection 'selectedStartTime' 'selectedEndTime' --\n"
"	endif\n"
"	call reset_viewport\n"
"	call Draw_button '.table$' Select 0\n"
"	\n"
"	label ESCAPEDISPLAYSELECT\n"
"endproc\n"
"\n"
"# Pseudo command for executing log commands\n"
"procedure processMainPageSetSelection .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"SetSelection\"\n"
"	selectedStartTime = min(.clickX, .clickY)\n"
"	selectedEndTime = max(.clickX, .clickY)\n"
"\n"
"	call DrawCurrentSelection 0 1\n"
"	call reset_viewport\n"
"endproc\n"
"\n"
"procedure processMainPageZoomOut .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"ZoomOut\"\n"
"	if index(\" Ltas Rating \", \" 'mainPage.draw$' \") > 0\n"
"		call Draw_button 'te.buttons$' ZoomOut 1\n"
"		goto ZOOMOUTESCAPE\n"
"	endif\n"
"	if currentStartTime <= 0 and currentEndTime <= 0\n"
"    	call Draw_button '.table$' '.label$' 0\n"
"		goto ZOOMOUTESCAPE\n"
"	endif\n"
"	.lockSelectionToWindow = selectedStartTime <= currentStartTime or selectedEndTime >= currentEndTime\n"
"	.currentInterval = currentEndTime - currentStartTime\n"
"	currentStartTime -= .currentInterval/2\n"
"	currentEndTime += .currentInterval/2\n"
"	\n"
"	.soundLength = 0\n"
"	if recordedSound$ <> \"\"\n"
"    	select te.openSound\n"
"		.soundLength = Get total duration\n"
"	endif\n"
"	if currentStartTime < 0\n"
"		currentStartTime = 0\n"
"	endif\n"
"	if currentEndTime > .soundLength\n"
"		currentEndTime = .soundLength\n"
"	endif\n"
"	if .lockSelectionToWindow\n"
"		selectedStartTime = currentStartTime\n"
"		selectedEndTime = currentEndTime\n"
"	endif\n"
"	call init_window\n"
"	\n"
"	label ZOOMOUTESCAPE\n"
"endproc\n"
"\n"
"procedure processMainPageZoomIn .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"ZoomIn\"\n"
"	if index(\" Ltas Rating \", \" 'mainPage.draw$' \") > 0\n"
"		call Draw_button 'te.buttons$' ZoomIn 1\n"
"		goto ZOOMINESCAPE\n"
"	endif\n"
"	if currentStartTime <= 0 and currentEndTime <= 0\n"
"    	call Draw_button '.table$' '.label$' 0\n"
"		goto ZOOMINESCAPE\n"
"	endif\n"
"	.currentInterval = currentEndTime - currentStartTime\n"
"	currentStartTime += .currentInterval/4\n"
"	currentEndTime -= .currentInterval/4\n"
"	# Reset selected times if needed\n"
"	if selectedStartTime <= currentStartTime\n"
"		selectedStartTime = currentStartTime\n"
"	endif\n"
"	if selectedEndTime >= currentEndTime\n"
"		selectedEndTime = currentEndTime\n"
"	endif\n"
"	\n"
"	call init_window\n"
"	\n"
"	label ZOOMINESCAPE\n"
"endproc\n"
"\n"
"procedure processMainPageNext .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"Next\"\n"
"	if index(\" Ltas Rating \", \" 'mainPage.draw$' \") > 0\n"
"		call Draw_button 'te.buttons$' Next 1\n"
"		goto NEXTESCAPE\n"
"	endif\n"
"	if currentStartTime <= 0 and currentEndTime <= 0\n"
"    	call Draw_button '.table$' '.label$' 0\n"
"		goto NEXTESCAPE\n"
"	endif\n"
"	.selectedInterval = selectedEndTime - selectedStartTime\n"
"	selectedStartTime = selectedEndTime\n"
"	selectedEndTime += .selectedInterval\n"
"	\n"
"	.soundLength = 0\n"
"	if recordedSound$ <> \"\"\n"
"    	select te.openSound\n"
"		.soundLength = Get total duration\n"
"	endif\n"
"	# Check boundaries\n"
"	if selectedStartTime < 0\n"
"		selectedStartTime = 0\n"
"		selectedEndTime = .selectedInterval\n"
"	endif\n"
"	if selectedEndTime > .soundLength\n"
"		selectedEndTime = .soundLength\n"
"		selectedStartTime = selectedEndTime - .selectedInterval\n"
"		if selectedStartTime < 0\n"
"			selectedStartTime = 0\n"
"		endif\n"
"	endif\n"
"	# Reset currentStart/EndTimes if the selection is outside the window\n"
"	.currentInterval = currentEndTime - currentStartTime\n"
"	if selectedStartTime < currentStartTime or selectedEndTime > currentEndTime\n"
"		.selectedMidpoint = (selectedEndTime + selectedStartTime)/2\n"
"		currentStartTime = .selectedMidpoint - .currentInterval / 2\n"
"		currentEndTime = .selectedMidpoint + .currentInterval / 2\n"
"	endif\n"
"	if currentStartTime < 0\n"
"		currentStartTime = 0\n"
"		currentEndTime = .currentInterval\n"
"	endif\n"
"	if currentEndTime > .soundLength\n"
"		currentEndTime = .soundLength\n"
"		currentStartTime = currentEndTime - .currentInterval\n"
"		if currentStartTime < 0\n"
"			currentStartTime = 0\n"
"		endif\n"
"	endif\n"
"\n"
"	call init_window\n"
"	\n"
"	label NEXTESCAPE\n"
"endproc\n"
"\n"
"procedure processMainPagePrevious .clickX .clickY .pressed$\n"
"	.table$ = \"MainPage\"\n"
"	.label$ = \"Previous\"\n"
"	if index(\" Ltas Rating \", \" 'mainPage.draw$' \") > 0\n"
"		call Draw_button 'te.buttons$' Previous 1\n"
"		goto PREVESCAPE\n"
"	endif\n"
"	if currentStartTime <= 0 and currentEndTime <= 0\n"
"    	call Draw_button '.table$' '.label$' 0\n"
"		goto PREVESCAPE\n"
"	endif\n"
"	.selectedInterval = selectedEndTime - selectedStartTime\n"
"	selectedEndTime = selectedStartTime\n"
"	selectedStartTime -= .selectedInterval\n"
"	\n"
"	.soundLength = 0\n"
"	if recordedSound$ <> \"\"\n"
"    	select te.openSound\n"
"		.soundLength = Get total duration\n"
"	endif\n"
"	if selectedStartTime < 0\n"
"		selectedStartTime = 0\n"
"		selectedEndTime = .selectedInterval\n"
"	endif\n"
"	if selectedEndTime > .soundLength\n"
"		selectedEndTime = .soundLength\n"
"		selectedStartTime = selectedEndTime - .selectedInterval\n"
"		if selectedStartTime < 0\n"
"			selectedStartTime = 0\n"
"		endif\n"
"	endif\n"
"	\n"
"	# Reset currentStart/EndTimes if the selection is outside the window\n"
"	.currentInterval = currentEndTime - currentStartTime\n"
"	if selectedStartTime < currentStartTime or selectedEndTime > currentEndTime\n"
"		.selectedMidpoint = (selectedEndTime + selectedStartTime)/2\n"
"		currentStartTime = .selectedMidpoint - .currentInterval / 2\n"
"		currentEndTime = .selectedMidpoint + .currentInterval / 2\n"
"	endif\n"
"	if currentStartTime < 0\n"
"		currentStartTime = 0\n"
"		currentEndTime = .currentInterval\n"
"	endif\n"
"	if currentEndTime > .soundLength\n"
"		currentEndTime = .soundLength\n"
"		currentStartTime = currentEndTime - .currentInterval\n"
"		if currentStartTime < 0\n"
"			currentStartTime = 0\n"
"		endif\n"
"	endif\n"
"\n"
"	call init_window\n"
"	\n"
"	label PREVESCAPE\n"
"endproc\n"
"\n"
"\n"
"###############################################################\n"
"#\n"
"# Miscelaneous supporting code\n"
"#\n"
"###############################################################\n"
"\n"
"# Print the selected object\n"
"procedure PrintPraatObject .minimum .maximum .printObjectCommand$\n"
"	if not noDrawingOrWriting\n"
"		call PrintSuperImposedPraatObject 1 '.minimum' '.maximum' '.printObjectCommand$'\n"
"\n"
"	    call PrintMarksLeft .minimum .maximum\n"
"	    if index(.printObjectCommand$, \" 0 'config.frequency' \") > 0\n"
"		    call PrintMarksBottom 0 'config.frequency'\n"
"	    else\n"
"		    call PrintMarksBottom 'currentStartTime' 'currentEndTime'\n"
"	    endif\n"
"\n"
"	endif\n"
"endproc\n"
"\n"
"procedure PrintSuperImposedPraatObject .drawMarks .minimum .maximum .printObjectCommand$\n"
"	if not noDrawingOrWriting\n"
"	    # convert Canvas to absolute coordinates\n"
"	    .xL = 0.7\n"
"	    .xR = 5.8\n"
"	    .yL = 0.47\n"
"	    .yH = 4.03\n"
"	    Select inner viewport... '.xL' '.xR' '.yL' '.yH'\n"
"	    Axes... 0 100 0 100\n"
"	    if .drawMarks and not (index(.printObjectCommand$, \"yes\") or index(.printObjectCommand$, \"no\"))\n"
"		    Draw rectangle...  0 100 0 100\n"
"	    endif\n"
"	    Axes... 0 100 0 100\n"
"	    '.printObjectCommand$'\n"
"	endif\n"
"endproc\n"
"\n"
"\n"
"procedure PrintCurrentSelection .minimum .maximum\n"
"	if not noDrawingOrWriting\n"
"	    # convert Canvas to absolute coordinates\n"
"	    .xL = 0.7\n"
"	    .xR = 5.8\n"
"	    .yL = .minimum\n"
"	    .yH = .maximum\n"
"	    # Mark current selection	\n"
"		.selectXstart = selectedStartTime\n"
"		.selectXend = selectedEndTime\n"
"\n"
"	    if (.selectXstart >= currentStartTime and .selectXstart <= currentEndTime) or (.selectXend >= currentStartTime and .selectXend <= currentEndTime)\n"
"		    Colour... Blue\n"
"		    Line width... 2\n"
"		    if .selectXstart >= currentStartTime and .selectXstart <= currentEndTime\n"
"			    Draw line... '.selectXstart' '.yH' '.selectXstart' '.yL'\n"
"			    Text special... '.selectXstart' Centre '.yH' Bottom Helvetica 10 0 'selectedStartTime:4'\n"
"		    endif\n"
"		    if .selectXend >= currentStartTime and .selectXend <= currentEndTime\n"
"			    Draw line... '.selectXend' '.yH' '.selectXend' '.yL'\n"
"			    Text special... '.selectXend' Centre '.yH' Bottom Helvetica 10 0 'selectedEndTime:4'\n"
"		    endif\n"
"		    Colour... Black\n"
"		    Line width... 'defaultLineWidth'\n"
"	    endif\n"
"	endif\n"
"endproc\n"
"\n"
"procedure PrintMarksLeft .minimum .maximum\n"
"	if abs(.maximum - .minimum) > 0\n"
"		.distance = 10^(ceiling(log10(abs(.maximum - .minimum)))-1)\n"
"	else\n"
"		.distance = 0\n"
"	endif\n"
"	if .distance > abs(.maximum - .minimum)/2\n"
"		.distance /= 10\n"
"	endif\n"
"	if .distance <> undefined and .distance > 0\n"
"		Marks left every... 1 '.distance' yes yes no\n"
"	endif	\n"
"endproc\n"
"\n"
"procedure PrintMarksBottom .minimum .maximum\n"
"	if abs(.maximum - .minimum) > 0\n"
"		.distance = 10^(ceiling(log10(abs(.maximum - .minimum)))-1)\n"
"	else\n"
"		.distance = 0\n"
"	endif\n"
"	if .distance > abs(.maximum - .minimum)/2\n"
"		.distance /= 10\n"
"	endif\n"
"	while  .distance > 0 and abs(.maximum - .minimum) / 40 > .distance\n"
"		.distance *= 10\n"
"	endwhile\n"
"	if .distance <> undefined and .distance > 0\n"
"		Marks bottom every... 1 '.distance' yes yes no\n"
"	endif\n"
"endproc\n"
"\n"
"# Draw selected object in demo window\n"
"procedure DrawPraatObject .minimum .maximum .drawObjectCommand$\n"
"	if not noDrawingOrWriting\n"
"	    call reset_viewport\n"
"	    call wipeArea 'wipeCanvasArea$'\n"
"	    call DrawSuperImposedPraatObject 1 '.minimum' '.maximum' '.drawObjectCommand$'\n"
"\n"
"	    call reset_viewport\n"
"	endif\n"
"endproc\n"
"\n"
"procedure DrawSuperImposedPraatObject .drawMarks .minimum .maximum .drawObjectCommand$\n"
"	if not noDrawingOrWriting\n"
"	    # convert Canvas to absolute coordinates\n"
"	    .xL = canvasXL + viewportMargin\n"
"	    .xR = canvasXR - viewportMargin\n"
"	    .yL = canvasYL + viewportMargin\n"
"	    .yH = canvasYH - viewportMargin\n"
"	    demo Select inner viewport... '.xL' '.xR' '.yL' '.yH'\n"
"	    if .drawMarks and not (index(.drawObjectCommand$, \"yes\") or index(.drawObjectCommand$, \"no\"))\n"
"		    demo Draw rectangle...  0 100 0 100\n"
"	    endif\n"
"	    demo Axes... 0 100 0 100\n"
"		if not (.minimum = undefined or .maximum = undefined)\n"
"			if .minimum = .maximum			\n"
"				.minimum -= 1\n"
"				.maximum += 1\n"
"			endif\n"
"	    	demo '.drawObjectCommand$'\n"
"	    	if .drawMarks\n"
"				call DrawMarksLeft '.minimum' '.maximum'\n"
"			endif\n"
"	    	if mainPage.draw$ = \"Ltas\"\n"
"		    	if .drawMarks\n"
"			    	call DrawMarksBottom 0 'config.frequency'\n"
"				endif\n"
"	    	else\n"
"		    	if .drawMarks\n"
"					call DrawMarksBottom 'currentStartTime' 'currentEndTime'\n"
"				endif\n"
"\n"
"				if te.voicingTextGrid > 0\n"
"					select te.voicingTextGrid\n"
"					.numIntervals = Get number of intervals... 1\n"
"					for .interval to .numIntervals\n"
"						.label$ = Get label of interval... 1 '.interval'\n"
"						if .label$ = \"V\"\n"
"							.start = Get start point... 1 '.interval'\n"
"							.end = Get end point... 1 '.interval'\n"
"							.duration = .end - .start\n"
"							# Interval is in window\n"
"							if .start < currentEndTime and .end > currentStartTime\n"
"							    demo Colour... 'te.voicingcolor$'\n"
"							    demo Line width... 1\n"
"							    .botPoint = .minimum - (.maximum - .minimum)/50\n"
"							    .leftPoint = max(.start, currentStartTime)\n"
"							    .rightPoint = min(.end, currentEndTime)\n"
"								demo Draw line... '.leftPoint' '.botPoint' '.rightPoint' '.botPoint'\n"
"							    demoShow()\n"
"							    demo Colour... Black\n"
"							    demo Line width... 'defaultLineWidth'\n"
"							endif\n"
"						endif\n"
"						\n"
"					endfor\n"
"					call get_feedback_text 'config.language$' VoicingMarker\n"
"					.voicingText$ = get_feedback_text.text$\n"
"					.voiceMarkerPositionX = currentStartTime -(currentEndTime - currentStartTime)/30\n"
"					.voiceMarkerPositionY = .minimum - (.maximum - .minimum)/50\n"
"					demo Colour... 'te.voicingcolor$'\n"
"					demo Text special... '.voiceMarkerPositionX' Right '.voiceMarkerPositionY' Top Helvetica 11 0 '.voicingText$'\n"
"				    demoShow()\n"
"				    demo Colour... Black\n"
"				endif\n"
"				\n"
"	    	endif\n"
"\n"
"		endif\n"
"	    demoShow()\n"
"\n"
"	endif\n"
"endproc\n"
"\n"
"procedure DrawMarkAtTime .time .minimum .maximum .color$\n"
"	if not noDrawingOrWriting\n"
"		if (.time > currentStartTime and .time < currentEndTime)\n"
"		    demo Colour... '.color$'\n"
"		    demo Line width... 2\n"
"		    .topPoint = .minimum\n"
"		    .botPoint = .minimum - (.maximum - .minimum)/30\n"
"		    .leftPoint = .time - (currentEndTime - currentStartTime)/100\n"
"		    .rightPoint = .time + (currentEndTime - currentStartTime)/100\n"
"		    demo Draw line... '.time' '.topPoint' '.leftPoint' '.botPoint'\n"
"		    demo Draw line... '.time' '.topPoint' '.rightPoint' '.botPoint'\n"
"		    demoShow()\n"
"		    demo Colour... Black\n"
"		    demo Line width... 'defaultLineWidth'\n"
"		endif\n"
"	endif\n"
"endproc\n"
"\n"
"procedure DrawCurrentSelection .minimum .maximum\n"
"	if not (noDrawingOrWriting or noDrawingSelection)\n"
"	    .xL = canvasXL + canvasLeftCorrection\n"
"	    .xR = canvasXR + canvasRightCorrection\n"
"	    .yL = canvasYL\n"
"	    .yH = canvasYH\n"
"	    # Mark current selection	\n"
"	    .selectXstart = -1\n"
"	    .selectXend = -1\n"
"	    if (selectedStartTime >= currentStartTime and selectedStartTime <= currentEndTime)\n"
"		    .selectXstart = .xL+(selectedStartTime-currentStartTime)/(currentEndTime - currentStartTime) * (.xR - .xL)\n"
"	    endif\n"
"	    if (selectedEndTime >= currentStartTime and selectedEndTime <= currentEndTime)\n"
"		    .selectXend = .xL+(selectedEndTime-currentStartTime)/(currentEndTime - currentStartTime) * (.xR - .xL)\n"
"	    endif\n"
"	    # Do not draw selection if it equals to the current window\n"
"	    if (selectedStartTime = currentStartTime and selectedEndTime = currentEndTime)\n"
"		    .selectXstart = -1\n"
"		    .selectXend = -1			\n"
"	    endif\n"
"	    \n"
"	    if .selectXstart > 0 or .selectXend > 0		    			\n"
"		    demo Colour... Blue\n"
"		    demo Line width... 2\n"
"		    call set_font_size 10\n"
"		    demo Helvetica\n"
"		    .startTextWidth = 0\n"
"		    .endTextWidth = 0\n"
"		    if .selectXstart > 0\n"
"			    demo Draw line... '.selectXstart' '.yH' '.selectXstart' '.yL'\n"
"			    demo Text special... '.selectXstart' Centre '.yH' Bottom Helvetica 10 0 'selectedStartTime:4'\n"
"			    .startTextWidth = demo Text width (wc)... 'selectedStartTime:4'\n"
"		    endif\n"
"		    if .selectXend > 0\n"
"			    demo Draw line... '.selectXend' '.yH' '.selectXend' '.yL'\n"
"			    demo Text special... '.selectXend' Centre '.yH' Bottom Helvetica 10 0 'selectedEndTime:4'\n"
"			    .endTextWidth = demo Text width (wc)... 'selectedEndTime:4'\n"
"		    endif\n"
"		    # Write intervalduration\n"
"		    .intervalDuration = selectedEndTime - selectedStartTime\n"
"		    .minPos = max(.selectXstart, .xL)\n"
"		    .maxPos = min(.selectXend, .xR)\n"
"		    .spaceAvailable = (.maxPos - .minPos) - (.startTextWidth+.endTextWidth)/2\n"
"		    .textPosition = (.minPos + .maxPos)/2\n"
"		    .intervalDurationText$ = \"['.intervalDuration:4']\"\n"
"		    .textWidth = demo Text width (wc)... '.intervalDurationText$'\n"
"		    while index_regex(.intervalDurationText$, \"[1-9]\") and .textWidth > .spaceAvailable\n"
"				.intervalDurationText$ = replace_regex$(.intervalDurationText$, \"[\\d\\.]\\]\", \"]\", 0)\n"
"				.textWidth = demo Text width (wc)... '.intervalDurationText$'\n"
"		    endwhile\n"
"		    if index_regex(.intervalDurationText$, \"[1-9]\")\n"
"				demo Text special... '.textPosition' Centre '.yH' Bottom Helvetica 10 0 '.intervalDurationText$'\n"
"		    endif\n"
"		    \n"
"		    demoShow()\n"
"		    call set_font_size 'defaultFontSize'\n"
"			demo 'defaultFont$'\n"
"		    demo Colour... Black\n"
"		    demo Line width... 'defaultLineWidth'\n"
"		    selectionIsDrawn = 1\n"
"	    endif\n"
"	    call writeAnalysisValues 'mainPage.draw$'\n"
"	endif\n"
"endproc\n"
"\n"
"procedure DrawMarksLeft .minimum .maximum\n"
"	.distance = 10^(ceiling(log10(abs(.maximum - .minimum)))-1)\n"
"	if .distance > abs(.maximum - .minimum)/2\n"
"		.distance /= 10\n"
"	endif\n"
"	if .distance <> undefined\n"
"		demo Marks left every... 1 '.distance' yes yes no\n"
"	endif	\n"
"endproc\n"
"\n"
"procedure DrawMarksBottom .minimum .maximum\n"
"	# There is a bug that hangs the Marks bottom for very small values\n"
"	if abs(.maximum - .minimum) > 0.000001\n"
"		.distance = 10^(ceiling(log10(abs(.maximum - .minimum)))-1)\n"
"		if .distance > abs(.maximum - .minimum)/2\n"
"			.distance /= 10\n"
"		endif\n"
"		if .distance <= 0\n"
"			.distance = abs('.maximum' - '.minimum')\n"
"		endif\n"
"		while .distance > 0 and abs(.maximum - .minimum) / 40 > .distance\n"
"			.distance *= 10\n"
"		endwhile\n"
"		if .distance <> undefined and abs(.maximum - .minimum) > .distance\n"
"			demo Marks bottom every... 1 '.distance' yes yes no\n"
"		endif\n"
"	endif\n"
"endproc\n"
"\n"
"procedure DrawPitchObject\n"
"	if te.openSound > 0 and pitchName$ = \"\"\n"
"		# Check for cached analysis file\n"
"		if config.useCache > 0 and variableExists(\"currentDirectoryName$\")\n"
"			createDirectory(\"'currentDirectoryName$''localCacheDir$'\")\n"
"		endif\n"
"		if config.useCache >= 0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Pitch\")\n"
"			te.pitch = Read from file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Pitch\n"
"		else\n"
"			call to_pitch te.openSound\n"
"\n"
"			# Write file to cache\n"
"			if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"				Save as binary file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Pitch\n"
"			endif\n"
"		endif\n"
"		pitchName$ = selected$(\"Pitch\")\n"
"		minPitch = Get minimum... 0 0 Hertz Parabolic\n"
"		minPitch = floor(minPitch)\n"
"		minPitch = 0\n"
"		maxPitch = Get maximum... 0 0 Hertz Parabolic\n"
"		if minPitch = undefined or maxPitch = undefined\n"
"			minPitch = 0\n"
"			maxPitch = 400\n"
"		endif\n"
"		maxPitch = ceiling(1.5*maxPitch)\n"
"		To PointProcess\n"
"		pointProcessName$ = selected$(\"PointProcess\")\n"
"		te.voicingTextGrid = To TextGrid (vuv)... 0.2 0.1\n"
"	endif\n"
"\n"
"	if pitchName$ <> \"\"\n"
"		select Pitch 'pitchName$'\n"
"		call 'mainPage.outputPraatObject$'PraatObject 'minPitch' 'maxPitch' Draw... 'currentStartTime' 'currentEndTime' 'minPitch' 'maxPitch' yes\n"
"		call 'mainPage.outputPraatObject$'CurrentSelection 'minPitch' 'maxPitch'\n"
"	endif\n"
"endproc\n"
"\n"
"# Do not recalculate without need\n"
"procedure extractPartHarmonicity .fileID .start .end\n"
"	select .fileID\n"
"	.tempMatrix = To Matrix\n"
"	.tempSound = To Sound\n"
"	.tempSoundPart = Extract part... '.start' '.end' rectangular 1.0 true\n"
"	.tempMatrixPart = Down to Matrix\n"
"	.harmonicity = To Harmonicity\n"
"	select .tempMatrix\n"
"	plus .tempSound\n"
"	plus .tempSoundPart\n"
"	plus .tempMatrixPart\n"
"	Remove\n"
"	\n"
"	select .harmonicity\n"
"endproc\n"
"\n"
"procedure DrawHarmonicityObject\n"
"	if te.harmonicity > 0\n"
"		if currentStartTime != previousHarmonicityStart or currentEndTime != previousHarmonicityEnd\n"
"			select te.harmonicity\n"
"			Remove\n"
"			harmonicityName$ = \"\"\n"
"			te.harmonicity = 0\n"
"		endif\n"
"	endif\n"
"	if recordedSound$ <> \"\"\n"
"		if te.harmonicity = 0 or currentStartTime != previousHarmonicityStart or currentEndTime != previousHarmonicityEnd\n"
"			# do not exagerate precision\n"
"			.cutStart = currentStartTime\n"
"			.cutEnd = currentEndTime\n"
"			.timeStep = 0.01\n"
"			\n"
"			# Check for cached analysis file\n"
"			if config.useCache > 0 and variableExists(\"currentDirectoryName$\")\n"
"				createDirectory(\"'currentDirectoryName$''localCacheDir$'\")\n"
"			endif\n"
"			if config.useCache >= 0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Harmonicity\")\n"
"				.tempHarm = Read from file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Harmonicity\n"
"				call extractPartHarmonicity '.tempHarm' '.cutStart' '.cutEnd'\n"
"				te.harmonicity = selected()\n"
"				select .tempHarm\n"
"				Remove\n"
"				select te.harmonicity\n"
"			else\n"
"				select te.openSound\n"
"				if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"					.cutStart = 0\n"
"					.cutEnd = Get total duration\n"
"				endif\n"
"				.tmpPartID = Extract part... '.cutStart' '.cutEnd' rectangular 1.0 true\n"
"				Rename... TmpPart\n"
"				# Settings from C.J. van As 2001 \"Tracheoesophageal Speech\" p83\n"
"				te.harmonicity = noprogress To Harmonicity (cc)... '.timeStep' 40 0 1.0\n"
"				# Arbitrarily put a floor of 0dB on the Harmonicity to Noise ratio\n"
"				Formula... if self < 0 then 0 else self fi\n"
"				select .tmpPartID\n"
"				Remove\n"
"				select te.harmonicity\n"
"				# Write file to cache\n"
"				if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"					Save as binary file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Harmonicity\n"
"					\n"
"					.cutStart = currentStartTime\n"
"					.cutEnd = currentEndTime\n"
"					call extractPartHarmonicity 'te.harmonicity' '.cutStart' '.cutEnd'\n"
"					.newHarm = selected()\n"
"					select te.harmonicity\n"
"					Remove\n"
"					te.harmonicity = .newHarm\n"
"					select te.harmonicity\n"
"				endif\n"
"			endif\n"
"			harmonicityName$ = selected$(\"Harmonicity\")\n"
"			previousHarmonicityStart = currentStartTime\n"
"			previousHarmonicityEnd = currentEndTime\n"
"		endif\n"
"		select te.harmonicity\n"
"		minHarmonicity = Get minimum... 0 0 Parabolic\n"
"		minHarmonicity = floor(minHarmonicity)\n"
"		if minHarmonicity < 0\n"
"			minHarmonicity = 0\n"
"		endif\n"
"		maxHarmonicity = Get maximum... 0 0 Parabolic\n"
"		maxHarmonicity = ceiling(maxHarmonicity)\n"
"		if minHarmonicity = undefined or maxHarmonicity = undefined\n"
"			minHarmonicity = 0\n"
"			maxHarmonicity = 30\n"
"		endif\n"
"\n"
"		select te.harmonicity\n"
"		call 'mainPage.outputPraatObject$'PraatObject 'minHarmonicity' 'maxHarmonicity' Draw... 'currentStartTime' 'currentEndTime' 'minHarmonicity' 'maxHarmonicity'\n"
"		call 'mainPage.outputPraatObject$'CurrentSelection 'minHarmonicity' 'maxHarmonicity'\n"
"		\n"
"	endif\n"
"endproc\n"
"\n"
"# Calculate the MaxHarmonicity time\n"
"procedure calcMaxHarmonicity .soundfile\n"
"	if .soundfile > 0\n"
"		# Check for cached analysis file\n"
"		if config.useCache > 0 and variableExists(\"currentDirectoryName$\")\n"
"			createDirectory(\"'currentDirectoryName$''localCacheDir$'\")\n"
"		endif\n"
"		if config.useCache >= 0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'/'currentSoundName$'_max.Harmonicity\")\n"
"			.tmpHarmonicity = Read from file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'_max.Harmonicity\n"
"		else\n"
"			select te.openSound\n"
"			# Settings adapted from C.J. van As 2001 \"Tracheoesophageal Speech\" p83\n"
"			.tmpHarmonicity = noprogress To Harmonicity (cc)... 0.1 40 0 4.5\n"
"			# Arbitrarily put a floor of 0dB on the Harmonicity to Noise ratio\n"
"			Formula... if self < 0 then 0 else self fi\n"
"			# Write file to cache\n"
"			if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"				Save as binary file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'_max.Harmonicity\n"
"			endif\n"
"		endif\n"
"		# Get smoothed maximum harmonicity\n"
"		select .tmpHarmonicity\n"
"		.tmpMatrix = To Matrix\n"
"		select .tmpMatrix\n"
"		.tmpSound = To Sound (slice)... 1\n"
"		.tmpFiltered = Filter (pass Hann band)... 0 4 4\n"
"		.time = Get time of maximum... 0 0 Parabolic\n"
"		.value = Get maximum... 0 0 Parabolic\n"
"		# Remove temporary files\n"
"		select .tmpMatrix\n"
"		plus .tmpHarmonicity\n"
"		plus .tmpSound\n"
"		plus .tmpFiltered\n"
"		Remove\n"
"	endif\n"
"endproc\n"
"\n"
"##################################################################\n"
"#\n"
"# Create a Sound file with the Harmonicity low value\n"
"# Simply the HNR from a low pass filtered sound file (not correct?)\n"
"# Different from\n"
"# van Gogh et al. (2005) Acoustical analysis of tracheoesophageal voice. \n"
"# Speech Communication, 47.\n"
"procedure sound2Harm_low .startpoint .endpoint\n"
"	.timeStep = 0.01\n"
"	select te.openSound\n"
"	.duration = Get total duration\n"
"	if .endpoint = 0\n"
"		.endpoint = .duration\n"
"	endif\n"
"	# Check for cached analysis file\n"
"	if config.useCache > 0 and variableExists(\"currentDirectoryName$\")\n"
"		createDirectory(\"'currentDirectoryName$''localCacheDir$'\")\n"
"	endif\n"
"	if config.useCache >= 0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'/'currentSoundName$'_low.Harmonicity\")\n"
"		.tempHarm = Read from file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'_low.Harmonicity\n"
"		call extractPartHarmonicity '.tempHarm' '.startpoint' '.endpoint'\n"
"		te.harmLow = selected()\n"
"		select .tempHarm\n"
"		Remove\n"
"		select te.harmLow\n"
"	else\n"
"		select te.openSound\n"
"		if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"			.cutStart = 0\n"
"			.cutEnd = Get total duration\n"
"		else\n"
"			.cutStart = .startpoint\n"
"			.cutEnd = .endpoint\n"
"		endif\n"
"		.tmpPartSoundID = Extract part... '.cutStart' '.cutEnd' rectangular 1.0 true\n"
"		.tmpPartID = Filter (pass Hann band)... 0 700 100\n"
"		Rename... TmpPart\n"
"		select .tmpPartSoundID\n"
"		Remove\n"
"		select .tmpPartID\n"
"		# Settings from C.J. van As 2001 \"Tracheoesophageal Speech\" p83\n"
"		te.harmLow = noprogress To Harmonicity (cc)... '.timeStep' 40 0 1.0\n"
"		# Arbitrarily put a floor of 0dB on the Harmonicity to Noise ratio\n"
"		Formula... if self < 0 then 0 else self fi\n"
"		select .tmpPartID\n"
"		Remove\n"
"		select te.harmLow\n"
"		# Write file to cache\n"
"		if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"			Save as binary file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'_low.Harmonicity\n"
"			\n"
"			.cutStart = .startpoint\n"
"			.cutEnd = .endpoint\n"
"			call extractPartHarmonicity 'te.harmLow' '.cutStart' '.cutEnd'\n"
"			.newHarm = selected()\n"
"			select te.harmLow\n"
"			Remove\n"
"			te.harmLow = .newHarm\n"
"			select te.harmLow\n"
"		endif\n"
"	endif\n"
"	select te.harmLow\n"
"endproc\n"
"\n"
"##################################################################\n"
"#\n"
"# Create a Sound file with the Harmonicity high value\n"
"# Simply the HNR from a high pass filtered sound file (not correct?)\n"
"# Different from\n"
"# van Gogh et al. (2005) Acoustical analysis of tracheoesophageal voice. \n"
"# Speech Communication, 47.\n"
"procedure sound2Harm_high .startpoint .endpoint\n"
"	.timeStep = 0.01\n"
"	select te.openSound\n"
"	.duration = Get total duration\n"
"	if .endpoint = 0\n"
"		.endpoint = .duration\n"
"	endif\n"
"	# Check for cached analysis file\n"
"	if config.useCache > 0 and variableExists(\"currentDirectoryName$\")\n"
"		createDirectory(\"'currentDirectoryName$''localCacheDir$'\")\n"
"	endif\n"
"	if config.useCache >= 0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'/'currentSoundName$'_high.Harmonicity\")\n"
"		.tempHarm = Read from file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'_high.Harmonicity\n"
"		call extractPartHarmonicity '.tempHarm' '.startpoint' '.endpoint'\n"
"		te.harmHigh = selected()\n"
"		select .tempHarm\n"
"		Remove\n"
"		select te.harmHigh\n"
"	else\n"
"		select te.openSound\n"
"		if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"			.cutStart = 0\n"
"			.cutEnd = Get total duration\n"
"		else\n"
"			.cutStart = .startpoint\n"
"			.cutEnd = .endpoint\n"
"		endif\n"
"		.tmpPartSoundID = Extract part... '.cutStart' '.cutEnd' rectangular 1.0 true\n"
"		.tmpPartID = Filter (pass Hann band)... 700 2300 100\n"
"		Rename... TmpPart\n"
"		select .tmpPartSoundID\n"
"		Remove\n"
"		select .tmpPartID\n"
"		# Settings from C.J. van As 2001 \"Tracheoesophageal Speech\" p83\n"
"		te.harmHigh = noprogress To Harmonicity (cc)... '.timeStep' 40 0 1.0\n"
"		# Arbitrarily put a floor of 0dB on the Harmonicity to Noise ratio\n"
"		Formula... if self < 0 then 0 else self fi\n"
"		select .tmpPartID\n"
"		Remove\n"
"		select te.harmHigh\n"
"		# Write file to cache\n"
"		if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"			Save as binary file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'_high.Harmonicity\n"
"			\n"
"			.cutStart = .startpoint\n"
"			.cutEnd = .endpoint\n"
"			call extractPartHarmonicity 'te.harmHigh' '.cutStart' '.cutEnd'\n"
"			.newHarm = selected()\n"
"			select te.harmHigh\n"
"			Remove\n"
"			te.harmHigh = .newHarm\n"
"			select te.harmHigh\n"
"		endif\n"
"	endif\n"
"	select te.harmHigh\n"
"endproc\n"
"\n"
"##################################################################\n"
"#\n"
"# Create a Sound file with the GNE values\n"
"procedure sound2GNEvalue .startpoint .endpoint\n"
"	# Window and analysis values from C.J. van As 2001 \"Tracheoesophageal Speech\" p83\n"
"	.windowSize = 0.250\n"
"	# Note link with sample frequency below!\n"
"	# Only .sampleGNE samples are calcualted for the GNE to reduce the response time\n"
"	.sampleGNE = 30\n"
"	.timeStep = 0.005\n"
"	while (.sampleGNE * .timeStep) < abs(.endpoint - .startpoint)\n"
"		.timeStep += 0.005\n"
"	endwhile\n"
"	select te.openSound\n"
"	.duration = Get total duration\n"
"	if .endpoint = 0\n"
"		.endpoint = .duration\n"
"	endif\n"
"	# Check for cached analysis file\n"
"	if config.useCache > 0 and variableExists(\"currentDirectoryName$\")\n"
"		createDirectory(\"'currentDirectoryName$''localCacheDir$'\")\n"
"	endif\n"
"	if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"		.begin = 0\n"
"		.end = .duration\n"
"	else\n"
"		.begin = .startpoint\n"
"		.end = .endpoint\n"
"	endif\n"
"	if config.useCache >= 0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.GNE\")\n"
"		.gneSoundID = Read from file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.GNE\n"
"	else\n"
"		.gneSoundID = Create Sound from formula... GNE 1 0 .duration 100 0\n"
"		.startSample = ceiling((.begin + .windowSize/2)/.timeStep)\n"
"		.endSample = floor((.end - .windowSize/2)/.timeStep)\n"
"		for .t from .startSample to .endSample\n"
"			.t1 = .t*.timeStep - .windowSize/2\n"
"			.t2 = .t1 + .timeStep + .windowSize\n"
"			select te.openSound\n"
"			.frameID = Extract part... '.t1' '.t2' rectangular 1.0 true\n"
"			.gneID = noprogress To Harmonicity (gne)... 500 4500 1000 80\n"
"			.gneValue = Get maximum\n"
"			select .frameID\n"
"			plus .gneID\n"
"			Remove\n"
"			select .gneSoundID\n"
"			Set value at sample number... 0 '.t' '.gneValue'\n"
"		endfor\n"
"		select .gneSoundID\n"
"		if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"			Save as binary file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.GNE\n"
"		endif\n"
"	endif\n"
"	if .startpoint > 0 or .endpoint < .duration\n"
"		select .gneSoundID\n"
"		.newID = Extract part... '.startpoint' '.endpoint' rectangular 1.0 true\n"
"		select .gneSoundID\n"
"		Remove\n"
"		.gneSoundID = .newID\n"
"	endif\n"
"	select .gneSoundID\n"
"endproc\n"
"\n"
"# Mostly useless as the GNE tends to increase for short intervals.\n"
"# Do not recalculate without need\n"
"procedure DrawGNEObject\n"
"	.windowSize = 0.120\n"
"	if gneName$ <> \"\"\n"
"		if currentStartTime != previousGNEstart or currentEndTime != previousGNEend\n"
"			select te.openSound\n"
"			Remove\n"
"			gneName$ = \"\"\n"
"		endif\n"
"	endif\n"
"	if recordedSound$ <> \"\"\n"
"		if gneName$ = \"\" or currentStartTime != previousGNEstart or currentEndTime != previousGNEend\n"
"			call sound2GNEvalue 'currentStartTime' 'currentEndTime'\n"
"			te.gneSound = selected()\n"
"			gneName$ = selected$(\"Sound\")\n"
"			previousGNEstart = currentStartTime\n"
"			previousGNEend = currentEndTime\n"
"		endif\n"
"		minGNE = 0\n"
"		maxGNE = 1\n"
"\n"
"		select te.gneSound\n"
"		call 'mainPage.outputPraatObject$'PraatObject 'minGNE' 'maxGNE' Draw... 'currentStartTime' 'currentEndTime' 0 0 yes Curve\n"
"		call 'mainPage.outputPraatObject$'CurrentSelection 'minGNE' 'maxGNE'\n"
"		\n"
"	endif\n"
"endproc\n"
"\n"
"procedure calculateGNEValues\n"
"	.maxGNE = 0\n"
"	.minGNE = 0\n"
"	.meanGNE = 0\n"
"	.sdGNE = 0\n"
"	if gneName$ <> \"\"\n"
"		select te.openSound\n"
"		.maxGNE = Get maximum... 'selectedStartTime' 'selectedEndTime' Parabolic\n"
"		.minGNE = Get minimum... 'selectedStartTime' 'selectedEndTime' Parabolic\n"
"		.meanGNE = Get mean... 'selectedStartTime' 'selectedEndTime'\n"
"		.sdGNE = Get standard deviation... 'selectedStartTime' 'selectedEndTime'\n"
"	endif\n"
"	\n"
"	.text$ = \"GNE - Max.: '.maxGNE:2', Min.: '.minGNE:2', Mean: '.meanGNE:2', SD: '.sdGNE:3'\"\n"
"	.shorttextAST$ = \"\"\n"
"endproc\n"
"\n"
"#################################\n"
"\n"
"procedure DrawPitchTierObject\n"
"	if recordedSound$ <> \"\" and pitchTierName$ = \"\"\n"
"	endif\n"
"	if pitchTierName$ <> \"\"\n"
"		select PitchTier 'pitchTierName$'\n"
"		call 'mainPage.outputPraatObject$'PraatObject 'minPitch' 'maxPitch' Draw... 'currentStartTime' 'currentEndTime' 'minPitch' 'maxPitch' yes\n"
"		call 'mainPage.outputPraatObject$'CurrentSelection 'minPitch' 'maxPitch'\n"
"	endif\n"
"endproc\n"
"\n"
"procedure DrawSpectrogramObject\n"
"\n"
"	if recordedSound$ <> \"\" and te.spectrogram = 0\n"
"		# Check for cached analysis file\n"
"		if config.useCache > 0 and variableExists(\"currentDirectoryName$\")\n"
"			createDirectory(\"'currentDirectoryName$''localCacheDir$'\")\n"
"		endif\n"
"		if config.useCache >= 0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Spectrogram\")\n"
"			te.spectrogram = Read from file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Spectrogram\n"
"		else\n"
"			select te.openSound\n"
"			.currentSampleFrequency = Get sampling frequency\n"
"			.nyquistFrequency = .currentSampleFrequency / 2\n"
"			te.spectrogram = noprogress To Spectrogram... 0.1 '.nyquistFrequency' 0.001 10 Gaussian\n"
"			# Write file to cache\n"
"			if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"				Save as binary file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Spectrogram\n"
"			endif\n"
"		endif\n"
"		spectrogramName$ = selected$(\"Spectrogram\")\n"
"		if config.useCache >= 0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Formant\")\n"
"			te.formant = Read from file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Formant\n"
"		else\n"
"			select te.openSound\n"
"			te.formant = noprogress To Formant (burg)... 0.02 4 4400 0.1 50\n"
"			# Write file to cache\n"
"			if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"				Save as binary file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Formant\n"
"			endif\n"
"		endif\n"
"		\n"
"		formantName$ = selected$(\"Formant\")\n"
"	endif\n"
"\n"
"	if te.spectrogram > 0 and not noDrawingOrWriting\n"
"		select te.spectrogram\n"
"		call 'mainPage.outputPraatObject$'PraatObject 0 'config.frequency' Paint... 'currentStartTime' 'currentEndTime' 0 'config.frequency' 80 yes 70 6 0 yes\n"
"		if config.showFormants > 0\n"
"			if mainPage.outputPraatObject$ = \"Draw\"\n"
"				demo Colour... Maroon\n"
"			else\n"
"				Colour... Maroon\n"
"			endif\n"
"			select te.formant\n"
"			call 'mainPage.outputPraatObject$'SuperImposedPraatObject 0 0 'config.frequency' Speckle... 'currentStartTime' 'currentEndTime' 'config.frequency' 25 no\n"
"			if mainPage.outputPraatObject$ = \"Draw\"\n"
"				demo Colour... Black\n"
"			else\n"
"				Colour... Black\n"
"			endif\n"
"		endif\n"
"		call 'mainPage.outputPraatObject$'CurrentSelection 0 'config.frequency'\n"
"		call writeAnalysisValues 'mainPage.draw$'\n"
"	endif\n"
"endproc\n"
"\n"
"procedure DrawLtasObject\n"
"	if ltasName$ <> \"\"\n"
"		select Ltas 'ltasName$'\n"
"		Remove\n"
"		ltasName$ = \"\"\n"
"	endif\n"
"	if recordedSound$ <> \"\"\n"
"		# Check for cached analysis file\n"
"		if config.useCache > 0 and variableExists(\"currentDirectoryName$\")\n"
"			createDirectory(\"'currentDirectoryName$''localCacheDir$'\")\n"
"		endif\n"
"		if config.useCache >= 0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'/'currentSoundName$'_'selectedStartTime:3'_'selectedEndTime:3'.Ltas\")\n"
"			te.Ltas = Read from file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'_'selectedStartTime:3'_'selectedEndTime:3'.Ltas\n"
"		else\n"
"			select te.openSound\n"
"			.tmpPartID = Extract part... 'selectedStartTime' 'selectedEndTime' rectangular 1.0 false\n"
"			Rename... TmpPart\n"
"			.tmpSpecID = noprogress To Spectrum... yes\n"
"			te.Ltas = noprogress To Ltas (1-to-1)\n"
"			select .tmpPartID\n"
"			plus .tmpSpecID\n"
"			Remove\n"
"			select te.Ltas\n"
"			# Write file to cache\n"
"			if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"				Save as binary file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'_'selectedStartTime:3'_'selectedEndTime:3'.Ltas\n"
"			endif\n"
"			\n"
"		endif\n"
"		ltasName$ = selected$(\"Ltas\")\n"
"		.minimum = -20\n"
"		.maximum = Get maximum... 0 0 None\n"
"		call 'mainPage.outputPraatObject$'PraatObject '.minimum' '.maximum' Draw... 0 'config.frequency' '.minimum' '.maximum' yes Curve\n"
"		\n"
"		call writeAnalysisValues 'mainPage.draw$'\n"
"	endif\n"
"endproc\n"
"\n"
"procedure DrawIntensityObject\n"
"	if recordedSound$ <> \"\" and intensityName$ = \"\"\n"
"		# Check for cached analysis file\n"
"		if config.useCache > 0 and variableExists(\"currentDirectoryName$\")\n"
"			createDirectory(\"'currentDirectoryName$''localCacheDir$'\")\n"
"		endif\n"
"		if config.useCache >= 0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Intensity\")\n"
"			te.intensity = Read from file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Intensity\n"
"		else\n"
"			select te.openSound\n"
"			te.intensity = noprogress To Intensity... 60 0 yes\n"
"			# Write file to cache\n"
"			if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"				Save as binary file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Intensity\n"
"			endif\n"
"		endif\n"
"		intensityName$ = selected$(\"Intensity\")\n"
"		minIntensity = Get minimum... 0 0 Parabolic\n"
"		if minIntensity < 0\n"
"			minIntensity = 0\n"
"		else\n"
"			minIntensity = floor(minIntensity)\n"
"		endif\n"
"		maxIntensity = Get maximum... 0 0 Parabolic\n"
"		maxIntensity = ceiling(maxIntensity)\n"
"		maxTimeIntensity = Get time of maximum... 0 0 Parabolic\n"
"		if minIntensity = undefined or maxIntensity = undefined\n"
"			minIntensity = 0\n"
"			maxIntensity = 100\n"
"		endif\n"
"	endif\n"
"	\n"
"	if intensityName$ <> \"\"\n"
"		select Intensity 'intensityName$'\n"
"		call 'mainPage.outputPraatObject$'PraatObject 'minIntensity' 'maxIntensity' Draw... 'currentStartTime' 'currentEndTime' 'minIntensity' 'maxIntensity' yes\n"
"		call 'mainPage.outputPraatObject$'CurrentSelection 'minIntensity' 'maxIntensity'\n"
"	endif\n"
"endproc\n"
"\n"
"procedure DrawRatingObject\n"
"	if te.ratingTable <= 0\n"
"		call loadLanguageTable Rating'config.ratingForm$' 'config.language$'\n"
"		te.ratingTable = loadLanguageTable.tableID\n"
"		select te.ratingTable\n"
"		te.rating$ = selected$(\"Table\")\n"
"		call relative2absolutePosition 'te.rating$'\n"
"	endif\n"
"	call get_RatingValues 'config.speakerDataTable' 'te.ratingTable'\n"
"	call Draw_all_buttons 'te.ratingTable'\n"
"endproc\n"
"\n"
"procedure DrawSoundObject\n"
"	if recordedSound$ <> \"\"\n"
"		select te.openSound\n"
"		.minimum = Get minimum... 0 0 None\n"
"		.maximum = Get maximum... 0 0 None\n"
"		if not (.minimum = undefined or .maximum = undefined)\n"
"			if .minimum = .maximum			\n"
"				.minimum -= 1\n"
"				.maximum += 1\n"
"			endif\n"
"			call 'mainPage.outputPraatObject$'PraatObject '.minimum' '.maximum' Draw... 'currentStartTime' 'currentEndTime' 0 0 yes Curve\n"
"			call 'mainPage.outputPraatObject$'CurrentSelection '.minimum' '.maximum'\n"
"		endif\n"
"	endif\n"
"endproc\n"
"\n"
"procedure write_feedback_text .color$ .feedback$\n"
"    call wipeArea 'wipeFeedbackArea$'\n"
"	demo Colour... '.color$'\n"
"	.newFontSize = 14\n"
"	call adjustFontSizeOnWidth '.newFontSize' 80 '.feedback$'\n"
"	.newFontSize = adjustFontSizeOnWidth.newFontSize\n"
"\n"
"	demo Text special... 40 Centre 15 bottom Helvetica '.newFontSize' 0 '.feedback$'\n"
"	demoShow()\n"
"	demo Colour... Black\n"
"endproc\n"
"\n"
"procedure write_header_text .color$ .headertext$\n"
"    call wipeArea 'wipeHeaderArea$'\n"
"	demo Colour... '.color$'\n"
"	.newFontSize = 14\n"
"	call adjustFontSizeOnWidth '.newFontSize' 80 '.headertext$'\n"
"	.newFontSize = adjustFontSizeOnWidth.newFontSize\n"
"\n"
"	demo Text special... 40 Centre 97.5 bottom Helvetica '.newFontSize' 0 '.headertext$'\n"
"	demoShow()\n"
"	demo Colour... Black\n"
"endproc\n"
"\n"
"procedure writeAnalysisValues .drawObject$\n"
"	call calculate'.drawObject$'Values\n"
"	.textToWrite$ = calculate'.drawObject$'Values.text$\n"
"	.textToWrite$ = .textToWrite$ + calculate'.drawObject$'Values.shorttextAST$\n"
"	if not noDrawingOrWriting\n"
"		call write_feedback_text Blue '.textToWrite$'\n"
"	endif\n"
"endproc\n"
"\n"
"procedure saveSound .table$ .label$\n"
"	# Get feedback texts\n"
"	call getLanguageTexts '.table$' '.label$'\n"
"	.writeDialogue$ = getLanguageTexts.helpText$\n"
"	call convert_praat_to_latin1 '.writeDialogue$'\n"
"	.writeDialogue$ = convert_praat_to_latin1.text$\n"
"	\n"
"	# Do not print \"nothing\"\n"
"	.currentID$ = \"\"\n"
"	if speakerID$ <> \"\"\n"
"		.currentID$ = replace_regex$(speakerID$, \"^\\W*([\\w\\- ]+).*$\", \"\\1\", 0)\n"
"		.currentID$ = replace_regex$(.currentID$, \" \", \"_\", 0)\n"
"	else\n"
"		.currentID$ = demoAppName$\n"
"	endif\n"
"	.filename$ = \"\"\n"
"	if currentSoundName$ <> \"\"\n"
"		.outExtension$ = \"eps\"\n"
"		if config.saveFMT$ = \"PDF\"\n"
"			.outExtension$ = \"pdf\"\n"
"		elsif config.saveFMT$ = \"PNG\"\n"
"			.outExtension$ = \"png\"\n"
"		elsif config.saveFMT$ = \"EMF\"\n"
"			.outExtension$ = \"emf\"\n"
"		endif\n"
"		.filename$ = chooseWriteFile$ (.writeDialogue$, \"'.currentID$'.'.outExtension$'\")\n"
"		if .filename$ <> \"\"\n"
"			call print_signal '.filename$'\n"
"			\n"
"			# Save audio file\n"
"			if config.saveAll\n"
"				.audioFilename$ = replace_regex$(.filename$, \"\\.[^\\.]+$\", \".wav\", 0)\n"
"				select te.openSound\n"
"				.tmpPartSoundID = Extract part... 'selectedStartTime' 'selectedEndTime' rectangular 1.0 true\n"
"				Save as WAV file... '.audioFilename$'\n"
"				Remove\n"
"			endif\n"
"		endif\n"
"	endif\n"
"endproc\n"
"\n"
"procedure calculatePitchValues\n"
"	.numberFrames = 0\n"
"	.voicedFrames = 0\n"
"	.meanPitch = 0\n"
"	.sdPitch = 0\n"
"	.maximumVoicingDuration = 0\n"
"	.voicedFractions = 0\n"
"	.jitter = 0\n"
"	.shimmer = 0\n"
"	.shorttextAST$ = \"\"\n"
"	\n"
"	if pitchName$ <> \"\"\n"
"		select Pitch 'pitchName$'\n"
"		.startFrame = Get frame number from time... 'selectedStartTime'\n"
"		.endFrame = Get frame number from time... 'selectedEndTime'\n"
"		for .i from .startFrame to .endFrame\n"
"			.numberFrames += 1\n"
"			.currentValue = Get value in frame... '.i' Hertz\n"
"			if .currentValue != undefined\n"
"				.voicedFrames += 1\n"
"			endif\n"
"		endfor\n"
"		.meanPitch = Get mean... 'selectedStartTime' 'selectedEndTime' Hertz\n"
"		.sdPitch = Get standard deviation... 'selectedStartTime' 'selectedEndTime' Hertz\n"
"		.medianPitch = Get quantile... 'selectedStartTime' 'selectedEndTime' 0.5 Hertz\n"
"		if .numberFrames > 0\n"
"			.voicedFractions = .voicedFrames/.numberFrames\n"
"		endif\n"
"		select PointProcess 'pitchName$'\n"
"		# Settings adapted from C.J. van As 2001 \"Tracheoesophageal Speech\" p83\n"
"		.jitter = Get jitter (local)... 'selectedStartTime' 'selectedEndTime' 0.0001 0.02 5\n"
"		select te.openSound\n"
"		plus PointProcess 'pitchName$'\n"
"		.shimmer = Get shimmer (local)... 'selectedStartTime' 'selectedEndTime' 0.0001 0.02 5 5\n"
"	endif\n"
"	if te.voicingTextGrid > 0\n"
"		select te.voicingTextGrid\n"
"		.numberOfIntervals = Get number of intervals... 1\n"
"		.maximumVoicingDuration = 0\n"
"		.mvdIntervalNumber = 0\n"
"		for .interval to .numberOfIntervals\n"
"			.label$ = Get label of interval... 1 '.interval'\n"
"			if .label$ = \"V\"\n"
"				.start = Get start point... 1 '.interval'\n"
"				.end = Get end point... 1 '.interval'\n"
"				.duration = .end - .start\n"
"				if .duration > .maximumVoicingDuration\n"
"					.maximumVoicingDuration = .duration\n"
"					.mvdIntervalNumber = .interval\n"
"				endif\n"
"			endif\n"
"		endfor\n"
"	endif\n"
"	\n"
"	call get_feedback_text 'config.language$' PitchValues\n"
"	.pitchValues$ = get_feedback_text.text$\n"
"	.pitchValues$ = replace$(.pitchValues$, \"MAXIMUMVOICINGDUR$\", \"'.maximumVoicingDuration:1's\", 0)\n"
"	.pitchValues$ = replace$(.pitchValues$, \"VOICEDFRACTIONS$\", \"'.voicedFractions:1%'\\% \", 0)\n"
"	.pitchValues$ = replace$(.pitchValues$, \"JITTER$\", \"'.jitter:1%'\\% \", 0)\n"
"	.pitchValues$ = replace$(.pitchValues$, \"SHIMMER$\", \"'.shimmer:1%'\\% \", 0)\n"
"	.pitchValues$ = replace$(.pitchValues$, \"MEANPITCH$\", \"'.meanPitch:0'\", 0)\n"
"	.pitchValues$ = replace$(.pitchValues$, \"SDPITCH$\", \"'.sdPitch:1'\", 0)\n"
"	.pitchValues$ = replace$(.pitchValues$, \"MEDIANPITCH$\", \"'.medianPitch:0'\", 0)\n"
"	.text$ = replace$(.pitchValues$, \"--undefined--\", \"--\", 0)\n"
"	\n"
"	call get_feedback_text 'config.language$' ShortPitchValues\n"
"	.shortPitchValues$ = get_feedback_text.text$\n"
"	.shortPitchValues$ = replace$(.shortPitchValues$, \"VOICEDFRACTIONS$\", \"'.voicedFractions:1%'\\% \", 0)\n"
"	.shortPitchValues$ = replace$(.shortPitchValues$, \"JITTER$\", \"'.jitter:1%'\\% \", 0)\n"
"	.shortPitchValues$ = replace$(.shortPitchValues$, \"SHIMMER$\", \"'.shimmer:1%'\\% \", 0)\n"
"	.shortPitchValues$ = replace$(.shortPitchValues$, \"MEANPITCH$\", \"'.meanPitch:0'\", 0)\n"
"	.shortPitchValues$ = replace$(.shortPitchValues$, \"SDPITCH$\", \"'.sdPitch:1'\", 0)\n"
"	.shortText$ = replace$(.shortPitchValues$, \"--undefined--\", \"--\", 0)\n"
"\n"
"	# Calculated from van As, C.J. \"Tracheolesophageal Speech\", 2001, p88\n"
"	# Acoustic Signal Typing: Pitch\n"
"	call setPathParameter 'pathologicalParameters' Pitch '.sdPitch'\n"
"	\n"
"	.textAST$ = \"\";\n"
"	.astPitch = 0\n"
"	if .voicedFractions < 0.5\n"
"		.astPitch = 4\n"
"	elsif .sdPitch < (2.38 + 4.34) / 2\n"
"		.astPitch = 1\n"
"	elsif .sdPitch < (4.34+10.65) / 2\n"
"		.astPitch = 2\n"
"	else\n"
"		.astPitch = 3\n"
"	endif\n"
"	\n"
"	select pathologicalAutoType\n"
"	.rowIndex = Get row index... Median\n"
"	Set value... '.rowIndex' 1 -1\n"
"	.rowIndex = Get row index... Pitch\n"
"	if .rowIndex <= 0\n"
"		Insert row (index)... 1\n"
"		.rowIndex = 1\n"
"		Set row label (index)... 1 Pitch\n"
"	endif\n"
"	Set value... '.rowIndex' 1 '.astPitch'\n"
"	\n"
"	#.textAST$ = .textAST$+\"<li>Pitch: '.astPitch'</li>'newline$'\"\n"
"	\n"
"	# Calculated from van As, C.J. \"Tracheolesophageal Speech\", 2001, p88\n"
"	# Acoustic Signal Typing: Jitter Shimmer\n"
"	call setPathParameter 'pathologicalParameters' Jitter '.jitter'\n"
"	call setPathParameter 'pathologicalParameters' Shimmer '.shimmer'\n"
"\n"
"	.astJitter = 0\n"
"	if .voicedFractions < 0.5\n"
"		.astJitter = 4\n"
"	elsif .jitter < (0.029 + 0.077)/2\n"
"		.astJitter = 1\n"
"	elsif .jitter < (0.077 + 0.084)/2\n"
"		.astJitter = 2\n"
"	else\n"
"		.astJitter = 3\n"
"	endif\n"
"\n"
"	select pathologicalAutoType\n"
"	.rowIndex = Get row index... Median\n"
"	Set value... '.rowIndex' 1 -1\n"
"	.rowIndex = Get row index... Jitter\n"
"	if .rowIndex <= 0\n"
"		Insert row (index)... 1\n"
"		.rowIndex = 1\n"
"		Set row label (index)... 1 Jitter\n"
"	endif\n"
"	Set value... '.rowIndex' 1 '.astJitter'\n"
"\n"
"	#.textAST$ = .textAST$+\"<li>Jitter: '.astJitter'</li>'newline$'\"\n"
"	\n"
"	# Calculated from van As, C.J. \"Tracheolesophageal Speech\", 2001, p88\n"
"	# Acoustic Signal Typing: VoicedFraction\n"
"	call setPathParameter 'pathologicalParameters' VoicedFraction '.voicedFractions'\n"
"	call setPathParameter 'pathologicalParameters' MVD '.maximumVoicingDuration'\n"
"\n"
"	.astVoicedFraction = 0\n"
"	if .voicedFractions < 0.5\n"
"		.astVoicedFraction = 4\n"
"	elsif .voicedFractions > (1 + 0.804)/2\n"
"		.astVoicedFraction = 1\n"
"	elsif .voicedFractions > (0.804+0.745)/2\n"
"		.astVoicedFraction = 2\n"
"	else\n"
"		.astVoicedFraction = 3\n"
"	endif\n"
"	\n"
"	select pathologicalAutoType\n"
"	.rowIndex = Get row index... Median\n"
"	Set value... '.rowIndex' 1 -1\n"
"	.rowIndex = Get row index... VoicedFraction\n"
"	if .rowIndex <= 0\n"
"		Insert row (index)... 1\n"
"		.rowIndex = 1\n"
"		Set row label (index)... 1 VoicedFraction\n"
"	endif\n"
"	Set value... '.rowIndex' 1 '.astVoicedFraction'\n"
"	call autoSetPathType\n"
"	\n"
"	#.textAST$ = .textAST$+\"<li>Voice Fraction: '.astVoicedFraction'</li>'newline$'\"\n"
"\n"
"	#.shorttextAST$ = \" (AST: P-'.astPitch', J-'.astJitter', V-'.astVoicedFraction')\"\n"
"\n"
"	#.text$ = \"Pitch - Voiced: '.voicedFractions:1%'\\% , Jitter: '.jitter:1%'\\% , Shimmer: '.shimmer:1%'\\% , Mean: '.meanPitch:0' Hz, SD: '.sdPitch:1' Hz, Median: '.medianPitch:0' Hz\"\n"
"endproc\n"
"\n"
"procedure to_pitch .sound\n"
"	# Most of these do not work, van As and CC seem to be the best\n"
"	select .sound\n"
"	if config.pitchalgorithm$ = \"VanAs\"\n"
"		# Settings from C.J. van As 2001 \"Tracheoesophageal Speech\" p83\n"
"		te.pitch = noprogress To Pitch (cc)... 0 40 15 no  0.03 0.40 0.01 0.35 0.14 250\n"
"	elsif config.pitchalgorithm$ = \"CC300\"\n"
"		#  time step, Min pitch, Candidates, accurate, sil thr, voic thr., Oct cost, jump cost, VU cost, Max pitch\n"
"		te.pitch = noprogress To Pitch (cc)... 0 40 15 yes 0.03 0.40 0.045 0.35 0.14 300\n"
"	elsif config.pitchalgorithm$ = \"CC600\"\n"
"		#  time step, Min pitch, Candidates, accurate, sil thr, voic thr., Oct cost, jump cost, VU cost, Max pitch\n"
"		te.pitch = noprogress To Pitch (cc)... 0 40 15 yes 0.03 0.40 0.045 0.35 0.14 600\n"
"	elsif config.pitchalgorithm$ = \"AC\"\n"
"		te.pitch = noprogress To Pitch (ac)... 0 40 25 yes 0.03 0.40 0.1 0.5 0.2 250\n"
"	elsif config.pitchalgorithm$ = \"SHS\"\n"
"		te.pitch = noprogress To Pitch (shs)... 0.01 40 15 1250.0 15 0.84 250 48		\n"
"	elsif config.pitchalgorithm$ = \"SPINET\"\n"
"		te.pitch = noprogress To Pitch (SPINET)... 0.005 0.040 40 5000.0 250 250 20		\n"
"	else\n"
"		te.pitch = noprogress To Pitch (cc)... 0 40 15 no 0.03 0.40 0.01 0.35 0.14 250\n"
"	endif\n"
"	select te.pitch\n"
"endproc\n"
"\n"
"procedure extractRahmonicPart .table .begin .end\n"
"	select .table\n"
"	.name$ = selected$(\"Table\")\n"
"	.tmp = Copy... '.name$'_part\n"
"	if .begin != 0 or .end != 0\n"
"		.numRows = Get number of rows\n"
"		for .i to .numRows\n"
"			.row = .numRows +1 - .i\n"
"			.time = Get value... '.row' time\n"
"			if .time < .begin or .time > .end\n"
"				select .tmp\n"
"				Remove row... '.row'\n"
"			endif\n"
"		endfor\n"
"	endif\n"
"	select .tmp\n"
"endproc\n"
"procedure calculateCepstralRahmonic\n"
"	.windowsize = 0.025\n"
"	.pitchFloor = 3/.windowsize\n"
"	.timestep = 0.02\n"
"	.maxfreq = 5000\n"
"	.preEmphasis = 50\n"
"	\n"
"	.cutStart = selectedStartTime\n"
"	.cutEnd = selectedStartTime\n"
"	if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"		.cutStart = 0\n"
"		.cutEnd = 0\n"
"	endif\n"
"	if config.useCache >= 0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Rahmonic\")\n"
"		.tmpCepstralRahmonic = Read from file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Rahmonic\n"
"		call extractRahmonicPart '.tmpCepstralRahmonic' 'selectedStartTime' 'selectedEndTime'\n"
"		te.cepstralRahmonic = selected()\n"
"		select .tmpCepstralRahmonic\n"
"		Remove\n"
"		select te.cepstralRahmonic\n"
"	else\n"
"		select te.openSound\n"
"		.tmpPartSoundID = Extract part... '.cutStart' '.cutEnd' rectangular 1.0 true\n"
"		.cepstrogram = noprogress To PowerCepstrogram... .pitchFloor .timestep .maxfreq .preEmphasis\n"
"		te.cepstralRahmonic = noprogress To Table (peak prominence)... 30 300 0.05 Cubic 0.001 0 Straight Robust\n"
"		select .tmpPartSoundID\n"
"		plus .cepstrogram\n"
"		Remove\n"
"		select te.cepstralRahmonic\n"
"		if config.useCache >=0 and fileReadable(\"'currentDirectoryName$''localCacheDir$'\")\n"
"			Save as binary file... 'currentDirectoryName$''localCacheDir$'/'currentSoundName$'.Rahmonic\n"
"			call extractRahmonicPart 'te.cepstralRahmonic' 'selectedStartTime' 'selectedEndTime'\n"
"			.tmp = selected()\n"
"			select te.cepstralRahmonic\n"
"			Remove\n"
"			te.cepstralRahmonic = .tmp\n"
"		endif\n"
"	endif\n"
"	select te.cepstralRahmonic\n"
"	.max = Get maximum... cpp\n"
"	.mean = Get mean... cpp\n"
"	.sd = Get standard deviation... cpp\n"
"	call setPathParameter 'pathologicalParameters' CepsRahm '.max'\n"
"endproc\n"
"\n"
"# Do not recalculate needlessly\n"
"te.gneValue = 0\n"
"te.harmLowValue = 0\n"
"te.harmHighValue = 0\n"
"procedure calculateHarmonicityValues\n"
"	.maxHarmonicity = 0\n"
"	.minHarmonicity = 0\n"
"	.meanHarmonicity = 0\n"
"	.sdHarmonicity = 0\n"
"	.shorttextAST$ = \"\"\n"
"\n"
"	if te.harmonicity > 0\n"
"		select te.harmonicity\n"
"		.maxHarmonicity = Get maximum... 'selectedStartTime' 'selectedEndTime' Parabolic\n"
"		.minHarmonicity = Get minimum... 'selectedStartTime' 'selectedEndTime' Parabolic\n"
"		.meanHarmonicity = Get mean... 'selectedStartTime' 'selectedEndTime'\n"
"		.sdHarmonicity = Get standard deviation... 'selectedStartTime' 'selectedEndTime'\n"
"		\n"
"		# Calculate GNE on segment (if segment is larger than 60ms)\n"
"		if config.calcGNE and selectedEndTime - selectedStartTime > 0.06\n"
"			if .previousHarmonicity != te.harmonicity or .previousSelectedGNEStartTime != selectedStartTime or .previousSelectedGNEEndTime != selectedEndTime\n"
"				call sound2GNEvalue 'selectedStartTime' 'selectedEndTime'\n"
"				.gneID = selected()\n"
"				te.gneValue = Get maximum... 0 0 Sinc70\n"
"				select .gneID\n"
"				Remove\n"
"				\n"
"				.previousSelectedGNEStartTime = selectedStartTime\n"
"				.previousSelectedGNEEndTime = selectedEndTime\n"
"				.previousHarmonicity = te.harmonicity\n"
"			endif\n"
"		else\n"
"			te.gneValue = 0\n"
"		endif\n"
"		if te.calcLowHighHNR\n"
"			# Calculate Harmonicity value < 700Hz\n"
"			call sound2Harm_low 'selectedStartTime' 'selectedEndTime'\n"
"			.harmLowID = selected()\n"
"			te.harmLowValue = Get maximum... 0 0 Parabolic\n"
"			select .harmLowID\n"
"			Remove\n"
"			# Calculate 700 < Harmonicity value < 2300Hz\n"
"			call sound2Harm_high 'selectedStartTime' 'selectedEndTime'\n"
"			.harmHighID = selected()\n"
"			te.harmHighValue = Get maximum... 0 0 Parabolic\n"
"			select .harmHighID\n"
"			Remove\n"
"		endif\n"
"	else\n"
"		te.gneValue = 0\n"
"		te.harmLowValue = 0\n"
"		te.harmHighValue = 0\n"
"	endif\n"
"	\n"
"	call get_feedback_text 'config.language$' HarmonicityValues\n"
"	.hnrValues$ = get_feedback_text.text$\n"
"	.hnrValues$ = replace$(.hnrValues$, \"MAXHARMONICITY$\", \"'.maxHarmonicity:1'\", 0)\n"
"	.hnrValues$ = replace$(.hnrValues$, \"MINHARMONICITY$\", \"'.minHarmonicity:1'\", 0)\n"
"	.hnrValues$ = replace$(.hnrValues$, \"MEANHARMONICITY$\", \"'.meanHarmonicity:1'\", 0)\n"
"	.hnrValues$ = replace$(.hnrValues$, \"SDHARMONICITY$\", \"'.sdHarmonicity:2'\", 0)\n"
"	if config.calcGNE\n"
"		.hnrValues$ = replace$(.hnrValues$, \"GNEVALUE$\", \"'te.gneValue:3'\", 0)\n"
"	else\n"
"		.hnrValues$ = replace$(.hnrValues$, \"GNEVALUE$\", \"-\", 0)\n"
"	endif\n"
"	.text$ = .hnrValues$\n"
"\n"
"	call get_feedback_text 'config.language$' ShortHarmonicityValues\n"
"	.shortHnrValues$ = get_feedback_text.text$\n"
"	.shortHnrValues$ = replace$(.shortHnrValues$, \"MAXHARMONICITY$\", \"'.maxHarmonicity:1'\", 0)\n"
"	.shortHnrValues$ = replace$(.shortHnrValues$, \"MINHARMONICITY$\", \"'.minHarmonicity:1'\", 0)\n"
"	.shortHnrValues$ = replace$(.shortHnrValues$, \"MEANHARMONICITY$\", \"'.meanHarmonicity:1'\", 0)\n"
"	.shortHnrValues$ = replace$(.shortHnrValues$, \"SDHARMONICITY$\", \"'.sdHarmonicity:2'\", 0)\n"
"	if config.calcGNE\n"
"		.shortHnrValues$ = replace$(.shortHnrValues$, \"GNEVALUE$\", \"'te.gneValue:3'\", 0)\n"
"	else\n"
"		.shortHnrValues$ = replace$(.shortHnrValues$, \"GNEVALUE$\", \"-\", 0)\n"
"	endif\n"
"	.shortText$ = .shortHnrValues$\n"
"\n"
"\n"
"	.textAST$ = \"\";\n"
"	# Calculated from van As, C.J. \"Tracheolesophageal Speech\", 2001, p88\n"
"	# Acoustic Signal Typing: HNR\n"
"	call setPathParameter 'pathologicalParameters' HNR '.meanHarmonicity'\n"
"\n"
"	.astHNR = 0\n"
"	if .meanHarmonicity > (10.14 + 4.25) / 2\n"
"		.astHNR = 1\n"
"	elsif .meanHarmonicity > (4.25 + 3.85) / 2\n"
"		.astHNR = 2\n"
"	elsif .meanHarmonicity > (3.85) / 2\n"
"		.astHNR = 3\n"
"	else\n"
"		.astHNR = 3\n"
"	endif\n"
"	#.textAST$ = .textAST$+\"<li>HNR: '.astHNR'</li>'newline$'\"\n"
"\n"
"	select pathologicalAutoType\n"
"	.rowIndex = Get row index... Median\n"
"	Set value... '.rowIndex' 1 -1\n"
"	.rowIndex = Get row index... Harmonicity\n"
"	if .rowIndex <= 0\n"
"		Insert row (index)... 1\n"
"		.rowIndex = 1\n"
"		Set row label (index)... 1 Harmonicity\n"
"	endif\n"
"	Set value... '.rowIndex' 1 '.astHNR'\n"
"	\n"
"	# Calculated from van As, C.J. \"Tracheolesophageal Speech\", 2001, p88\n"
"	# Acoustic Signal Typing: GNE\n"
"	call setPathParameter 'pathologicalParameters' GNE 'te.gneValue'\n"
"	# Different from\n"
"	# van Gogh et al. (2005) Acoustical analysis of tracheoesophageal voice. \n"
"	# Speech Communication, 47.\n"
"	call setPathParameter 'pathologicalParameters' HNRlow 'te.harmLowValue'\n"
"	call setPathParameter 'pathologicalParameters' HNRhigh 'te.harmHighValue'\n"
"\n"
"	.astGNE = 0\n"
"	if te.gneValue > (0.82 + 0.82) / 2\n"
"		.astGNE = 1\n"
"	elsif te.gneValue > (0.77 + 0.82) / 2\n"
"		.astGNE = 2\n"
"	elsif te.gneValue > (0.77 + 0.72) / 2\n"
"		.astGNE = 3\n"
"	else\n"
"		.astGNE = 4\n"
"	endif\n"
"	#.textAST$ = .textAST$+\"<li>GNE: '.astGNE'</li>'newline$'\"\n"
"	#.shorttextAST$ = \" (AST: H-'.astHNR', G-'.astGNE')\"\n"
"\n"
"	select pathologicalAutoType\n"
"	.rowIndex = Get row index... Median\n"
"	Set value... '.rowIndex' 1 -1\n"
"	.rowIndex = Get row index... GNE\n"
"	if .rowIndex <= 0\n"
"		Insert row (index)... 1\n"
"		.rowIndex = 1\n"
"		Set row label (index)... 1 GNE\n"
"	endif\n"
"	Set value... '.rowIndex' 1 '.astGNE'\n"
"	call autoSetPathType\n"
"	\n"
"	#.text$ = \"Harmonicity - Max.: '.maxHarmonicity:1' dB, Min.: '.minHarmonicity:1' dB, Mean: '.meanHarmonicity:1' dB, SD: '.sdHarmonicity:2' dB, GNE: 'te.gneValue:3'\"\n"
"endproc\n"
"\n"
"procedure calculateRatingValues\n"
"	.shorttextAST$ = \"\"\n"
"	.textAST$ = \"\";\n"
"	.text$ = \"\";\n"
"endproc\n"
"\n"
"procedure calculateIntensityValues\n"
"	.maxIntensity = 0\n"
"	.maxTimeIntensity = 0\n"
"	.minIntensity = 0\n"
"	.meanIntensity = 0\n"
"	.sdIntensity = 0\n"
"	.shorttextAST$ = \"\"\n"
"\n"
"	if intensityName$ <> \"\"\n"
"		select Intensity 'intensityName$'\n"
"		.maxIntensity = Get maximum... 'selectedStartTime' 'selectedEndTime' Parabolic\n"
"		.maxTimeIntensity = Get time of maximum... 'selectedStartTime' 'selectedEndTime' Parabolic\n"
"		\n"
"		.minIntensity = Get minimum... 'selectedStartTime' 'selectedEndTime' Parabolic\n"
"		.meanIntensity = Get mean... 'selectedStartTime' 'selectedEndTime' energy\n"
"		.sdIntensity = Get standard deviation... 'selectedStartTime' 'selectedEndTime'\n"
"	endif\n"
"	\n"
"	call get_feedback_text 'config.language$' IntensityValues\n"
"	.intensityValues$ = get_feedback_text.text$\n"
"	.intensityValues$ = replace$(.intensityValues$, \"MAXINTENSITY$\", \"'.maxIntensity:1'\", 0)\n"
"	.intensityValues$ = replace$(.intensityValues$, \"MININTENSITY$\", \"'.minIntensity:1'\", 0)\n"
"	.intensityValues$ = replace$(.intensityValues$, \"MEANINTENSITY$\", \"'.meanIntensity:1'\", 0)\n"
"	.intensityValues$ = replace$(.intensityValues$, \"SDINTENSITY$\", \"'.sdIntensity:2'\", 0)\n"
"	.text$ = .intensityValues$\n"
"\n"
"	#.text$ = \"Intensity - Max.: '.maxIntensity:1' dB, Min.: '.minIntensity:1' dB, Mean: '.meanIntensity:1' dB, SD: '.sdIntensity:2' dB\"\n"
"endproc\n"
"\n"
"procedure calculateLtasValues\n"
"	.maxFrequency = 0\n"
"	.minFrequency = 0\n"
"	.cog = 0\n"
"	.highPower = 0\n"
"	.lowPower = 0\n"
"	.shorttextAST$ = \"\"\n"
"\n"
"	if ltasName$ <> \"\"\n"
"		select Ltas 'ltasName$'\n"
"		.maxFrequency = Get frequency of maximum... 0 'config.frequency' Parabolic\n"
"		.minFrequency = Get frequency of minimum... 0 'config.frequency' Parabolic\n"
"		.productFreq = 0\n"
"		.sumPower = 0\n"
"		.bed = 0\n"
"		\n"
"		.numBins = Get number of bins\n"
"		for .i to .numBins\n"
"			.freq = Get frequency from bin number... '.i'\n"
"			.power = Get value in bin... '.i'\n"
"			.energy = 10^(.power/10)\n"
"			.productFreq += .freq * .energy\n"
"			.sumPower += .energy\n"
"		endfor\n"
"		if .sumPower > 0\n"
"			.cog = .productFreq / .sumPower\n"
"		endif\n"
"		.startBin = Get bin number from frequency... 0\n"
"		.endBin = Get bin number from frequency... 500\n"
"		for .i from .startBin to .endBin\n"
"			.power = Get value in bin... '.i'\n"
"			.lowPower += 10 ^ (.power / 10)\n"
"		endfor\n"
"		.lowPower /= .endBin - .startBin + 1\n"
"		\n"
"		.startBin = Get bin number from frequency... 4000\n"
"		.endBin = Get bin number from frequency... 5000\n"
"		for .i from .startBin to .endBin\n"
"			.power = Get value in bin... '.i'\n"
"			.highPower += 10 ^ (.power / 10)\n"
"		endfor\n"
"		.highPower /= .endBin - .startBin + 1\n"
"		if .highPower > 0\n"
"			.bed = 10 * log10(.lowPower / .highPower)\n"
"		endif\n"
"	endif\n"
"	\n"
"	call get_feedback_text 'config.language$' LtasValues\n"
"	.ltasValues$ = get_feedback_text.text$\n"
"	.ltasValues$ = replace$(.ltasValues$, \"MAXFREQUENCY$\", \"'.maxFrequency:0'\", 0)\n"
"	.ltasValues$ = replace$(.ltasValues$, \"MINFREQUENCY$\", \"'.minFrequency:0'\", 0)\n"
"	.ltasValues$ = replace$(.ltasValues$, \"BED$\", \"'.bed:1'\", 0)\n"
"	.ltasValues$ = replace$(.ltasValues$, \"COG$\", \"'.cog:0'\", 0)\n"
"	.ltasValues$ = replace$(.ltasValues$, \"SELECTEDSTARTTIME$\", \"'selectedStartTime:3'\", 0)\n"
"	.ltasValues$ = replace$(.ltasValues$, \"SELECTEDENDTIME$\", \"'selectedEndTime:3'\", 0)\n"
"	.text$ = .ltasValues$\n"
"\n"
"	call get_feedback_text 'config.language$' ShortLtasValues\n"
"	.shortLtasValues$ = get_feedback_text.text$\n"
"	.shortLtasValues$ = replace$(.shortLtasValues$, \"MAXFREQUENCY$\", \"'.maxFrequency:0'\", 0)\n"
"	.shortLtasValues$ = replace$(.shortLtasValues$, \"BED$\", \"'.bed:1'\", 0)\n"
"	.shortLtasValues$ = replace$(.shortLtasValues$, \"COG$\", \"'.cog:0'\", 0)\n"
"	.shortText$ = .shortLtasValues$\n"
"\n"
"	.textAST$ = \"\";\n"
"	# Calculated from van As, C.J. \"Tracheolesophageal Speech\", 2001, p88\n"
"	# Acoustic Signal Typing: BED\n"
"	call setPathParameter 'pathologicalParameters' BED '.bed'\n"
"\n"
"	.astBED = 0\n"
"	if .bed > (24.8 + 22.9) / 2\n"
"		.astBED = 1\n"
"	elsif .bed > (22.9 + 17.0) / 2\n"
"		.astBED = 2\n"
"	elsif .bed > (17.0 + 10.0) / 2\n"
"		.astBED = 3\n"
"	else\n"
"		.astBED = 4\n"
"	endif\n"
"	#.textAST$ = .textAST$+\"<li>BED: '.astBED'</li>'newline$'\"\n"
"	#.shorttextAST$ = \" (AST: B-'.astBED')\"\n"
"	\n"
"	select pathologicalAutoType\n"
"	.rowIndex = Get row index... Median\n"
"	Set value... '.rowIndex' 1 -1\n"
"	.rowIndex = Get row index... Median\n"
"	Set value... '.rowIndex' 1 -1\n"
"	.rowIndex = Get row index... BED\n"
"	if .rowIndex <= 0\n"
"		Insert row (index)... 1\n"
"		.rowIndex = 1\n"
"		Set row label (index)... 1 BED\n"
"	endif\n"
"	Set value... '.rowIndex' 1 '.astBED'\n"
"	call autoSetPathType\n"
"	\n"
"	#.text$ = \"Ltas - Max.: '.maxFrequency:0' Hz, Min.: '.minFrequency:0' Hz, BED: '.bed:1' dB, CoG: '.cog:0' Hz  ['selectedStartTime:3', 'selectedEndTime:3'] sec\"\n"
"endproc\n"
"\n"
"procedure calculateSoundValues\n"
"	.text$ = \"\"\n"
"	.shorttextAST$ = \"\"\n"
"endproc\n"
"\n"
"procedure calculatePitchTierValues\n"
"	call calculatePitchValues\n"
"	.text$ = calculatePitchValues.text$\n"
"	.shorttextAST$ = \"\"\n"
"endproc\n"
"\n"
"procedure calculateTimeValues\n"
"	call get_feedback_text 'config.language$' TimeValues\n"
"	.timeValues$ = get_feedback_text.text$\n"
"	.timeValues$ = replace$(.timeValues$, \"SELECTEDSTARTTIME$\", \"'selectedStartTime:3:0'\", 0)\n"
"	.timeValues$ = replace$(.timeValues$, \"SELECTEDENDTIME$\", \"'selectedEndTime:3:0'\", 0)\n"
"	.selectedInterval = selectedEndTime - selectedStartTime\n"
"	.timeValues$ = replace$(.timeValues$, \"SELECTEDINTERVAL$\", \"'.selectedInterval:3:0'\", 0)\n"
"	\n"
"	.text$ = .timeValues$\n"
"	.shorttextAST$ = \"\"\n"
"endproc\n"
"\n"
"procedure calculateSpectrogramValues\n"
"	.text$ = \"\"\n"
"	.shorttextAST$ = \"\"\n"
"	\n"
"	if te.formant > 0\n"
"		select te.formant\n"
"		.medianF1 = Get quantile... 1 'selectedStartTime' 'selectedEndTime' Hertz 0.50\n"
"		.medianB1 = Get quantile of bandwidth... 1 'selectedStartTime' 'selectedEndTime' Hertz 0.50\n"
"		.qualityF1 = .medianF1 / .medianB1\n"
"		.medianF2 = Get quantile... 2 'selectedStartTime' 'selectedEndTime' Hertz 0.50\n"
"		.medianB2 = Get quantile of bandwidth... 2 'selectedStartTime' 'selectedEndTime' Hertz 0.50\n"
"		.qualityF2 = .medianF2 / .medianB2\n"
"		.medianF3 = Get quantile... 3 'selectedStartTime' 'selectedEndTime' Hertz 0.50\n"
"		.medianB3 = Get quantile of bandwidth... 3 'selectedStartTime' 'selectedEndTime' Hertz 0.50\n"
"		.qualityF3 = .medianF3 / .medianB3\n"
"		.medianF4 = Get quantile... 4 'selectedStartTime' 'selectedEndTime' Hertz 0.50\n"
"		.medianB4 = Get quantile of bandwidth... 4 'selectedStartTime' 'selectedEndTime' Hertz 0.50\n"
"		.qualityF4 = .medianF4 / .medianB4\n"
"		\n"
"		call get_feedback_text 'config.language$' SpectrumValues\n"
"		.spectrumValues$ = get_feedback_text.text$\n"
"		.spectrumValues$ = replace$(.spectrumValues$, \"QUALITYF1$\", \"'.qualityF1:0'\", 0)\n"
"		.spectrumValues$ = replace$(.spectrumValues$, \"QUALITYF2$\", \"'.qualityF2:0'\", 0)\n"
"		.spectrumValues$ = replace$(.spectrumValues$, \"QUALITYF3$\", \"'.qualityF3:0'\", 0)\n"
"		.spectrumValues$ = replace$(.spectrumValues$, \"QUALITYF4$\", \"'.qualityF4:0'\", 0)\n"
"		.text$ = .spectrumValues$\n"
"		call setPathParameter 'pathologicalParameters' QF1 '.qualityF1'\n"
"		call setPathParameter 'pathologicalParameters' QF2 '.qualityF2'\n"
"		call setPathParameter 'pathologicalParameters' QF3 '.qualityF3'\n"
"		call setPathParameter 'pathologicalParameters' QF4 '.qualityF4'\n"
"	endif\n"
"endproc\n"
"\n"
"# Predict AST and VQ from \"learned\" formulas\n"
"\n"
"procedure predictVQ_LM .vf .hnr .pitch\n"
"	.vq = 0\n"
"	.i_vq = 0\n"
"	if .vf > 0\n"
"		.i_vq = 1.457596 * .vf - 0.042732 * .hnr - 0.008651 * .pitch + 2.015532\n"
"		.vq = (.i_vq - 1) * 250 + 125\n"
"		if .vq < 0\n"
"			.vq = 0\n"
"		elsif .vq > 1000\n"
"			.vq = 1000\n"
"		endif\n"
"	endif\n"
"endproc\n"
"\n"
"# Recursive Partitioning\n"
"procedure predictAST_RPart .vf .mvd .hnr .hnrLow  .hnrHigh .shimmer .jitter .crmax .gne .bed .qf3\n"
"	.ast = 0\n"
"	if .vf > 0.0001\n"
"		# With Pitch\n"
"		if .vf >= 0.508\n"
"			if .vf >= 0.998\n"
"				.ast = 1.353\n"
"			else\n"
"				if .mvd >= 2.731\n"
"					.ast = 1.885\n"
"				else\n"
"					.ast = 2.357\n"
"				endif\n"
"			endif\n"
"		else\n"
"			if .vf >= 0.0715\n"
"				.ast = 3.176\n"
"			else\n"
"				.ast = 3.8\n"
"			endif\n"
"		endif		\n"
"	else\n"
"		.ast = 4\n"
"	endif\n"
"endproc\n"
"\n"
"procedure predictVQvalue\n"
"	.drawingSetting = noDrawingOrWriting\n"
"	noDrawingOrWriting = 1\n"
"	# Get current values\n"
"	# AST ~ VF + HNR + Pitch\n"
"	# Use:\n"
"	# lm\n"
"	# AST ~ VF + HNR + Pitch\n"
"\n"
"	# MVD + VF + Pitch + Jitter + Shimmer\n"
"	call DrawPitchObject\n"
"	call calculatePitchValues\n"
"	call getPathParameter 'pathologicalParameters' MVD\n"
"	.mvd = getPathParameter.value\n"
"	call getPathParameter 'pathologicalParameters' VoicedFraction\n"
"	.vf = getPathParameter.value\n"
"	call getPathParameter 'pathologicalParameters' Pitch\n"
"	.pitch = getPathParameter.value\n"
"	call getPathParameter 'pathologicalParameters' Jitter\n"
"	.jitter = getPathParameter.value\n"
"	call getPathParameter 'pathologicalParameters' Shimmer\n"
"	.shimmer = getPathParameter.value\n"
"	\n"
"	# HNR, HNRlow/high etc\n"
"	.hnr = 0\n"
"	call DrawHarmonicityObject\n"
"	call calculateHarmonicityValues\n"
"	call getPathParameter 'pathologicalParameters' HNR\n"
"	.hnr = getPathParameter.value\n"
"	\n"
"	# The Formula\n"
"	call predictVQ_LM .vf .hnr .pitch\n"
"	.vq = predictVQ_LM.vq\n"
"	\n"
"	noDrawingOrWriting = .drawingSetting\n"
"	\n"
"endproc\n"
"\n"
"procedure predictASTvalue\n"
"	.drawingSetting = noDrawingOrWriting\n"
"	noDrawingOrWriting = 1\n"
"	# Get current values\n"
"	# AST ~ MVD + QF3 + VF + Pitch + Jitter + Shimmer+ HNR + GNE + BED\n"
"	# Use:\n"
"	# RPart\n"
"	# AST ~ VF + MVD\n"
"	.useValues = 0\n"
"\n"
"	# MVD + VF + Pitch + Jitter + Shimmer\n"
"	call DrawPitchObject\n"
"	call calculatePitchValues\n"
"	call getPathParameter 'pathologicalParameters' MVD\n"
"	.mvd = getPathParameter.value\n"
"	call getPathParameter 'pathologicalParameters' VoicedFraction\n"
"	.vf = getPathParameter.value\n"
"	call getPathParameter 'pathologicalParameters' Pitch\n"
"	.pitch = getPathParameter.value\n"
"	call getPathParameter 'pathologicalParameters' Jitter\n"
"	.jitter = getPathParameter.value\n"
"	call getPathParameter 'pathologicalParameters' Shimmer\n"
"	.shimmer = getPathParameter.value\n"
"	\n"
"	# Cepstral Rahmonic\n"
"	.crmax = 0\n"
"	if .useValues\n"
"		call calculateCepstralRahmonic\n"
"		call getPathParameter 'pathologicalParameters' CepsRahm\n"
"		.crmax = getPathParameter.value\n"
"	endif\n"
"	\n"
"	\n"
"	# QF1-3\n"
"	.qf1 = 0\n"
"	.qf2 = 0\n"
"	.qf3 = 0\n"
"	if .useValues\n"
"		call DrawSpectrogramObject\n"
"		call calculateSpectrogramValues\n"
"		call getPathParameter 'pathologicalParameters' QF1\n"
"		.qf1 = getPathParameter.value\n"
"		call getPathParameter 'pathologicalParameters' QF2\n"
"		.qf2 = getPathParameter.value\n"
"		call getPathParameter 'pathologicalParameters' QF3\n"
"		.qf3 = getPathParameter.value\n"
"	endif\n"
"	\n"
"	# HNR + GNE\n"
"	.hnr = 0\n"
"	.hnrLow = 0\n"
"	.hnrHigh = 0\n"
"	.gne = 0	\n"
"	if .useValues\n"
"		call DrawHarmonicityObject\n"
"		te.calcLowHighHNR = 1\n"
"		call calculateHarmonicityValues\n"
"		te.calcLowHighHNR = 0\n"
"		call getPathParameter 'pathologicalParameters' HNR\n"
"		.hnr = getPathParameter.value\n"
"		call getPathParameter 'pathologicalParameters' HNRlow\n"
"		.hnrLow = getPathParameter.value\n"
"		call getPathParameter 'pathologicalParameters' HNRhigh\n"
"		.hnrHigh = getPathParameter.value\n"
"		call getPathParameter 'pathologicalParameters' GNE\n"
"		.gne = getPathParameter.value\n"
"	endif\n"
"		\n"
"	# BED\n"
"	.bed = 0\n"
"	if .useValues\n"
"		call DrawLtasObject\n"
"		call calculateLtasValues\n"
"		call getPathParameter 'pathologicalParameters' BED\n"
"		.bed = getPathParameter.value\n"
"	endif\n"
"	\n"
"	# If VF = 0, pitch derived parameters do not make sense\n"
"	if .vf = 0\n"
"		.pitch = undefined\n"
"		.jitter = undefined\n"
"		.shimmer = undefined\n"
"		.hnr = undefined\n"
"		.hnrLow = undefined\n"
"		.hnrHigh = undefined\n"
"		.gne = undefined\n"
"		.crmax = undefined\n"
"	endif\n"
"	\n"
"	# The Formula\n"
"	.astLM = -1\n"
"	.astRPart = -1\n"
"	# call predictLM .vf .mvd .hnr .hnrLow  .hnrHigh .shimmer .jitter .crmax .gne .bed .qf3\n"
"	# .astLM = predictLM.ast\n"
"	call predictAST_RPart .vf .mvd .hnr .hnrLow  .hnrHigh .shimmer .jitter .crmax .gne .bed .qf3\n"
"	.astRPart = predictAST_RPart.ast\n"
"	\n"
"	.ast = .astRPart\n"
"	noDrawingOrWriting = .drawingSetting\n"
"	\n"
"endproc\n"
"\n"
"# Select a window based on maxTimeHaronicity\n"
"procedure selectMaxTimeHarmonicity	\n"
"	# Has maxTimeHaronicity been calculated?\n"
"	if maxTimeHarmonicity <= 0\n"
"		call calcMaxHarmonicity te.openSound\n"
"		maxTimeHarmonicity = calcMaxHarmonicity.time\n"
"	endif\n"
"	\n"
"	# Set selection window around the maxTimeHarmonicity\n"
"	if maxTimeHarmonicity > config.selectionWindow / 2\n"
"		selectedStartTime = maxTimeHarmonicity - config.selectionWindow / 2\n"
"	else\n"
"		selectedStartTime = 0\n"
"	endif\n"
"	selectedEndTime = selectedStartTime + config.selectionWindow\n"
"	if selectedEndTime > currentEndTime\n"
"		selectedEndTime = currentEndTime\n"
"		selectedStartTime = selectedEndTime - config.selectionWindow\n"
"	endif\n"
"endproc\n"
"\n"
"# Get best selection to predict AST. This will set a new selection\n"
"procedure argMinASTselection\n"
"	# Initialization\n"
"	.originalStartTime = selectedStartTime\n"
"	.originalEndTime = selectedEndTime\n"
"	.intervalLength = config.selectionWindow\n"
"	.deltaTime = .intervalLength / 10\n"
"	.bestStartTime = selectedStartTime\n"
"	.bestEndTime = selectedEndTime\n"
"	.currentASTMinimum = 10**10\n"
"	\n"
"	# Set up the first interval (Start at end)\n"
"	selectedEndTime = currentEndTime\n"
"	selectedStartTime = selectedEndTime - .intervalLength\n"
"	if selectedStartTime < currentStartTime\n"
"		selectedStartTime = currentStartTime\n"
"	endif\n"
"	.bestStartTime = selectedStartTime\n"
"	.bestEndTime = selectedEndTime\n"
"	call predictASTvalue\n"
"	.currentASTMinimum = predictASTvalue.ast\n"
"	.ast = .currentASTMinimum\n"
"	selectedStartTime = currentStartTime\n"
"	selectedEndTime = selectedStartTime + .intervalLength	\n"
"	\n"
"	# Step through sound\n"
"	while selectedEndTime <= currentEndTime\n"
"		call predictASTvalue\n"
"		if .currentASTMinimum > predictASTvalue.ast\n"
"			.currentASTMinimum = predictASTvalue.ast\n"
"			.bestStartTime = selectedStartTime\n"
"			.bestEndTime = selectedEndTime\n"
"		endif\n"
"		selectedStartTime += .deltaTime\n"
"		selectedEndTime = selectedStartTime + .intervalLength	\n"
"	endwhile\n"
"	\n"
"	# Set up best values\n"
"	selectedStartTime = .bestStartTime\n"
"	selectedEndTime = .bestEndTime\n"
"	.ast = .currentASTMinimum\n"
"	predictedPathType = round(.ast)\n"
"endproc\n"
"\n"
"# Procedures involved in the Rating screen\n"
"procedure get_RatingValues .speakerDataTable .ratingTable\n"
"	if .speakerDataTable > 0 and .ratingTable > 0\n"
"		select .ratingTable\n"
"		.numRatingRows = Get number of rows\n"
"		for .ratingRow to .numRatingRows\n"
"			select .ratingTable\n"
"			.ratingKey$ = Get value... .ratingRow Label\n"
"			if startsWith(.ratingKey$, \">\") or startsWith(.ratingKey$, \"()\")\n"
"				.variableName$ = replace_regex$(.ratingKey$, \"^[^a-zA-Z]+([A-Za-z])\", \"\\l\\1\", 0)\n"
"			else\n"
"				.variableName$ = .ratingKey$\n"
"			endif\n"
"			if index(.ratingKey$, \"_\")\n"
"				.variableName$ = replace_regex$(.variableName$, \"_.*$\", \"\", 0)\n"
"			endif\n"
"			.variableName$ = replace_regex$(.variableName$, \"^([A-Za-z])\", \"\\l\\1\", 0)\n"
"			if index_regex(.variableName$, \"[$,:;!]\") <= 0\n"
"				call get_speakerInfo 'speakerID$'\n"
"				.row = get_speakerInfo.row\n"
"				select .speakerDataTable\n"
"				.column = Get column index... Rating.'.variableName$'\n"
"				'.variableName$' = -1\n"
"				if .row > 0\n"
"					if .column > 0\n"
"						# Clean up earlier values\n"
"						rating.'.variableName$' = -1\n"
"						rating.'.variableName$'ArrayLength = 0\n"
"						rating.'.variableName$'Array[1] = -1\n"
"						.valueTxt$ = Get value... .row Rating.'.variableName$'\n"
"						.value = Get value... .row Rating.'.variableName$'\n"
"						if not .value = undefined\n"
"							rating.'.variableName$' = (.value - 1)/999\n"
"							rating.'.variableName$'$ = \"'.value'\"\n"
"						endif\n"
"						# Ranges\n"
"						if index(.valueTxt$, \";\")\n"
"							rating.'.variableName$'ArrayLength = 0\n"
"							while index_regex(.valueTxt$, \"[0-9]\") > 0\n"
"								rating.'.variableName$'ArrayLength += 1\n"
"								.value = extractNumber(.valueTxt$, \"\")\n"
"								rating.'.variableName$'Array['.variableName$'ArrayLength] = (.value - 1)/999\n"
"								if index(.valueTxt$, \";\")\n"
"									.valueTxt$ = right$(.valueTxt$, (length(.valueTxt$) - index(.valueTxt$, \";\")))\n"
"								else\n"
"									.valueTxt$ = \"\"\n"
"								endif\n"
"							endwhile\n"
"						endif\n"
"					else\n"
"						select .speakerDataTable\n"
"						Append column... Rating.'.variableName$'\n"
"					endif\n"
"				endif\n"
"			endif\n"
"		endfor\n"
"	endif\n"
"endproc\n"
"\n"
"procedure set_RatingValues .speakerDataTable .variable$ .value$\n"
"	if .speakerDataTable > 0\n"
"		call get_speakerInfo 'speakerID$'\n"
"		.row = get_speakerInfo.row\n"
"		select .speakerDataTable\n"
"		.numRows = Get number of rows\n"
"		if .row <= 0 or .row > .numRows\n"
"			.row = 1\n"
"		endif\n"
"		.tableValue = ('.value$'*999) + 1\n"
"		# Check if column exists\n"
"		.col = Get column index: .variable$\n"
"		if .col <= 0\n"
"			Append column: .variable$\n"
"		endif\n"
"		Set numeric value... .row '.variable$' '.tableValue:0'\n"
"		\n"
"		call WriteSpeakerData\n"
"		\n"
"	endif\n"
"endproc\n"
"\n"
"procedure set_RawRatingValues .speakerDataTable .variable$ .value$\n"
"	if .speakerDataTable > 0\n"
"		call get_speakerInfo 'speakerID$'\n"
"		.row = get_speakerInfo.row\n"
"		select .speakerDataTable\n"
"		.numRows = Get number of rows\n"
"		if .row <= 0 or .row > .numRows\n"
"			.row = 1\n"
"		endif\n"
"		# Check if column exists\n"
"		.col = Get column index: .variable$\n"
"		if .col <= 0\n"
"			Append column: .variable$\n"
"		endif\n"
"		Set numeric value... .row '.variable$' '.value$'\n"
"		\n"
"		call WriteSpeakerData\n"
"		\n"
"	endif\n"
"endproc\n"
"\n"
"# Rating scales can be \"linked\", or rather \"shackled\".\n"
"# If columns \"Link\" and \"Value\" exist in a Rating table, they are read \n"
"# for each button clicked. Other buttons with the same \"Link\" entry\n"
"# as the button clicked will be set to the numeric \"Value\" given for \n"
"# that button.\n"
"# Example (white-space is tab):\n"
"# >Hypertonicity	5	80	51	55	Black	DrawNull	Tonicity	1\n"
"# >Hypotonicity	5	80	41	45	Black	DrawNull	Tonicity	1\n"
"#\n"
"# The above example results in Hypotonicity being set to a fraction of 1\n"
"# of the scale, i.e., the rightmost value, whenever\n"
"# Hypertonicity is clicked. If the second line had ended in \"0\",\n"
"# Hypotonicity would be set to zero when Hypertonicity was clicked,\n"
"# but clicking Hypotonicity would have set Hypertonicity to its maximal\n"
"# value, e.g., 1000 if that is the value of full scale.\n"
"# \n"
"procedure link_RatingValues .ratingTable .speakerTable .buttonLabel$\n"
"		if .ratingTable\n"
"			select .ratingTable\n"
"			.rating$ = selected$(\"Table\")\n"
"			.numRows = Get number of rows\n"
"			# Set linked rating values\n"
"			.linkCol = Get column index... Link\n"
"			.rownum = Search column... Label '.buttonLabel$'\n"
"			if .linkCol > 0 and .rownum > 0\n"
"				.linkValue$ = Get value... '.rownum' Link\n"
"				if .linkValue$ <> \"\" and index_regex(.linkValue$, \"[a-zA-Z0-9]\") > 0\n"
"					for .r to .numRows\n"
"						select .ratingTable\n"
"						.value$ = Get value... '.r' Link\n"
"						if .r <> .rownum and .value$ = .linkValue$\n"
"							.newValueText$ = Get value... '.r' Value\n"
"							.newValue = 0\n"
"							if index_regex(.newValueText$, \"[0-9]\")\n"
"								.newValue = extractNumber(.newValueText$, \"\")\n"
"							endif \n"
"							.variableLabel$ = Get value... '.r' Label\n"
"							.variable$ = replace_regex$(.variableLabel$, \"^\\>(.)\", \"\\l\\1\", 0)\n"
"							.labelRating$ = replace_regex$(.variable$, \"^[^a-zA-Z]+([A-Za-z])\", \"\\l\\1\", 0)\n"
"							rating.'.labelRating$' = .newValue\n"
"							call set_RatingValues '.speakerTable' Rating.'.variable$' '.newValue'\n"
"							call get_RatingValues '.speakerTable' '.ratingTable'\n"
"							call Draw_button_internal 1 '.rating$' '.variableLabel$' 0\n"
"						endif\n"
"					endfor\n"
"				endif \n"
"			endif\n"
"		endif\n"
"endproc\n"
"# Include the configuration page buttons and procedures\n"
"#\n"
"# TEVA 2.0\n"
"# \n"
"# Praat script handling configuration page\n"
"#\n"
"#     TEVA: Config.praat loads the code needed for the \n"
"#     settings and the Settings page of TEVA.\n"
"#     \n"
"#     Copyright (C) 2010-2012  R.J.J.H. van Son and the Netherlands Cancer Institute\n"
"# \n"
"#     This program is free software; you can redistribute it and/or modify\n"
"#     it under the terms of the GNU General Public License as published by\n"
"#     the Free Software Foundation; either version 2 of the License, or\n"
"#     (at your option) any later version.\n"
"# \n"
"#     This program is distributed in the hope that it will be useful,\n"
"#     but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"#     GNU General Public License for more details.\n"
"# \n"
"#     You should have received a copy of the GNU General Public License\n"
"#     along with this program; if not, write to the Free Software\n"
"#     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA\n"
"# \n"
"\n"
"###############################################################\n"
"#\n"
"# Button Drawing Routines\n"
"#\n"
"###############################################################\n"
"\n"
"procedure DrawCredits .color$ .x .y .size\n"
"	.size *= 0.71\n"
"	.lineheight = 2*.size\n"
"	call adjustFontSizeOnHeight 24 '.lineheight'\n"
"	.currentFontSize = adjustFontSizeOnHeight.newFontSize\n"
"    demo Paint circle... {0.2,0.2,0.8} '.x' '.y' '.size'\n"
"	demo Colour... White\n"
"	demo Text special... '.x' centre '.y' half Times '.currentFontSize' 0 i\n"
"	demoShow()\n"
"	demo Colour... Black\n"
"	call set_font_size 'defaultFontSize'	\n"
"endproc\n"
"\n"
"procedure DrawInstruction .color$ .x .y .size\n"
"	.size *= 0.71\n"
"	.lineheight = 2*.size\n"
"	call adjustFontSizeOnHeight 24 '.lineheight'\n"
"	.currentFontSize = adjustFontSizeOnHeight.newFontSize\n"
"    demo Paint circle... {0.2,0.2,0.8} '.x' '.y' '.size'\n"
"	demo Colour... White\n"
"	demo Text special... '.x' centre '.y' half Times '.currentFontSize' 0 P\n"
"	demoShow()\n"
"	demo Colour... Black\n"
"	call set_font_size 'defaultFontSize'	\n"
"endproc\n"
"\n"
"procedure DrawManual .color$ .x .y .size\n"
"	.size *= 0.71\n"
"	.lineheight = 2*.size\n"
"	call adjustFontSizeOnHeight 24 '.lineheight'\n"
"	.currentFontSize = adjustFontSizeOnHeight.newFontSize\n"
"    demo Paint circle... {0.2,0.2,0.8} '.x' '.y' '.size'\n"
"	demo Colour... White\n"
"	demo Text special... '.x' centre '.y' half Times '.currentFontSize' 0 M\n"
"	demoShow()\n"
"	demo Colour... Black\n"
"	call set_font_size 'defaultFontSize'	\n"
"endproc\n"
"\n"
"procedure DrawLogging .color$ .x .y .size\n"
"    .size /= 2\n"
"	.y += .size\n"
"    if .color$ = \"Blue\"\n"
"    	.color$ = \"{0.5,0.5,1}\"\n"
"     else\n"
"    	.color$ = \"Blue\"\n"
"     endif\n"
"    demo Paint circle... '.color$' '.x' '.y' '.size'\n"
"endproc\n"
"\n"
"procedure DrawTest .color$ .x .y .size\n"
"	.size /= 2\n"
"	.y += .size/4\n"
"    demo Paint circle... '.color$' '.x' '.y' '.size'\n"
"endproc\n"
"\n"
"###############################################################\n"
"#\n"
"# Obligatory button Drawing Routines\n"
"# \n"
"# These MUST be defined\n"
"#\n"
"###############################################################\n"
"\n"
"procedure DrawReturn .color$ .x .y .size\n"
"    call DrawConfig '.color$' '.x' '.y' '.size'\n"
"endproc\n"
"\n"
"# Set the correct button states after redrawing the window\n"
"procedure setConfigMainPage\n"
"    #call Draw_button 'te.config$' Language_'config.language$' 2\n"
"    call Draw_button 'te.config$' Input_'config.input$' 2\n"
"	call setFrequencyButton\n"
"    # Handle logging buttons with forced button draw\n"
"    if logging\n"
"    	call Draw_button 'te.config$' Logging 'logging'\n"
"    endif\n"
"\n"
"endproc\n"
"\n"
"procedure setFrequencyButton\n"
"	select Table 'te.config$'\n"
"	.numLabels = Get number of rows\n"
"	for .i to .numLabels\n"
"		.currentLabel$ = Get value... '.i' Label\n"
"		if startsWith(.currentLabel$, \"Frequency_\")\n"
"			call Draw_button 'te.config$' '.currentLabel$' 0\n"
"		endif\n"
"	endfor\n"
"	\n"
"	.freqkHz = config.frequency / 1000\n"
"	call Draw_button 'te.config$' Frequency_'.freqkHz'k 2\n"
"endproc\n"
"\n"
"procedure setPitchButton\n"
"	select Table 'te.config$'\n"
"	.numLabels = Get number of rows\n"
"	for .i to .numLabels\n"
"		.currentLabel$ = Get value... '.i' Label\n"
"		if startsWith(.currentLabel$, \"Pitchalgorithm_\")\n"
"			call Draw_button 'te.config$' '.currentLabel$' 0\n"
"		endif\n"
"	endfor\n"
"	\n"
"	# Reset the pitch calculations\n"
"	if te.pitch > 0\n"
"		select te.pitch\n"
"		Remove\n"
"		te.pitch = 0\n"
"		pitchName$ = \"\"		\n"
"	endif\n"
"	call Draw_button 'te.config$' Pitchalgorithm_'config.pitchalgorithm$' 2\n"
"endproc\n"
"\n"
"###############################################################\n"
"#\n"
"# Button Processing Routines\n"
"#\n"
"###############################################################\n"
"\n"
"procedure processConfigLanguage .language$ .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"Language_'.language$'\"\n"
"	call processLanguageCodes '.table$' '.label$'\n"
"endproc\n"
"\n"
"procedure processConfigSpeakerData .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"SpeakerData\"\n"
"	# Remove old data table\n"
"	call initializeSpeakerData\n"
"	\n"
"	# Get help text\n"
"	call getLanguageTexts '.table$' '.label$'\n"
"	.newFile$ = chooseReadFile$ (getLanguageTexts.helpText$)\n"
"	config.speakerData$ = .newFile$\n"
"	# Set local preferences\n"
"	.dataDir$ = replace_regex$(config.speakerData$, \"(^|[/:\\\\])[^/:\\\\]+$\", \"\", 0)\n"
"	call load_local_preferences '.dataDir$'\n"
"\n"
"    call Draw_button '.table$' '.label$' 0\n"
"endproc\n"
"\n"
"procedure processConfigSpeakerDirectory .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"SpeakerDirectory\"\n"
"	# Remove old data table\n"
"	# Get help text\n"
"	call getLanguageTexts '.table$' '.label$'\n"
"	.dataDir$ = chooseDirectory$ (getLanguageTexts.helpText$)\n"
"	# Remove old DataTable\n"
"	if .dataDir$ <> \"\"\n"
"		call initializeSpeakerData\n"
"		# Set local preferences\n"
"		call load_local_preferences '.dataDir$'\n"
"		\n"
"		# Get all sound files\n"
"		config.speakerDataTable = Create Table with column names... Speaker_Data 1 ID Text Description Audio AST StartTime EndTime\n"
"		.fileList = Create Strings as file list... DataDirList '.dataDir$'\n"
"		.numFiles = Get number of strings\n"
"		\n"
"		.idList$ = tab$\n"
"		for .file to .numFiles\n"
"			select .fileList\n"
"			.fileName$ = Get string... '.file'\n"
"			if index_regex(.fileName$, \"(?i\\.(wav|au|snd|aif[fc]?|flac|mp3)$)\")\n"
"				# Create a unique ID\n"
"				.id$ = replace_regex$(.fileName$, \"\\.[^\\.]*$\", \"\", 0)\n"
"				if index_regex(.idList$, \"\\t'.id$'\\t\")\n"
"					.num = 1\n"
"					while index_regex(.idList$, \"\\t'.id$'_item'.num'\\t\")\n"
"						.num += 1\n"
"					endwhile\n"
"					.id$ = \"'.id$'_item'.num'\"\n"
"				endif\n"
"				.idList$ = .idList$+.id$+tab$\n"
"				\n"
"				select config.speakerDataTable\n"
"				Append row\n"
"				.row = Get number of rows\n"
"				.row -= 1\n"
"				Set string value... '.row' ID '.id$'\n"
"				.audioString$ = .dataDir$+\"/\"+.fileName$\n"
"				.audioString$ = replace_regex$(.audioString$, \"/[/]+\", \"/\", 0)\n"
"				Set string value... '.row' Audio '.audioString$'\n"
"				Set numeric value... '.row' StartTime 0 \n"
"				Set numeric value... '.row' EndTime 0 \n"
"			endif\n"
"		endfor\n"
"		select config.speakerDataTable\n"
"		.row = Get number of rows\n"
"		if .row > 1\n"
"			Remove row... .row\n"
"		endif\n"
"\n"
"		# clean up\n"
"		select .fileList\n"
"		Remove\n"
"	endif\n"
"	\n"
"    call Draw_button '.table$' '.label$' 0\n"
"endproc\n"
"\n"
"procedure processConfigSpeakerMerge .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"SpeakerMerge\"\n"
"	# Get help text\n"
"	call getLanguageTexts '.table$' '.label$'\n"
"	.newFile$ = chooseReadFile$ (getLanguageTexts.helpText$)\n"
"	# Read new file\n"
"	if .newFile$ != \"\" and fileReadable(.newFile$)\n"
"		call readTable '.newFile$'\n"
"		.tmpNewSpeakerData = readTable.tableID\n"
"		if .tmpNewSpeakerData > 0\n"
"			# Make sure data table is read\n"
"			if config.speakerDataTable <= 0 and config.speakerData$ <> \"\"\n"
"				call get_speakerInfo 1\n"
"			endif\n"
"			# Merge AST values as new columns\n"
"			call merge_AST_values config.speakerDataTable .tmpNewSpeakerData\n"
"			\n"
"			# Merge Rating values\n"
"			call merge_table_values config.speakerDataTable .tmpNewSpeakerData \"^Rating\\.\"\n"
"			\n"
"			# Save result\n"
"			call WriteSpeakerData\n"
"			\n"
"			select .tmpNewSpeakerData\n"
"			Remove\n"
"		endif\n"
"	endif\n"
"    call Draw_button '.table$' '.label$' 0\n"
"endproc\n"
"\n"
"procedure processConfigSpeakerRevert .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"SpeakerRevert\"\n"
"	if config.speakerData$ <> \"\" and fileReadable(config.speakerData$) \n"
"...    and config.speakerDataBackup$ <> \"\" and fileReadable(config.speakerDataBackup$)\n"
"		if config.speakerDataTable > 0\n"
"			# Get feedback texts\n"
"			call getLanguageTexts '.table$' '.label$'\n"
"			.inputText$ = getLanguageTexts.inputText$\n"
"			beginPause(\"\")\n"
"				comment(getLanguageTexts.helpText$)\n"
"			clicked = endPause (\"'getLanguageTexts.cancelText$'\", \"'getLanguageTexts.continueText$'\", 2, 1)\n"
"			if clicked = 2\n"
"				select config.speakerDataTable\n"
"				Remove\n"
"				config.speakerDataTable = -1\n"
"			endif\n"
"		endif\n"
"		if config.speakerDataTable <= 0 and config.speakerDataBackup$ <> \"\" and fileReadable(config.speakerDataBackup$)\n"
"			call readTable 'config.speakerDataBackup$'\n"
"			if readTable.tableID > 0\n"
"				config.speakerDataTable = readTable.tableID\n"
"				config.createBackup = 1\n"
"				select config.speakerDataTable\n"
"				Save as tab-separated file... 'config.speakerData$'\n"
"			endif\n"
"		endif\n"
"	endif\n"
"	\n"
"    call Draw_button '.table$' '.label$' 0\n"
"endproc\n"
"\n"
"procedure processConfigSaveSpeaker .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"SaveSpeaker\"\n"
"	# Get help text\n"
"	if config.speakerDataTable > 0 or (config.speakerData$ <> \"\" and fileReadable(config.speakerData$))\n"
"		# If the table has not yet been read, do that now\n"
"		if config.speakerDataTable <= 0\n"
"			call ReadSpeakerData 'config.speakerData$'\n"
"		endif\n"
"		# Get (new) filename, default to .tsv extension if not such\n"
"		.newFileName$ = config.speakerData$\n"
"		if index_regex(.newFileName$, \"\\.(?itsv|table)\") <= 0\n"
"			.newFileName$ = replace_regex$(.newFileName$, \"\\.(\\w+)$\", \".tsv\", 0)\n"
"		endif\n"
"		call getLanguageTexts '.table$' '.label$'\n"
"		.filename$ = chooseWriteFile$ (getLanguageTexts.helpText$, .newFileName$)\n"
"		if .filename$ <> \"\"\n"
"			call normalize_speakerData '.filename$'\n"
"			select normalize_speakerData.table\n"
"			Save as tab-separated file... '.filename$'\n"
"			Remove\n"
"			config.speakerDataBackup$ = \"\"\n"
"			config.speakerData$ = .filename$\n"
"		endif\n"
"	endif\n"
"    call Draw_button '.table$' '.label$' 0\n"
"endproc\n"
"\n"
"procedure processConfigSaveAudio .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"SaveAudio\"\n"
"	# Get help text\n"
"	if te.openSound > 0\n"
"		call getLanguageTexts '.table$' '.label$'\n"
"		.writeDialogue$ = getLanguageTexts.helpText$\n"
"		call convert_praat_to_latin1 '.writeDialogue$'\n"
"		.writeDialogue$ = convert_praat_to_latin1.text$\n"
"		.filename$ = chooseWriteFile$ (.writeDialogue$, \"'te.currentFileName$'\")\n"
"		if .filename$ <> \"\"\n"
"			te.currentFileName$ = .filename$\n"
"			select te.openSound\n"
"			.tmpPartSoundID = Extract part... 'selectedStartTime' 'selectedStartTime' rectangular 1.0 true\n"
"			Save as WAV file... '.filename$'\n"
"			Remove\n"
"		endif\n"
"	endif\n"
"    call Draw_button '.table$' '.label$' 0\n"
"endproc\n"
"\n"
"procedure processConfigSaveAll .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"SaveAll\"\n"
"\n"
"	config.saveAll = not config.saveAll\n"
"\n"
"	.displayButton = 2*config.saveAll\n"
"    call Draw_button '.table$' '.label$' '.displayButton'\n"
"endproc\n"
"\n"
"procedure processConfigCloseSpeaker .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"CloseSpeaker\"\n"
"	\n"
"	# Get feedback texts\n"
"	call getLanguageTexts '.table$' '.label$'\n"
"	.inputText$ = getLanguageTexts.inputText$\n"
"	beginPause(\"\")\n"
"		comment(getLanguageTexts.helpText$)\n"
"	clicked = endPause (\"'getLanguageTexts.cancelText$'\", \"'getLanguageTexts.continueText$'\", 2, 1)\n"
"	if clicked = 2\n"
"		call reset_analysis\n"
"		# Initialize Speaker Data\n"
"		call initializeSpeakerData\n"
"		speakerInfo$ = \"\"\n"
"		speakerComments$ = \"\"\n"
"		pathologicalType = 0\n"
"		# Set up new speaker data table\n"
"		if config.speakerDataTable <= 0\n"
"			config.speakerDataTable = Create Table with column names... SpeakerData 1 ID Text Description Audio AST StartTime EndTime\n"
"		endif\n"
"	endif\n"
"    call Draw_button '.table$' '.label$' 0\n"
"endproc\n"
"\n"
"procedure processConfigSpeakerSerial .input$ .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"SpeakerSerial\"\n"
"\n"
"    call Draw_button '.table$' '.label$'_'config.speakerSerial$' 0\n"
"	config.speakerSerial$ = .input$\n"
"	call switch_speaker_next_button 'config.speakerSerial$'\n"
"    call Draw_button '.table$' '.label$'_'config.speakerSerial$' 2\n"
"endproc\n"
"\n"
"procedure processConfigSaveFMT .fmt$ .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"SaveFMT\"\n"
"\n"
"	call Draw_button '.table$' SaveFMT_'config.saveFMT$' 0\n"
"	config.saveFMT$ = .fmt$\n"
"	call Draw_button '.table$' SaveFMT_'config.saveFMT$' 2\n"
"\n"
"endproc\n"
"\n"
"procedure processConfigAutoSelect .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"AutoSelect\"\n"
"\n"
"	config.autoSelect = not config.autoSelect\n"
"\n"
"	.displayButton = 2*config.autoSelect\n"
"    call Draw_button '.table$' '.label$' '.displayButton'\n"
"endproc\n"
"\n"
"procedure processConfigSpeakerRandomize .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"SpeakerRandomize\"\n"
"	\n"
"	if config.speakerDataTable <= 0 and config.speakerData$ <> \"\"\n"
"		call get_speakerInfo 1\n"
"	endif\n"
"	if config.speakerDataTable > 0\n"
"		# Get feedback texts\n"
"		call getLanguageTexts '.table$' '.label$'\n"
"		.inputText$ = getLanguageTexts.inputText$\n"
"		beginPause(\"\")\n"
"			comment(getLanguageTexts.helpText$)\n"
"		clicked = endPause (\"'getLanguageTexts.cancelText$'\", \"'getLanguageTexts.continueText$'\", 2, 1)\n"
"		if clicked = 2\n"
"			select config.speakerDataTable\n"
"			Randomize rows\n"
"		endif\n"
"	endif\n"
"    call Draw_button '.table$' '.label$' 0\n"
"endproc\n"
"\n"
"procedure processConfigSpeakerSort .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"SpeakerSort\"\n"
"	\n"
"	if config.speakerDataTable <= 0 and config.speakerData$ <> \"\"\n"
"		call get_speakerInfo 1\n"
"	endif\n"
"	if config.speakerDataTable > 0\n"
"		# Get feedback texts\n"
"		call getLanguageTexts '.table$' '.label$'\n"
"		.inputText$ = getLanguageTexts.inputText$\n"
"		beginPause(\"\")\n"
"			comment(getLanguageTexts.helpText$)\n"
"		clicked = endPause (\"'getLanguageTexts.cancelText$'\", \"'getLanguageTexts.continueText$'\", 2, 1)\n"
"		if clicked = 2\n"
"			select config.speakerDataTable\n"
"			Sort rows... ID Audio Text Description\n"
"		endif\n"
"	endif\n"
"    call Draw_button '.table$' '.label$' 0\n"
"endproc\n"
"\n"
"procedure processConfigRecordingTime .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"RecordingTime\"\n"
"	.fileLabel$ = \"RecordingTask\"\n"
"	# Original values\n"
"	.orig_recordingTime$ = config.recordingTime$\n"
"	.orig_recordingTaskFile$ = config.recordingTaskFile$\n"
"	.orig_recordingTarget$ = config.recordingTarget$\n"
"	.orig_recordingScreen$ = config.recordingScreen$\n"
"	# Get feedback texts\n"
"	call getLanguageTexts '.table$' '.label$'\n"
"	.inputText$ = getLanguageTexts.text$\n"
"	call get_feedback_text 'config.language$' RecordingTask\n"
"	.inputTaskFile$ = get_feedback_text.text$\n"
"	call get_feedback_text 'config.language$' RecordingTarget\n"
"	.inputTarget$ = get_feedback_text.text$\n"
"	call get_feedback_text 'config.language$' RecordingClear\n"
"	.inputTaskClear$ = get_feedback_text.text$\n"
"	clicked = -1\n"
"	while clicked <> 5 and clicked <> 1\n"
"		beginPause(getLanguageTexts.helpText$)\n"
"			positive (.inputText$, config.recordingTime$)\n"
"			sentence (.inputTaskFile$, config.recordingScreen$ + config.recordingTaskFile$)\n"
"			sentence (.inputTarget$, config.recordingTarget$)\n"
"		clicked = endPause (\"'getLanguageTexts.cancelText$'\", \"'.inputTaskFile$'\", \"'.inputTarget$'\", \"'.inputTaskClear$'\", \"'getLanguageTexts.continueText$'\", 5, 1)\n"
"		# Cancel\n"
"		if clicked = 1\n"
"			config.recordingTime$ = .orig_recordingTime$\n"
"			config.recordingTaskFile$ = .orig_recordingTaskFile$\n"
"			config.recordingTarget$ = .orig_recordingTarget$\n"
"			config.recordingScreen$ = .orig_recordingScreen$\n"
"		# Input task file\n"
"		elsif clicked = 2\n"
"			.filename$ = chooseReadFile$ (.inputTaskFile$)\n"
"			if .filename$ <> \"\" and fileReadable(.filename$)\n"
"				# Clean up existing sound and Table\n"
"				call reset_analysis\n"
"				if te.recordingTaskTable > 0\n"
"					select te.recordingTaskTable\n"
"					Remove\n"
"					te.recordingTaskTable = 0\n"
"					te.recordingTaskPrompt = 0\n"
"				endif\n"
"				config.recordingTaskFile$ = .filename$\n"
"			endif\n"
"		# Target directory\n"
"		elsif clicked = 3\n"
"			# Keep track of the task!\n"
"			.inputTaskFile$ = replace_regex$(.inputTaskFile$, \".+\", \"\\l&\\$\", 0)\n"
"			.inputTaskFile$ = replace_regex$(.inputTaskFile$, \"\\$\", \"\", 0)\n"
"			.inputFile$ = '.inputTaskFile$'$\n"
"			config.recordingTaskFile$ = .inputFile$\n"
"			\n"
"			.dirname$ = chooseDirectory$ (.inputTarget$)\n"
"			if .dirname$ <> \"\"\n"
"				config.recordingTarget$ = .dirname$\n"
"			endif\n"
"		# Clear\n"
"		elsif clicked = 4\n"
"			if te.recordingTaskTable > 0\n"
"				select te.recordingTaskTable\n"
"				Remove\n"
"				te.recordingTaskTable = 0\n"
"				te.recordingTaskPrompt = 0\n"
"			endif\n"
"			if config.recordingTaskFile$ <> \"\"\n"
"				config.recordingTaskFile$ = \"\"\n"
"				te.recordingTaskPrompt = 0\n"
"			endif\n"
"			config.recordingTarget$ = \"\"\n"
"		# Continue\n"
"		elsif clicked = 5\n"
"			# The text of the field name equals the name of the variable! That is, an indirection\n"
"			.inputText$ = replace_regex$(.inputText$, \".+\", \"\\l&\\$\", 0)\n"
"			.inputText$ = replace_regex$(.inputText$, \"\\$\", \"\", 0)\n"
"			.inputValue = '.inputText$'\n"
"			config.recordingTime$ = \"'.inputValue'\"\n"
"			# The text of the field name equals the name of the variable! That is, an indirection\n"
"			.inputTaskFile$ = replace_regex$(.inputTaskFile$, \".+\", \"\\l&\\$\", 0)\n"
"			.inputTaskFile$ = replace_regex$(.inputTaskFile$, \"\\$\", \"\", 0)\n"
"			.inputFile$ = '.inputTaskFile$'$\n"
"			if .inputFile$ <> \"\"\n"
"				if startsWith(.inputFile$, \"*\")\n"
"					config.recordingScreen$ = left$(.inputFile$, 1)\n"
"					.inputFile$ = right$(.inputFile$, length(.inputFile$) - 1)\n"
"				endif\n"
"				if fileReadable(.inputFile$)\n"
"					if te.recordingTaskTable > 0\n"
"						select te.recordingTaskTable\n"
"						Remove\n"
"						te.recordingTaskTable = 0\n"
"						te.recordingTaskPrompt = 0\n"
"					endif\n"
"					config.recordingTaskFile$ = .inputFile$\n"
"				elsif startsWith(.inputFile$, \"\"\"\") and endsWith(.inputFile$, \"\"\"\")\n"
"					.inputFile$ = left$(.inputFile$, length(.inputFile$) - 1)\n"
"					.inputFile$ = right$(.inputFile$, length(.inputFile$) - 1)\n"
"					config.recordingTaskFile$ = \"[\"+.inputFile$+\"]\"\n"
"				elsif startsWith(.inputFile$, \"[\") and endsWith(.inputFile$, \"]\")\n"
"					# Clean up existing sound and Table\n"
"					call reset_analysis\n"
"					if te.recordingTaskTable > 0\n"
"						select te.recordingTaskTable\n"
"						Remove\n"
"						te.recordingTaskTable = 0\n"
"						te.recordingTaskPrompt = 0\n"
"					endif\n"
"					config.recordingTaskFile$ = .inputFile$\n"
"				endif\n"
"			elsif .inputFile$ = \"\"		\n"
"				if te.recordingTaskTable > 0\n"
"					select te.recordingTaskTable\n"
"					Remove\n"
"					te.recordingTaskTable = 0\n"
"					te.recordingTaskPrompt = 0\n"
"				endif\n"
"				config.recordingTaskFile$ = \"\"\n"
"			endif\n"
"		endif\n"
"	endwhile\n"
"    call Draw_button '.table$' '.label$' 0\n"
"endproc\n"
"\n"
"procedure processConfigShowBackground .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"ShowBackground\"\n"
"	config.showBackground = not config.showBackground\n"
"	.displayButton = 2*config.showBackground\n"
"    call Draw_button '.table$' '.label$' '.displayButton'\n"
"endproc\n"
"\n"
"procedure processConfigInput .input$ .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"Input_'.input$'\"\n"
"    call Draw_button '.table$' Input_'config.input$' 0\n"
"	config.input$ = .input$\n"
"    call Draw_button '.table$' Input_'config.input$' 2\n"
"endproc\n"
"\n"
"procedure processConfigTest .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"Test\"\n"
"    call Draw_button '.table$' '.label$' 2\n"
"	Record mono Sound...\n"
"    call Draw_button '.table$' '.label$' 0\n"
"endproc\n"
"\n"
"procedure processConfigMuteOutput .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"MuteOutput\"\n"
"	config.muteOutput = not config.muteOutput;\n"
"	.displayButton = 2*config.muteOutput\n"
"    call Draw_button '.table$' '.label$' '.displayButton'\n"
"endproc\n"
"\n"
"procedure processConfigRatingForm .input$ .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"RatingForm_'.input$'\"\n"
"    call Draw_button '.table$' RatingForm_'config.ratingForm$' 0\n"
"	config.ratingForm$ = .input$\n"
"	if te.ratingTable > 0\n"
"		select te.ratingTable\n"
"		Remove\n"
"		te.ratingTable = -1\n"
"	endif\n"
"    call Draw_button '.table$' RatingForm_'config.ratingForm$' 2\n"
"endproc\n"
"\n"
"procedure processConfigVasScaleTicks .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"VasScaleTicks\"\n"
"	config.vasScaleTicks = not config.vasScaleTicks\n"
"	.displayButton = 2*config.vasScaleTicks\n"
"    call Draw_button '.table$' '.label$' '.displayButton'\n"
"endproc\n"
"\n"
"procedure processConfigFrequency .frequencyK$ .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"Frequency\"\n"
"	.freqHz = extractNumber(.frequencyK$, \"\")\n"
"	config.frequency = .freqHz * 1000\n"
"	ingnored_sampleFrequency = 2*config.frequency\n"
"	call setFrequencyButton\n"
"endproc\n"
"\n"
"procedure processConfigPitchalgorithm .pitchalgorithm$ .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"Pitchalgorithm\"\n"
"	config.pitchalgorithm$ = .pitchalgorithm$\n"
"	call setPitchButton\n"
"endproc\n"
"\n"
"procedure processConfigShowFormants .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"ShowFormants\"\n"
"	config.showFormants = not config.showFormants\n"
"	.displayButton = 2*config.showFormants\n"
"    call Draw_button '.table$' '.label$' '.displayButton'\n"
"endproc\n"
"\n"
"procedure processConfigCalcGNE .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"CalcGNE\"\n"
"	config.calcGNE = not config.calcGNE\n"
"	.displayButton = 2*config.calcGNE\n"
"    call Draw_button '.table$' '.label$' '.displayButton'\n"
"endproc\n"
"\n"
"procedure processConfigInstruction .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"Instruction\"\n"
"	call Draw_button '.table$' '.label$' 1\n"
"	call write_text_table Instruction_'config.language$'\n"
"	demoWaitForInput()\n"
"    call Draw_button '.table$' '.label$' 0\n"
"    demo Erase all\n"
"    call Draw_config_page\n"
"endproc\n"
"\n"
"procedure processConfigManual .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"Manual\"\n"
"	call Draw_button '.table$' '.label$' 1\n"
"	if fileReadable(\"ManPages/NKI_TE-VOICE_ANALYSIS_tool__'config.language$'_.man\")\n"
"		Read from file... ManPages/NKI_TE-VOICE_ANALYSIS_tool__'config.language$'_.man\n"
"	else\n"
"		Go to manual page... NKI TE-VOICE ANALYSIS tool ('config.language$')\n"
"	endif\n"
"	# Wait until the manual is put to the background\n"
"	demoWaitForInput()\n"
"    call Draw_button '.table$' '.label$' 0\n"
"    demo Erase all\n"
"    call Draw_config_page\n"
"endproc\n"
"\n"
"procedure processConfigSource .change$ .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"Source_'.change$'\"\n"
"	.file$ = \"\"\n"
"    call Draw_button '.table$' Source_'config.source$' 0\n"
"    # No open Sound, nothing to do\n"
"    if te.openSound <= 0\n"
"		config.source$ = \"Original\"\n"
"		.change$ = \"Original\"\n"
"		if te.originalRecording > 0\n"
"			select te.originalRecording\n"
"			Remove\n"
"		endif\n"
"	endif\n"
"	\n"
"	# Get original sound\n"
"	if te.originalRecording > 0\n"
"		.originalRecording = te.originalRecording\n"
"		te.originalRecording = -1\n"
"		# Reset everything and load the file again\n"
"		@getOpenFile: \"'.originalRecording'\"\n"
"		# Restore the original recording\n"
"		te.originalRecording = .originalRecording\n"
"	elsif te.openSound > 0\n"
"		select te.openSound\n"
"		te.originalRecording = Copy: \"OriginalRecording\"\n"
"	else\n"
"		# Nothing to do, reset button\n"
"		call Draw_button '.table$' '.label$' 0\n"
"		config.source$ = \"Original\"\n"
"		goto SKIPVOICESOURCE\n"
"	endif\n"
"\n"
"	# Change original sound\n"
"	if .change$ <> \"Original\"\n"
"		config.source$ = .change$\n"
"		# Get feedback texts\n"
"		call getLanguageTexts '.table$' '.label$'\n"
"		.helpText$ = getLanguageTexts.text$\n"
"		call get_feedback_text 'config.language$' SpeakerAudio\n"
"		.inputFile$ = get_feedback_text.text$\n"
"		.inputProsody$ = \"Prosody\"\n"
"		.inputAR$ = \"Syll sec\"\n"
"		.prosody = 0.8\n"
"		.articulationRate = 3.5\n"
"		if config.sourceFile$ <> \"\" and fileReadable(config.sourceFile$)\n"
"			.file$ = config.sourceFile$\n"
"		else\n"
"			.file$ = \"\"\n"
"		endif\n"
"		.clicked = -1\n"
"		while .clicked <> 3 and .clicked <> 1\n"
"			beginPause(getLanguageTexts.helpText$)\n"
"				sentence (.inputFile$, .file$)\n"
"				positive (.inputProsody$, .prosody)\n"
"				positive (.inputAR$, .articulationRate)\n"
"			.clicked = endPause (\"'getLanguageTexts.cancelText$'\", .inputFile$, \"'getLanguageTexts.continueText$'\", 3, 1)\n"
"			# Cancel\n"
"			if .clicked = 1\n"
"				.file$ = \"\"\n"
"			# Input source file\n"
"			elsif .clicked = 2\n"
"				.filename$ = chooseReadFile$ (.file$)\n"
"				if .filename$ <> \"\" and fileReadable(.filename$)\n"
"					.file$ = .filename$\n"
"				endif\n"
"			# Continue\n"
"			elsif .clicked = 3\n"
"				.inputFile$ = replace_regex$(.inputFile$, \"^(.)\", \"\\l\\1\", 0)\n"
"				.inputProsody$ = replace_regex$(.inputProsody$, \"^(.)\", \"\\l\\1\", 0)\n"
"				.inputAR$ = replace_regex$(.inputAR$, \"^(.)\", \"\\l\\1\", 0)\n"
"				.inputAR$ = replace_regex$(.inputAR$, \"[^a-zA-Z0-9_\\-]\", \"\\_\", 0)\n"
"				.file$ = '.inputFile$'$\n"
"				.prosody = '.inputProsody$'\n"
"				.articulationRate = '.inputAR$'\n"
"				if .file$ <> \"\" and fileReadable(.file$)\n"
"					config.sourceFile$ = .file$\n"
"					te.source = Read from file: config.sourceFile$\n"
"					.sourceType$ = selected$()\n"
"					.sourceType$ = extractWord$(.sourceType$, \"\")\n"
"					if .sourceType$ <> \"Sound\"\n"
"						select te.source\n"
"						Remove\n"
"						te.source = -1\n"
"						config.source$ = \"Original\"\n"
"					elsif te.openSound > 0\n"
"						@copy_source_into_target: .prosody, .articulationRate\n"
"						.originalRecording = te.originalRecording\n"
"						te.originalRecording = -1\n"
"						@getOpenFile: \"'te.openSound'\"\n"
"						config.source$ = \"Change\"\n"
"						# Restore the original recording\n"
"						te.originalRecording = .originalRecording\n"
"					endif\n"
"				endif\n"
"			endif\n"
"		endwhile\n"
"	endif\n"
"	label SKIPVOICESOURCE\n"
"    call Draw_button '.table$' Source_'config.source$' 2\n"
"endproc\n"
"\n"
"###############################################################\n"
"#\n"
"# Obligatory button Processing Routines\n"
"# \n"
"# These MUST be defined\n"
"#\n"
"###############################################################\n"
"\n"
"procedure processConfigReturn .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"Return\"\n"
"	call Draw_button '.table$' '.label$' 1\n"
"	call write_preferences \"\"\n"
"endproc\n"
"\n"
"procedure processConfigRefresh .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"Refresh\"\n"
"	call Draw_config_page\n"
"endproc\n"
"\n"
"procedure processConfigCredits .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"Credits\"\n"
"	call Draw_button '.table$' '.label$' 1\n"
"	call write_text_table Credits_'config.language$'\n"
"	demoWaitForInput()\n"
"    call Draw_button '.table$' '.label$' 0\n"
"    demo Erase all\n"
"    call Draw_config_page\n"
"endproc\n"
"\n"
"procedure processConfigHelp .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"Help\"\n"
"	if runningCommandMode = 0\n"
"		call help_loop	'.table$' Draw_config_page\n"
"	else\n"
"		te.skipNextStep = 1\n"
"	endif\n"
"endproc\n"
"\n"
"procedure processConfigRun .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"Run\"\n"
"	\n"
"    call Draw_button '.table$' '.label$' 2\n"
"	# Get help text\n"
"	call findLabel '.table$' '.label$'\n"
"	.row = findLabel.row\n"
"	select Table '.table$'\n"
"	.helpText$ = Get value... '.row' Helptext\n"
"	call convert_praat_to_latin1 '.helpText$'\n"
"	.helpText$ = convert_praat_to_latin1.text$\n"
"	\n"
"	# Open file and run it\n"
"	if runningCommandMode = 0\n"
"		.filename$ = chooseReadFile$ (.helpText$)\n"
"	endif\n"
"	if .filename$ <> \"\" and fileReadable(.filename$)\n"
"		call runCommandFile '.filename$'\n"
"	endif\n"
"	# Reset button\n"
"    call Draw_button '.table$' '.label$' 0\n"
"    demo Erase all\n"
"    call Draw_config_page\n"
"endproc\n"
"\n"
"procedure processConfigLogging .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"Logging\"\n"
"	if runningCommandMode = 0\n"
"		logging = not logging\n"
"		.displayButton = logging\n"
"    	call Draw_button 'te.config$' '.label$' '.displayButton'\n"
"    	if logging\n"
"        	call start_logging\n"
"    	endif\n"
"	else\n"
"		te.skipNextStep = 1\n"
"	endif\n"
"endproc\n"
"\n"
"procedure processConfigOpenLog .clickX .clickY .pressed$\n"
"	.table$ = \"Config\"\n"
"	.label$ = \"OpenLog\"\n"
"	call Draw_button '.table$' '.label$' 1\n"
"	# Get help text\n"
"	call findLabel '.table$' '.label$'\n"
"	.row = findLabel.row\n"
"	select Table '.table$'\n"
"	.helpText$ = Get value... '.row' Helptext\n"
"	call convert_praat_to_utf8 '.helpText$'\n"
"	.openDialogue$ = convert_praat_to_utf8.text$\n"
"	\n"
"	.dirname$ = chooseDirectory$ (.openDialogue$)\n"
"	if .dirname$ <> \"\"\n"
"		config.openLog$ = .dirname$\n"
"	endif\n"
"	\n"
"	# Reset button\n"
"	call Draw_button '.table$' '.label$' 0\n"
"	# Draw\n"
"    call Draw_config_page\n"
"endproc	\n"
"\n"
"###############################################################\n"
"#\n"
"# Miscelaneous supporting code\n"
"#\n"
"###############################################################\n"
"\n"
"procedure start_logging\n"
"	.logDirectory$ = \"\"\n"
"	if fileReadable(\"'config.openLog$'/logging.txt\")\n"
"		.logDirectory$ < 'config.openLog$'/logging.txt\n"
"		.logDirectory$ = extractLine$(.logDirectory$, \"\")\n"
"	endif\n"
"	if .logDirectory$ = \"\" or not fileReadable(.logDirectory$)\n"
"    		.logDirectory$ = \"'config.openLog$'\"\n"
"	endif\n"
"    config.currentLogDirectory$ = \"'.logDirectory$'/log'logtimeStamp$'\"\n"
"    createDirectory(config.currentLogDirectory$)\n"
"	fileappend \"'config.currentLogDirectory$'/logFile.txt\" # 'logtimeStamp$''newline$'\n"
"    # Flip switch\n"
"    logging = 1\n"
"endproc\n"
"\n"
"procedure log_command .logtext$\n"
"	if logging\n"
"		fileappend \"'config.currentLogDirectory$'/logFile.txt\" '.logtext$''newline$'\n"
"	endif\n"
"endproc\n"
"\n"
"procedure log_recording .recordedSound$\n"
"	if logging\n"
"		# Log files\n"
"		.currentDate$ = date$()\n"
"		call getTimeStamp\n"
"		.timeStamp$ = getTimeStamp.string$\n"
"\n"
"		.outfilename$ = .timeStamp$+\".wav\"\n"
"		.logtext$ = \"# \"+.currentDate$+tab$+.outfilename$\n"
"		call log_command '.logtext$'\n"
"		call log_command MainPage ReadFromFile 'config.currentLogDirectory$'/'.outfilename$'\n"
"\n"
"		# The recorded sound\n"
"		select te.openSound\n"
"		Write to WAV file... 'config.currentLogDirectory$'/'.outfilename$'\n"
"	endif\n"
"endproc\n"
"\n"
"procedure log_fileOpen .filename$\n"
"	if logging\n"
"		# Log files\n"
"		call getTimeStamp\n"
"		.timeStamp$ = getTimeStamp.string$\n"
"\n"
"		.logtext$ = \"MainPage+tab$+ReadFromFile+tab$+.filename$+newline$\n"
"    	# Plain log text\n"
"		fileappend \"'config.currentLogDirectory$'/logFile.txt\" .label$ .clickX .clickY .pressed$\n"
"	endif\n"
"endproc\n"
"\n"
"procedure paint_logging_light\n"
"    select Table Config\n"
"    .row = Search column... Label Logging\n"
"	if .row > 0\n"
"		# Get button values\n"
"	    .leftX = Get value... '.row' LeftX\n"
"	    .rightX = Get value... '.row' RightX\n"
"	    .lowY = Get value... '.row' LowY\n"
"	    .highY = Get value... '.row' HighY\n"
"	    .buttonColor$ = Get value... '.row' Color\n"
"	    .centerX = (.leftX + .rightX)/2\n"
"	    .centerY = (.lowY + .highY)/2\n"
"	    .radius = (.highY - .lowY )/(4*2)\n"
"	    .wipeRadius = 1.1*.radius\n"
"	    if logging\n"
"	    	demo Paint circle... White '.centerX' '.centerY' '.wipeRadius'\n"
"	    	demo Paint circle... '.buttonColor$' '.centerX' '.centerY' '.radius'\n"
"	    	demoShow()\n"
"	    else\n"
"	    	demo Paint circle... White '.centerX' '.centerY' '.wipeRadius'\n"
"	    	demoShow()\n"
"	    endif\n"
"	endif\n"
"endproc\n"
"\n"
"# The Credits\n"
"procedure write_credits\n"
"	.xleft = 20\n"
" 	.xright = 90\n"
"  	.ylow = 20\n"
"   	.yhigh = 85\n"
"	.lineHeight = 2.5\n"
"	.referenceText$ = \"organisational, and financial support from the staff and board of the Digitale Universiteit.\"\n"
"	.creditsFontSize = 12\n"
"\n"
"	# Adapt size of button to length of text\n"
"	.maxWidth = (.xright - .xleft) - 3\n"
"	call adjustFontSizeOnWidth '.creditsFontSize' '.maxWidth' '.referenceText$'\n"
"	.creditsFontSize = adjustFontSizeOnWidth.newFontSize\n"
"	if adjustFontSizeOnWidth.diff > 0\n"
"		.xright += adjustFontSizeOnWidth.diff/4\n"
"		.xleft -= 3*adjustFontSizeOnWidth.diff/4\n"
"	endif\n"
"	call set_font_size '.creditsFontSize'\n"
"\n"
"	demo Line width... 8\n"
" 	demo Colour... {0.5,0.5,1}\n"
"	demo Paint rectangle... {0.9,0.9,1} '.xleft' '.xright' '.ylow' '.yhigh'\n"
"	demo Draw rectangle... '.xleft' '.xright' '.ylow' '.yhigh'\n"
"	demo Line width... 'defaultLineWidth'\n"
"	demo Black\n"
"	.xleft += 2\n"
" 	.dy = .lineHeight\n"
" 	.ytext = .yhigh - 2 - .dy\n"
" 	demo Text... '.xleft' Left '.ytext' Bottom 'demoAppName$' version 0.1\n"
"	.ytext -= 2*.dy\n"
" 	demo Text... '.xleft' Left '.ytext' Bottom For more information, visit our website: http://www.\n"
"	.ytext -= .dy\n"
" 	demo Text... '.xleft' Left '.ytext' Bottom Based on Praat (http://www.praat.org)\n"
"	.ytext -= 2*.dy\n"
" 	demo Text... '.xleft' Left '.ytext' Bottom * Created and Copyrights 2010 by Rob van Son (UvA) - R.J.J.H.vanSon@gmail.com\n"
"  \n"
"	demoShow()	\n"
"	call set_font_size 'defaultFontSize'\n"
"endproc\n"
"\n"
"# Merge Speaker tables\n"
"\n"
"# Merge AST values, ie, add columns\n"
"procedure merge_AST_values .currentTable .newTable\n"
"	if .currentTable > 0 and .newTable > 0\n"
"		select .currentTable\n"
"		.numCols = Get number of columns\n"
"		.astNum = 1\n"
"		for .col to .numCols\n"
"			.colLabel$ = Get column label... .col\n"
"			if index_regex(.colLabel$, \"^AST[\\d]*$\") > 0\n"
"				.astNum += 1\n"
"			endif\n"
"		endfor\n"
"		.lastColumn$ = \"AST'.astNum'\"\n"
"		Append column... '.lastColumn$'\n"
"		.numRows = Get number of rows\n"
"		for .row to .numRows\n"
"			# Find new row corresponding to current row\n"
"			select .currentTable\n"
"			.id$ = Get value... .row ID\n"
"			select .newTable\n"
"			.astColumnIndex = Get column index... AST\n"
"			.tmpRow = Search column... ID '.id$'\n"
"			if .tmpRow > 0 and .astColumnIndex > 0\n"
"				# Get new value\n"
"				.astValue$ = Get value... .tmpRow AST\n"
"				\n"
"				# Add value\n"
"				select .currentTable\n"
"				Set string value... .row '.lastColumn$' '.astValue$'\n"
"			endif\n"
"		endfor\n"
"	endif\n"
"endproc\n"
"\n"
"# Merge Rating values, ie, add values. Use regex, e.g., .colpattern$ = \"^Rating\\.\"\n"
"# Only merges rows also in .currentTable. Rows only in .newTable are dropped\n"
"procedure merge_table_values .currentTable .newTable .colpattern$\n"
"	.colpattern$ = replace_regex$(.colpattern$, \"(^\"\"|\"\"$)\", \"\", 0)\n"
"	if .currentTable > 0 and .newTable > 0\n"
"		# Handle columns in .newTable that are also in .currentTable\n"
"		select .currentTable\n"
"		.numCols = Get number of columns\n"
"		for .col to .numCols\n"
"			select .currentTable\n"
"			.colLabel$ = Get column label... .col\n"
"			if index_regex(.colLabel$, .colpattern$) > 0\n"
"				select .newTable\n"
"				.newCol = Get column index... '.colLabel$'\n"
"\n"
"				if .newCol > 0\n"
"					select .newTable\n"
"					.numRows = Get number of rows\n"
"					for .row to .numRows\n"
"						select .newTable\n"
"						.id$ = Get value... .row ID\n"
"						.newValue$ = Get value... .row '.colLabel$'\n"
"						select .currentTable\n"
"						.tmpRow = Search column... ID '.id$'\n"
"						if .tmpRow > 0 and index_regex(.newValue$, \"[0-9\\.]\")\n"
"							.oldValue$ = Get value... .tmpRow '.colLabel$'\n"
"							select .currentTable\n"
"							# No old value, take new value\n"
"							if index_regex(.oldValue$, \"[0-9\\.]\") <= 0\n"
"								.oldValue$ = .newValue$\n"
"								# Add value\n"
"								Set string value... .tmpRow '.colLabel$' '.newValue$'\n"
"							elsif .oldValue$ <> \"\" and index_regex(.oldValue$, \"(^|;)'.newValue$'(;|$)\") <= 0\n"
"								# Append new value to old value\n"
"								.newValue$ = \"'.oldValue$';'.newValue$'\"\n"
"								# Add value\n"
"								Set string value... .tmpRow '.colLabel$' '.newValue$'\n"
"							endif\n"
"						endif\n"
"					endfor\n"
"				endif\n"
"			endif\n"
"		endfor\n"
"		\n"
"		# Handle columns in .newTable that are not in .currentTable\n"
"		select .newTable\n"
"		.numCols = Get number of columns\n"
"		for .col to .numCols\n"
"			select .newTable\n"
"			.colLabel$ = Get column label... .col\n"
"			if index_regex(.colLabel$, .colpattern$) > 0\n"
"				select .currentTable\n"
"				.newCol = Get column index... '.colLabel$'\n"
"				if .newCol <= 0\n"
"					Append column... '.colLabel$'\n"
"					select .newTable\n"
"					.numRows = Get number of rows\n"
"					for .row to .numRows\n"
"						select .newTable\n"
"						.id$ = Get value... .row ID\n"
"						.newValue$ = Get value... .row '.colLabel$'\n"
"						select .currentTable\n"
"						.tmpRow = Search column... ID '.id$'\n"
"						if .tmpRow > 0\n"
"							Set string value... .tmpRow '.colLabel$' '.newValue$'\n"
"						endif\n"
"					endfor\n"
"				endif\n"
"			endif\n"
"		endfor\n"
"endproc\n"
"\n"
"procedure rating_String .speakerID$\n"
"	.subtext$ = \"\"\n"
"	\n"
"	call predictVQvalue\n"
"	predictedPathVQ = predictVQvalue.vq / 10\n"
"\n"
"	# Get Ratings\n"
"	# Rating.quality\n"
"	call get_RatingInfo Rating.quality '.speakerID$'\n"
"	if get_RatingInfo.subtext$ <> \"\"\n"
"		.subtext$ = .subtext$ + \" \" + get_RatingInfo.subtext$\n"
"	else\n"
"		call get_printsignal_text 'config.language$' Rating.quality\n"
"		.vq$ = get_printsignal_text.text$\n"
"		call get_RatingInfo Rating.impression '.speakerID$'\n"
"		if get_RatingInfo.subtext$ <> \"\"\n"
"			.subtext$ = .subtext$ + \" \" + .vq$ + \"/\" + get_RatingInfo.subtext$\n"
"		else\n"
"			# There is always a computed value\n"
"			.subtext$ = .subtext$ + \" \" + get_printsignal_text.text$ + \": -\"\n"
"		endif\n"
"	endif\n"
"	call get_printsignal_text 'config.language$' CompVQ\n"
"	.compvqText$ = get_printsignal_text.text$\n"
"	.subtext$ = .subtext$ + \", \" + .compvqText$ + \": 'predictedPathVQ:0'\"\n"
"	\n"
"	# Rating.continuity\n"
"	call get_RatingInfo Rating.continuity '.speakerID$'\n"
"	if get_RatingInfo.subtext$ <> \"\"\n"
"		.subtext$ = .subtext$ + \"; \" + get_RatingInfo.subtext$\n"
"	endif\n"
"	\n"
"	# Rating.impression\n"
"	call get_RatingInfo Rating.impression '.speakerID$'\n"
"	if get_RatingInfo.subtext$ <> \"\"\n"
"		.subtext$ = .subtext$ + \"; \" + get_RatingInfo.subtext$\n"
"	endif\n"
"	\n"
"	# Rating.intelligibility\n"
"	call get_RatingInfo Rating.intelligibility '.speakerID$'\n"
"	if get_RatingInfo.subtext$ <> \"\"\n"
"		.subtext$ = .subtext$ + \"; \" + get_RatingInfo.subtext$\n"
"	endif\n"
"	\n"
"	# Rating.fluency\n"
"	call get_RatingInfo Rating.fluency '.speakerID$'\n"
"	if get_RatingInfo.subtext$ <> \"\"\n"
"		.subtext$ = .subtext$ + \"; \" + get_RatingInfo.subtext$\n"
"	endif\n"
"	\n"
"	# Rating.noise\n"
"	call get_RatingInfo Rating.noise '.speakerID$'\n"
"	if get_RatingInfo.subtext$ <> \"\"\n"
"		.subtext$ = .subtext$ + \"; \" + get_RatingInfo.subtext$\n"
"	endif\n"
"	\n"
"	# Rating.voice\n"
"	call get_RatingInfo Rating.voice '.speakerID$'\n"
"	if get_RatingInfo.subtext$ <> \"\"\n"
"		.subtext$ = .subtext$ + \"; \" + get_RatingInfo.subtext$\n"
"	endif\n"
"	\n"
"	# Rating.grade\n"
"	call get_RatingInfo Rating.grade '.speakerID$'\n"
"	if get_RatingInfo.subtext$ <> \"\"\n"
"		.subtext$ = .subtext$ + \"; \" + get_RatingInfo.subtext$\n"
"	endif\n"
"\n"
"	# Rating.roughness\n"
"	call get_RatingInfo Rating.roughness '.speakerID$'\n"
"	if get_RatingInfo.subtext$ <> \"\"\n"
"		.subtext$ = .subtext$ + \"; \" + get_RatingInfo.subtext$\n"
"	endif\n"
"\n"
"	# Rating.breathiness\n"
"	call get_RatingInfo Rating.breathiness '.speakerID$'\n"
"	if get_RatingInfo.subtext$ <> \"\"\n"
"		.subtext$ = .subtext$ + \"; \" + get_RatingInfo.subtext$\n"
"	endif\n"
"\n"
"	# Rating.asthenia\n"
"	call get_RatingInfo Rating.asthenia '.speakerID$'\n"
"	if get_RatingInfo.subtext$ <> \"\"\n"
"		.subtext$ = .subtext$ + \"; \" + get_RatingInfo.subtext$\n"
"	endif\n"
"\n"
"	# Rating.strain\n"
"	call get_RatingInfo Rating.strain '.speakerID$'\n"
"	if get_RatingInfo.subtext$ <> \"\"\n"
"		.subtext$ = .subtext$ + \"; \" + get_RatingInfo.subtext$\n"
"	endif\n"
"endproc\n"
"\n"
"procedure get_RatingInfo .ratinglabel$ .speakerID$\n"
"	.subtext$ = \"\"\n"
"	call get_speakerInfo '.speakerID$'\n"
"	if config.speakerDataTable > 0\n"
"		select config.speakerDataTable\n"
"		.col = Get column index... '.ratinglabel$'\n"
"		.rating_value = -1\n"
"		if .col > 0\n"
"			.rating_value = do(\"Get value...\", get_speakerInfo.row, .ratinglabel$)\n"
"			if .rating_value = undefined\n"
"				.rating_value = -1\n"
"			else\n"
"				.rating_value /= 10\n"
"			endif\n"
"		endif\n"
"		if .rating_value >= 0\n"
"			call get_printsignal_text 'config.language$' '.ratinglabel$'\n"
"			.subtext$ = get_printsignal_text.text$ + \": '.rating_value:1'\"\n"
"		endif\n"
"	endif\n"
"endproc\n"
"\n"
"# Start instruction loop\n"
"while demoWaitForInput()\n"
"	.label$ = \"\"\n"
"	.clickX = -1\n"
"	.clickY = -1\n"
"	.pressed$ = \"\"\n"
"	if demoClicked()\n"
"		.clickX = demoX()\n"
"		.clickY = demoY()\n"
"		call buttonClicked 'te.buttons$' '.clickX' '.clickY'\n"
"		.label$ = buttonClicked.label$\n"
"	elsif demoKeyPressed()\n"
"		.pressed$ = demoKey$()\n"
"		call keyPressed 'te.buttons$' '.pressed$'\n"
"		.label$ = keyPressed.label$\n"
"	endif\n"
"	\n"
"	# You cannot select a text field\n"
"	if startsWith(.label$, \"$\") or startsWith(.label$, \"!\")\n"
"		# All caps labels are \"unhideable\"\n"
"		if index_regex(.label$, \"[a-z]\") > 0\n"
"			.label$ = \"\"\n"
"		endif\n"
"	endif\n"
"	\n"
"	# Do things\n"
"	if .label$ != \"\"\n"
"		# Push button down\n"
"		call Draw_button 'te.buttons$' '.label$' 1\n"
"		call process_label '.label$' '.clickX' '.clickY' '.pressed$'\n"
"		# push button up should be done by process_label\n"
"	endif\n"
"endwhile\n"
"\n"
"call end_program\n"
"\n"
"label NON_INTERACTIVE\n"
"\n"
"# Note that include files are read at load time, not at execution\n"
"# time. So all code is present irrespective of whether the execution\n"
"# path touches it. Note that in non-interactive mode, no initialization\n"
"# is performed. Use \"call global_initialization\" and \"call global_setup\"\n"
"# To initialize the system (see Initialise.praat)\n"
"\n"
"########################################################\n"
"# \n"
"# Definitions of procedures\n"
"# \n"
"########################################################\n"
"#\n"
"# Do what is asked\n"
"procedure process_label .label$ .clickX .clickY .pressed$\n"
"	# Log raw commands to replay in file\n"
"	call log_command 'te.buttons$' '.label$' '.clickX' '.clickY' '.pressed$'\n"
"	\n"
"	# Process the command\n"
"	if .label$ <> \"\" and not startsWith(.label$,\"!\")\n"
"		.label$ = replace$(.label$, \"_\", \" \", 0)\n"
"		call process'te.buttons$''.label$' '.clickX' '.clickY' '.pressed$'\n"
"	elsif .label$ <> \"\" and startsWith(.label$,\"!\")\n"
"		.label$ = right$(.label$, length(.label$)-1)\n"
"		.label$ = replace$(.label$, \"_\", \" \", 0)\n"
"		call process'te.buttons$''.label$' '.clickX' '.clickY' '.pressed$'\n"
"	endif\n"
"endproc\n"
"\n"
"# Intialize buttons\n"
"procedure init_buttons\n"
"	# Set Speaker color\n"
"	call switch_speaker_next_button 'config.speakerSerial$'\n"
"\n"
"	call Draw_all_buttons 'te.buttons$'\n"
"endproc\n"
"\n"
"# Draw all buttons\n"
"procedure Draw_all_buttons .table$\n"
"	.varPrefix$ = replace_regex$(.table$, \"^(.)\", \"\\l\\1\", 0)\n"
"	if index_regex(.table$, \"[^0-9]\") > 0\n"
"		select Table '.table$'\n"
"	else\n"
"		select '.table$'\n"
"		.table$ = selected$(\"Table\")\n"
"	endif\n"
"	.numRows = Get number of rows\n"
"	\n"
"	for .row to .numRows\n"
"		.label$ = Get value... '.row' Label\n"
"		if startsWith(.label$, \">\")\n"
"		    call Draw_button_internal 1 '.table$' '.label$' 0\n"
"		elsif startsWith(.label$, \"()\")\n"
"			.pressed$ = \"0\"\n"
"			.labelName$ = replace_regex$(.label$, \"^[^A-Za-z]+([^_]+)(_.*)?$\", \"\\l\\1\", 0)\n"
"			.varValue$ = replace_regex$(.label$, \"^[^_]+_(.*)$\", \"\\1\", 0)\n"
"			if variableExists(\"rating.'.labelName$'$\") \n"
"				.tmp$ = rating.'.labelName$'$\n"
"				if .tmp$ = .varValue$\n"
"					.pressed$ = \"2\"\n"
"				endif\n"
"			endif\n"
"		    call Draw_button_internal 1 '.table$' '.label$' '.pressed$'\n"
"			\n"
"        elsif not startsWith(.label$, \"!\") \n"
"			.pressed = 0\n"
"			# Determine the \"pressed\" state of a button\n"
"			# A variable with the same name as the button will act as a\n"
"			# \"pressed state\"\n"
"			.variableName$ = .varPrefix$+\".\"+(replace_regex$(.label$, \"^(.)\", \"\\l\\1\", 0))\n"
"			# Simple boolean variables\n"
"			if index(.variableName$, \"_\") <= 0 and variableExists(.variableName$)\n"
"				# True: Pressed\n"
"				if '.variableName$' > 0\n"
"					.pressed = 2\n"
"				# <0: Grayed out\n"
"				elsif '.variableName$' < 0\n"
"					.pressed = -1\n"
"				endif\n"
"			# Complex buttons with an variableName+'_'+value structure\n"
"			# varableName$ -> name of button, e.g., \"language\"\n"
"			elsif index(.variableName$, \"_\")\n"
"				.generalVar$ = left$(.variableName$, rindex(.variableName$, \"_\") - 1)\n"
"				.currentVariableName$ = .generalVar$\n"
"				# Is it a string?\n"
"				if variableExists(.generalVar$+\"$\")\n"
"					.currentVariableName$ = .generalVar$ + \"$\"\n"
"				endif\n"
"				# Remove one level of indirection\n"
"				if variableExists(.currentVariableName$)\n"
"					if index(.currentVariableName$, \"$\")\n"
"						.currentVariableName$ = '.currentVariableName$'\n"
"					else\n"
"						.currentValue = '.currentVariableName$'\n"
"						.currentVariableName$ = \"'.currentValue'\"\n"
"					endif\n"
"					# Remove next level of indirection\n"
"					.currentContent$ = \"'.currentVariableName$'\"\n"
"					if .currentContent$ = \"_DISABLED_\"\n"
"						.pressed = -1\n"
"					endif\n"
"					# Reconstruct label from current values\n"
"					.currentLabelValue$ = .generalVar$ + \"_\" + .currentContent$\n"
"					# Set PRESSED from label\n"
"					 if .variableName$ = .currentLabelValue$\n"
"						.pressed = 2\n"
"					endif\n"
"				endif\n"
"			endif\n"
"			# You did erase everything before you started here? So do not do that again\n"
"		    call Draw_button_internal 0 '.table$' '.label$' '.pressed'\n"
"        endif\n"
"	endfor\n"
"endproc\n"
"\n"
"# Draw a button from a predefined button table\n"
"# Normally, erase the area around a button\n"
"procedure Draw_button .table$ .label$ .push\n"
"	call Draw_button_internal 1 '.table$' '.label$' '.push'\n"
"endproc\n"
"\n"
"# Use this function if you want to control erasing\n"
"procedure Draw_button_internal .erase_button_area .table$ .label$ .push\n"
"    if startsWith(.label$, \"!\")\n"
"    	goto NOBUTTON\n"
"    endif\n"
"	# Scale rounding of rounded rectangles\n"
"	.wc = 1\n"
"	.mm = demo Horizontal wc to mm... '.wc' \n"
"    # Allow to overide ! skip directive\n"
"    .forceDraw = 0\n"
"    if startsWith(.label$, \"+\")\n"
"    	.label$ = right$(.label$, length(.label$)-1)\n"
"     	.forceDraw = 1\n"
"    endif\n"
"\n"
"    select Table '.table$'\n"
"    .row = Search column... Label '.label$'\n"
"	if .row < 1\n"
"		if not startsWith(.label$, \"!\")\n"
"			.rowHidden = Search column... Label !'.label$'\n"
"			if .rowHidden > 0\n"
"				goto NOBUTTON\n"
"			endif\n"
"		endif\n"
"		call emergency_table_exit Button Table '.table$' does not have a row with label '.label$'\n"
"	endif\n"
"	\n"
"	# Perspective shift sizes\n"
"	.shiftDown = 0\n"
"	.shiftX = 0\n"
"	.shiftY = 0\n"
"	if buttonbevel <> 0\n"
"		.shiftDown = 0.05\n"
"    	.shiftX = 0.30\n"
"    	.shiftY = 0.50\n"
"	endif\n"
"	\n"
"	# Set drawing parameters\n"
"	.topBackGroundColorUp$ = \"{0.93,0.93,0.93}\"\n"
"	.topLineColorUp$ = \"Black\"\n"
"	.topLineWidthUp = 1.5\n"
"	.topBackGroundColorDown$ = \"{0.82,0.82,0.9}\"\n"
"	.topLineColorDown$ = \"{0.3,0.3,0.3}\"\n"
"	.topLineWidthDown = 1.5\n"
"	.topBackGroundColorDisabled$ = \"{0.90,0.90,0.90}\"\n"
"	.topLineColorDisabled$ = \"{0.85,0.85,0.85}\"\n"
"	.topLineWidthDisabled = 1.5\n"
"	.flankBackGroundColorUp$ = \"{0.6,0.6,0.6}\"\n"
"	.flankLineColorUp$ = \"{0.2,0.2,0.2}\"\n"
"	.flankLineWidthUp = 1.5\n"
"	.flankBackGroundColorDown$ = \"{0.75,0.75,0.75}\"\n"
"	.flankLineColorDown$ = .flankLineColorUp$\n"
"	.flankLineWidthDown = 1.5\n"
"	.buttonFontSize = defaultFontSize\n"
"	\n"
"	# Get button values\n"
"    .leftX = Get value... '.row' LeftX\n"
"    .rightX = Get value... '.row' RightX\n"
"    .lowY = Get value... '.row' LowY\n"
"    .highY = Get value... '.row' HighY\n"
"    .buttonText$ = Get value... '.row' Text\n"
"    .buttonKey$ = Get value... '.row' Key\n"
"    .buttonColor$ = Get value... '.row' Color\n"
"    .buttonDraw$ = Get value... '.row' Draw\n"
"    .buttonKey$ = Get value... '.row' Key\n"
"    \n"
"    # No visible button\n"
"    if .leftX <= 0 and .rightX <= 0 and .lowY <= 0 and .highY <= 0\n"
"    	goto NOBUTTON\n"
"    endif\n"
"\n"
"	.rotation = 0\n"
"	if index_regex(.buttonText$, \"^![0-9\\.]+!\")\n"
"		.rotation = extractNumber(.buttonText$, \"!\")\n"
"		.buttonText$ = replace_regex$(.buttonText$, \"^![0-9\\.]+!\", \"\", 0)\n"
"	endif\n"
"\n"
"    # Replace button text with ALERT\n"
"    if .push = 3\n"
"        .buttonText$ = alertText$\n"
"    endif\n"
"	\n"
"	# Adapt font size to button size\n"
"	.maxWidth = (.rightX - .leftX) - 2\n"
"	.maxHeight = (.highY - .lowY) - 1\n"
"	if .rotation = 0\n"
"		# Adapt size of button to length of text if necessary\n"
"		call adjustFontSizeOnWidth '.buttonFontSize' '.maxWidth' '.buttonText$'\n"
"		.buttonFontSize = adjustFontSizeOnWidth.newFontSize\n"
"		if adjustFontSizeOnWidth.diff > 0\n"
"			.rightX += adjustFontSizeOnWidth.diff/2\n"
"			.leftX -= adjustFontSizeOnWidth.diff/2\n"
"		endif\n"
"		call set_font_size '.buttonFontSize'\n"
"\n"
"		# Adapt size of button to length of text\n"
"		call adjustFontSizeOnHeight '.buttonFontSize' '.maxHeight'\n"
"		if adjustFontSizeOnHeight.diff > 0\n"
"			.lowY -= adjustFontSizeOnHeight.diff/2\n"
"			.highY += adjustFontSizeOnHeight.diff/2\n"
"		endif\n"
"		.buttonFontSize = adjustFontSizeOnHeight.newFontSize\n"
"	else\n"
"		# With non-horizontal text, only change font size\n"
"		call adjustRotatedFontSizeOnBox '.buttonFontSize' '.maxWidth' '.maxHeight' '.rotation' '.buttonText$'\n"
"		.buttonFontSize = adjustRotatedFontSizeOnBox.newFontSize\n"
"	endif\n"
"	\n"
"	# Reset and erase button area\n"
"	call reset_viewport\n"
"    demo Line width... 'defaultLineWidth'\n"
"    .shiftLeftX = .leftX - .shiftX\n"
"    .shiftRightX = .rightX\n"
"    .shiftLowY = .lowY - .shiftY\n"
"    .shiftHighY = .highY\n"
"	if .erase_button_area\n"
"		# Make erase area minutely larger\n"
"		.eraseLeft = .shiftLeftX - 0.1\n"
"		.eraseRight = .shiftRightX + 0.1\n"
"		.eraseBottom = .shiftLowY - 0.01\n"
"		.eraseTop = .shiftHighY + 0.01\n"
"		demo Paint rectangle... White .eraseLeft .eraseRight .eraseBottom .eraseTop\n"
"	endif\n"
"	# Set a \"gray area\" around buttons with a _\n"
"	if index(.label$, \"_\")\n"
"		# Make erase area minutely larger\n"
"		.eraseLeft = .shiftLeftX - 0.5\n"
"		.eraseRight = .shiftRightX + 0.5\n"
"		.eraseBottom = .shiftLowY - 0.8\n"
"		.eraseTop = .shiftHighY + 0.8\n"
"		demo Paint rectangle... {0.92,0.92,0.92} .eraseLeft .eraseRight .eraseBottom .eraseTop\n"
"	endif\n"
"	\n"
"    # If label starts with \"$\", it is a text field. Then do not draw the button\n"
"	if startsWith(.label$, \"()\")\n"
"		.radius = min((.shiftRightX - .shiftLeftX), (.highY - .lowY)/4)\n"
"		.innerRadius = 2* .radius / 3\n"
"		.circleX = (.shiftRightX + .shiftLeftX)/2\n"
"		.circleY = .shiftHighY - .radius\n"
"\n"
"    	# Give some depth to button: Draw flank outline\n"
"		if .shiftDown or .shiftX or .shiftY\n"
"			if .push <= 0\n"
"    			demo Paint circle: .flankBackGroundColorUp$, .circleX, .circleY, .radius\n"
"				demo Colour: .flankLineColorUp$\n"
"    			demo Line width: .flankLineWidthUp\n"
"			else\n"
"    			demo Paint circle: .flankBackGroundColorDown$, .circleX, .circleY, .radius\n"
"				demo Colour: .flankLineColorDown$\n"
"    			demo Line width: .flankLineWidthDown\n"
"			endif\n"
"    		demo Draw circle: .circleX, .circleY, .radius\n"
"		endif\n"
"		\n"
"		.circleX = (.rightX + .leftX)/2\n"
"		.circleY = .highY - .radius\n"
"\n"
"    	# Draw the button top\n"
"		if .push = 0\n"
"			demo Paint circle: .topBackGroundColorUp$, .circleX, .circleY, .radius\n"
"			demo Colour: .topLineColorUp$\n"
"			demo Line width: .topLineWidthUp\n"
"		elsif .push < 0\n"
"			demo Paint circle: .topBackGroundColorDisabled$, .circleX, .circleY, .radius\n"
"			demo Colour: .topLineColorDisabled$\n"
"			demo Line width: .topLineWidthDisabled\n"
"		elsif .push = 1\n"
"			demo Paint circle: .topBackGroundColorDisabled$, .circleX, .circleY, .radius\n"
"			demo Paint circle: \"Grey\", .circleX, .circleY, .innerRadius\n"
"			demo Colour: .topLineColorDisabled$\n"
"			demo Line width: .topLineWidthDisabled\n"
"		else\n"
"			# Button Down\n"
"			.circleX = (.rightX + .leftX)/2 - .shiftDown\n"
"			.circleY = .highY -.radius - .shiftDown\n"
"\n"
"			demo Paint circle: .topBackGroundColorDown$, .circleX, .circleY, .radius\n"
"			demo Paint circle: \"Black\", .circleX, .circleY, .innerRadius\n"
"			demo Colour: .topLineColorDown$\n"
"			demo Line width: .topLineWidthDown\n"
"		endif\n"
"    	demo Draw circle: .circleX, .circleY, .radius\n"
"		\n"
"	elsif not startsWith(.label$, \"$\")\n"
"    	# Give some depth to button: Draw flank outline\n"
"		if .shiftDown or .shiftX or .shiftY\n"
"			if .push <= 0\n"
"    			demo Paint rounded rectangle... '.flankBackGroundColorUp$' .shiftLeftX .shiftRightX .shiftLowY .shiftHighY '.mm'\n"
"				demo Colour... '.flankLineColorUp$'\n"
"    			demo Line width... '.flankLineWidthUp'\n"
"			else\n"
"    			demo Paint rounded rectangle... '.flankBackGroundColorDown$' .shiftLeftX .shiftRightX .shiftLowY .shiftHighY '.mm'\n"
"				demo Colour... '.flankLineColorDown$'\n"
"    			demo Line width... '.flankLineWidthDown'\n"
"			endif\n"
"    		demo Draw rounded rectangle... .shiftLeftX .shiftRightX .shiftLowY .shiftHighY '.mm'\n"
"		endif\n"
"		# Button Down will shift the top perspective\n"
"\n"
"    	# Draw the button top\n"
"		if .push = 0\n"
"    		demo Paint rounded rectangle... '.topBackGroundColorUp$' '.leftX' '.rightX' '.lowY' '.highY' '.mm'\n"
"			demo Colour... '.topLineColorUp$'\n"
"    		demo Line width... '.topLineWidthUp'\n"
"		elsif .push < 0\n"
"    		demo Paint rounded rectangle... '.topBackGroundColorDisabled$' '.leftX' '.rightX' '.lowY' '.highY' '.mm'\n"
"			demo Colour... '.topLineColorDisabled$'\n"
"    		demo Line width... '.topLineWidthDisabled'\n"
"		else\n"
"			# Button Down\n"
"			.leftX -= .shiftDown\n"
"			.rightX -= .shiftDown\n"
"			.lowY -= .shiftDown\n"
"			.highY -= .shiftDown\n"
"\n"
"    		demo Paint rounded rectangle... '.topBackGroundColorDown$' .leftX .rightX .lowY .highY '.mm'\n"
"			demo Colour... '.topLineColorDown$'\n"
"    		demo Line width... '.topLineWidthDown'\n"
"		endif\n"
"    	demo Draw rounded rectangle... '.leftX' '.rightX' '.lowY' '.highY' '.mm'\n"
"    	\n"
"    	\n"
"	endif\n"
"    # The button text and symbol\n"
"	.horWC = demo Horizontal mm to wc... 10.0\n"
"	.verWC = demo Vertical mm to wc... 10.0\n"
"	if .verWC > 0\n"
"		.verCoeff = .horWC / .verWC\n"
"	else\n"
"		.verCoeff = 1\n"
"	endif\n"
"\n"
"    .centerX = (.leftX + .rightX)/2\n"
"    .centerY = .lowY + 0.6*(.highY-.lowY)\n"
"    .radius = min(.verCoeff * (.highY - .lowY ), (.rightX - .leftX))/3\n"
"	.keyText$ = replace$(.buttonKey$, \"\\\", \"\", 0)\n"
"	.keyText$ = replace$(.keyText$, \"-\", \"\", 0)\n"
"	.newText$ = \"\"\n"
"	if .keyText$ <> \"\"\n"
"		.newText$ = replace_regex$(.buttonText$, \"['.keyText$']\", \"#%&\", 1)\n"
"	endif\n"
"	if .newText$ = \"\"\n"
"		.newText$ = .buttonText$\n"
"	endif\n"
"	if .push = 1 or .push = -1\n"
"		demo Grey\n"
"		if .buttonColor$ = \"Red\"\n"
"			.buttonColor$ = \"Pink\"\n"
"		elsif .buttonColor$ = \"Blue\"\n"
"			.buttonColor$ = \"{0.5,0.5,1}\"\n"
"		else\n"
"			.buttonColor$ = \"Grey\"\n"
"		endif\n"
"    elsif .push >= 2\n"
"        .buttonColor$ = \"Maroon\"\n"
"    elsif .push <= -2\n"
"        .buttonColor$ = \"{0.85,0.85,0.85}\"\n"
"	else\n"
"    	demo Colour... Black\n"
"	endif\n"
"\n"
"    call '.buttonDraw$' '.buttonColor$' '.centerX' '.centerY' '.radius' \n"
"	call set_font_size '.buttonFontSize'\n"
"    demo Colour... '.buttonColor$'\n"
"	if .rotation = 0\n"
"		.anchorY = .lowY\n"
"		.verticalAlignment$ = \"Bottom\"\n"
"	else\n"
"		.anchorY = .lowY + 0.5*(.highY-.lowY)\n"
"		.verticalAlignment$ = \"Half\"\n"
"	endif\n"
"	# Handle VAScale bars\n"
"    if startsWith(.label$, \">\")\n"
"		# Wipe previous Text\n"
"		.eraseLeft = .leftX\n"
"		.textLength = demo Text width (wc)... '.newText$'\n"
"		.eraseRight = .eraseLeft + .textLength\n"
"		.eraseBottom = .highY + 1\n"
"		.eraseTop = .eraseBottom + adjustFontSizeOnHeight.lineHeight\n"
"		demo Paint rectangle... White .eraseLeft .eraseRight .eraseBottom .eraseTop\n"
"		\n"
"		# Write new label\n"
"		demo Text special... '.leftX' Left '.highY' Bottom 'defaultFont$' '.buttonFontSize' '.rotation' '.buttonText$'\n"
"		# Write other texts\n"
"		.leftMark$ = \"\"\n"
"		.rightMark$ = \"\"\n"
"		if index(.buttonKey$, \";\") > 0\n"
"			.leftMark$ = left$(.buttonKey$, index(.buttonKey$, \";\")-1)\n"
"			.rightMark$ = extractLine$(.buttonKey$, \";\")\n"
"		endif\n"
"		if index_regex(.leftMark$, \"\\S\")\n"
"			.textX = .leftX - 1\n"
"			# Wipe area\n"
"			.eraseRight = .textX\n"
"			.textLength = demo Text width (wc)... '.leftMark$'\n"
"			call points_to_wc '.buttonFontSize'\n"
"			.textHeight = points_to_wc.wc\n"
"			.eraseLeft = .eraseRight - .textLength - 1\n"
"			.eraseBottom = .lowY\n"
"			.eraseTop = .eraseBottom + .textHeight + 1\n"
"			demo Paint rectangle... White .eraseLeft .eraseRight .eraseBottom .eraseTop\n"
"			# Write left mark\n"
"			demo Text special... '.textX' Right '.lowY' Bottom 'defaultFont$' '.buttonFontSize' '.rotation' '.leftMark$'\n"
"		endif\n"
"		if index_regex(.rightMark$, \"\\S\")\n"
"			.textX = .rightX + 0.5\n"
"			# Wipe area\n"
"			.eraseLeft = .textX\n"
"			.textLength = demo Text width (wc)... '.rightMark$'\n"
"			call points_to_wc '.buttonFontSize'\n"
"			.textHeight = points_to_wc.wc\n"
"			.eraseRight = .eraseLeft + .textLength + 1\n"
"			.eraseBottom = .lowY\n"
"			.eraseTop = .eraseBottom + .textHeight + 1\n"
"			demo Paint rectangle... White .eraseLeft .eraseRight .eraseBottom .eraseTop\n"
"			demo Text special... '.textX' Left '.lowY' Bottom 'defaultFont$' '.buttonFontSize' '.rotation' '.rightMark$'\n"
"		endif\n"
"		# Draw ticks\n"
"		if config.vasScaleTicks\n"
"			.deltaSmallTick = (.rightX - .leftX)/20\n"
"			.deltaLargeTick = (.rightX - .leftX)/10\n"
"			demo Colour... {0.6,0.6,0.8}\n"
"			demo Line width... 1\n"
"	 		# Small scale ticks\n"
"	 		.tickhighY = .highY - (.highY-.lowY)/3\n"
"	 		.ticklowY = .lowY + (.highY-.lowY)/3\n"
"			.scaleTick = .leftX + .deltaSmallTick\n"
"			while .scaleTick < .rightX\n"
"				demo Draw line... '.scaleTick' '.ticklowY' '.scaleTick' '.tickhighY'\n"
"				.scaleTick +=  .deltaLargeTick\n"
"			endwhile\n"
"	 		# Big scale ticks\n"
"	 		.tickhighY = .highY - (.highY-.lowY)/5\n"
"	 		.ticklowY = .lowY + (.highY-.lowY)/5\n"
"			.scaleTick = .leftX + .deltaLargeTick\n"
"			.tickTexts = 10\n"
"			while .scaleTick < .rightX\n"
"				demo Text special... '.scaleTick' Centre '.lowY' Top 'defaultFont$' 7 0 '.tickTexts'\n"
"				demo Draw line... '.scaleTick' '.ticklowY' '.scaleTick' '.tickhighY'\n"
"				.scaleTick +=  .deltaLargeTick\n"
"				.tickTexts += 10\n"
"			endwhile\n"
"		endif\n"
"		\n"
"		# Draw current position tick\n"
"		.varName$ = replace_regex$(.label$, \"^[^a-zA-Z]+([a-zA-Z])\", \"\\l\\1\", 0)\n"
"		.varName$ = \"rating.'.varName$'\"\n"
"		.varNameArray$ = \"'.varName$'Array\"\n"
"		.fraction = -1\n"
"		# Several values\n"
"		if variableExists(.varNameArray$+\"[1]\") and '.varName$'Array[1] > -1\n"
"			.vasColor$ = \"Blue\"\n"
"			.numFractions = '.varName$'ArrayLength\n"
"			for .fi to .numFractions\n"
"				.fraction = '.varNameArray$'[.fi]\n"
"				if .fraction != undefined\n"
"					if .fraction < 0\n"
"						.fraction = 0.5\n"
"						.vasColor$ = \"Grey\"\n"
"					endif\n"
"					.midpoint = .leftX + .fraction * (.rightX - .leftX)\n"
"					demo Colour... '.vasColor$'\n"
"					demo Line width... 1.5\n"
"					demo Draw line... '.midpoint' '.lowY' '.midpoint' '.highY'\n"
"				endif\n"
"			endfor\n"
"		# Single marker\n"
"		elsif variableExists(.varName$)\n"
"			.vasColor$ = \"Red\"\n"
"			.fraction = -1\n"
"			.fraction = '.varName$'\n"
"			if .fraction < 0\n"
"				.fraction = 0.5\n"
"				.vasColor$ = \"Grey\"\n"
"			endif\n"
"			.midpoint = .leftX + .fraction * (.rightX - .leftX)\n"
"			demo Colour... '.vasColor$'\n"
"			demo Line width... 1.5\n"
"			demo Draw line... '.midpoint' '.lowY' '.midpoint' '.highY'\n"
"		endif\n"
"	elsif startsWith(.label$, \"()\")\n"
"		demo Text special... '.centerX' Centre '.lowY' Half 'defaultFont$' '.buttonFontSize' 0 '.newText$'\n"
"    else\n"
"		demo Text special... '.centerX' Centre '.anchorY' '.verticalAlignment$' 'defaultFont$' '.buttonFontSize' '.rotation' '.newText$'\n"
"	endif\n"
"	demoShow()\n"
"\n"
"	# Reset\n"
"	call set_font_size 'defaultFontSize'\n"
"    demo 'defaultFontColor$'\n"
"    demo Line width... 'defaultLineWidth'\n"
"    \n"
"    label NOBUTTON\n"
"endproc\n"
"\n"
"procedure set_window_title .table$ .addedText$\n"
"    select Table '.table$'\n"
"    .row = Search column... Label !WindowTitle\n"
"	if .row < 1\n"
"		call emergency_table_exit Button Table '.table$' does not have a row with label !WindowTitle\n"
"	endif\n"
"	.windowText$ = Get value... '.row' Text\n"
"	call convert_praat_to_latin1 '.windowText$'\n"
"	.windowText$ = convert_praat_to_latin1.text$\n"
"\n"
"	if index(.windowText$, \"$$$\")\n"
"		.displayWindowText$ = replace$(.windowText$, \"$$$\", .addedText$, 0)\n"
"	else\n"
"		.displayWindowText$ = .windowText$ + .addedText$\n"
"	endif\n"
"	\n"
"    demoWindowTitle(.displayWindowText$ )\n"
"endproc\n"
"\n"
"# Handle language setting \n"
"procedure processLanguageCodes .table$ .label$\n"
"	.table$ = \"Config\"\n"
"    call Draw_button 'te.config$' Language_'config.language$' 0\n"
"    call Draw_button 'te.config$' '.label$' 2\n"
"    # Someone might have to use more than 2 chars for the language code\n"
"    .numChars = length(.label$) - length(\"Language_\")\n"
"	.lang$ = right$(.label$, .numChars)\n"
"    # Load new tables\n"
"    call set_language '.lang$'\n"
"endproc\n"
"\n"
"# Set the language\n"
"procedure set_language .lang$\n"
"	.redraw_config = 0\n"
"    # Remove old tables\n"
"    if te.buttons$ <> \"\"\n"
"        select Table 'te.buttons$'\n"
"        Remove\n"
"		.redraw_config = 1\n"
"    endif\n"
"    if te.config$ <> \"\"\n"
"        select Table 'te.config$'\n"
"        Remove\n"
"		.redraw_config = 1\n"
"    endif\n"
"    if te.ratingTable > 0\n"
"		select te.ratingTable\n"
"		Remove\n"
"		te.ratingTable = -1\n"
"		te.rating$ = \"\"\n"
"    endif\n"
"    \n"
"    # Set language\n"
"	call checkTable 'buttonsFileName$'_'.lang$'\n"
"	# Handle alternative Main Page layout\n"
"	if not checkTable.available\n"
"		call checkTable 'buttonsTableName$'_'.lang$'\n"
"	endif\n"
"	\n"
"	if checkTable.available\n"
"		config.language$ = .lang$\n"
"		\n"
"		if config.language$ = \"JA\"\n"
"			CJK font style preferences: \"Japanese\"\n"
"		elsif config.language$ = \"ZH\"\n"
"			CJK font style preferences: \"Chinese\"\n"
"		endif\n"
"	else\n"
"		config.language$ = \"EN\"\n"
"	endif\n"
"    \n"
"    # Load buttons tables\n"
"    call loadLanguageTable 'buttonsTableName$' 'config.language$'\n"
"    select loadLanguageTable.tableID\n"
"    te.buttons$ = selected$(\"Table\")\n"
"    call relative2absolutePosition 'te.buttons$'\n"
"	if config.ratingExperiment\n"
"		call hide_buttons_for_rating_experiment\n"
"	endif\n"
"    # Load configuration table\n"
"    call loadLanguageTable 'configTableName$' 'config.language$'\n"
"    select loadLanguageTable.tableID\n"
"    te.config$ = selected$(\"Table\")\n"
"    call relative2absolutePosition 'te.config$'\n"
"    \n"
"    # Hide platform specific buttons on load\n"
"	if windows\n"
"		call hide_button 'te.config$' SaveFMT_PDF\n"
"	else\n"
"		call hide_button 'te.config$' SaveFMT_EMF\n"
"	endif\n"
"    \n"
"\n"
"	# Make language change visible\n"
"	if .redraw_config\n"
"		call Draw_config_page\n"
"	endif\n"
"endproc\n"
"\n"
"###############################################################\n"
"#\n"
"# Button Drawing Routines\n"
"#\n"
"###############################################################\n"
"\n"
"# A stub for buttons that do not have a drawing routine (yet)\n"
"procedure DrawNull .color$ .x .y .size\n"
"endproc\n"
"\n"
"procedure DrawHelp .color$ .x .y .size\n"
"	.currentFontSize = 24\n"
"	.y -= .size\n"
"	.maxHeight = 2*.size\n"
"	call adjustFontSizeOnHeight '.currentFontSize' '.maxHeight'\n"
"	.currentFontSize = adjustFontSizeOnHeight.currentFontSize\n"
"	call set_font_size '.currentFontSize'\n"
"	demo Colour... '.color$'\n"
"	demo Text... '.x' Centre '.y' Bottom ?\n"
"	call set_font_size 'defaultFontSize'\n"
"endproc\n"
"\n"
"procedure DrawSave .color$ .x .y .size\n"
"	.currentFontSize = 24\n"
"	.y -= 0.5*.size\n"
"	.maxHeight = 1.5*.size\n"
"	call adjustFontSizeOnHeight '.currentFontSize' '.maxHeight'\n"
"	.currentFontSize = adjustFontSizeOnHeight.currentFontSize\n"
"	call set_font_size '.currentFontSize'\n"
"	demo Colour... '.color$'\n"
"	demo Text... '.x' Centre '.y' Bottom \\# \n"
"	call set_font_size 'defaultFontSize'\n"
"endproc\n"
"\n"
"###############################################################\n"
"#\n"
"# Button Processing Routines\n"
"#\n"
"###############################################################\n"
"# Convert relative button positions to absolute button positions\n"
"procedure relative2absolutePosition .table$\n"
"	select Table '.table$'\n"
"	.numRows = Get number of rows\n"
"	\n"
"	for .row to .numRows\n"
"		# Get button values, between lines\n"
"		# ^+/-x means \"add/subtract x to/from value on the previous row\"\n"
"		if .row > 1\n"
"			.prevRow = .row - 1\n"
"			select Table '.table$'\n"
"			.leftXtxt$ = Get value... '.row' LeftX\n"
"			.rightXtxt$ = Get value... '.row' RightX\n"
"			.lowYtxt$ = Get value... '.row' LowY\n"
"			.highYtxt$ = Get value... '.row' HighY\n"
"			if startsWith(.leftXtxt$, \"^\")\n"
"				.prevValuetxt$ = Get value... '.prevRow' LeftX\n"
"				.leftXtxt$ = right$(.leftXtxt$, length(.leftXtxt$) - 1)\n"
"				call r2aConversionOfValue2 '.prevValuetxt$' '.leftXtxt$'\n"
"				select Table '.table$'\n"
"				Set numeric value... '.row' LeftX 'r2aConversionOfValue2.result'\n"
"			elsif startsWith(.rightXtxt$, \"^\")\n"
"				.prevValuetxt$ = Get value... '.prevRow' RightX\n"
"				.rightXtxt$ = right$(.rightXtxt$, length(.rightXtxt$) - 1)\n"
"				call r2aConversionOfValue2 '.prevValuetxt$' '.rightXtxt$'\n"
"				select Table '.table$'\n"
"				Set numeric value... '.row' RightX 'r2aConversionOfValue2.result'\n"
"			endif\n"
"			if startsWith(.lowYtxt$, \"^\")\n"
"				.prevValuetxt$ = Get value... '.prevRow' LowY\n"
"				.lowYtxt$ = right$(.lowYtxt$, length(.lowYtxt$) - 1)\n"
"				call r2aConversionOfValue2 '.prevValuetxt$' '.lowYtxt$'\n"
"				select Table '.table$'\n"
"				Set numeric value... '.row' LowY 'r2aConversionOfValue2.result'\n"
"			elsif startsWith(.highYtxt$, \"^\")\n"
"				.prevValuetxt$ = Get value... '.prevRow' HighY\n"
"				.highYtxt$ = right$(.highYtxt$, length(.highYtxt$) - 1)\n"
"				call r2aConversionOfValue2 '.prevValuetxt$' '.highYtxt$'\n"
"				select Table '.table$'\n"
"				Set numeric value... '.row' HighY 'r2aConversionOfValue2.result'\n"
"			endif\n"
"		endif\n"
"		\n"
"		# Get button values, per line\n"
"		# +/-x means \"add/subtract x to/from value of other edge\"\n"
"		select Table '.table$'\n"
"		.leftXtxt$ = Get value... '.row' LeftX\n"
"		.rightXtxt$ = Get value... '.row' RightX\n"
"		.lowYtxt$ = Get value... '.row' LowY\n"
"		.highYtxt$ = Get value... '.row' HighY\n"
"		if index_regex(.rightXtxt$, \"^[+-]\")\n"
"			call r2aConversionOfValue2 '.leftXtxt$' '.rightXtxt$'\n"
"			select Table '.table$'\n"
"			Set numeric value... '.row' RightX 'r2aConversionOfValue2.result'\n"
"		elsif index_regex(.leftXtxt$, \"^[+-]\")\n"
"			call r2aConversionOfValue2 '.rightXtxt$' '.leftXtxt$'\n"
"			select Table '.table$'\n"
"			Set numeric value... '.row' LeftX 'r2aConversionOfValue2.result'\n"
"		endif\n"
"		if index_regex(.highYtxt$, \"^[+-]\")\n"
"			call r2aConversionOfValue2 '.lowYtxt$' '.highYtxt$'\n"
"			select Table '.table$'\n"
"			Set numeric value... '.row' HighY 'r2aConversionOfValue2.result'\n"
"		elsif index_regex(.lowYtxt$, \"^[+-]\")\n"
"			call r2aConversionOfValue2 '.highYtxt$' '.lowYtxt$'\n"
"			select Table '.table$'\n"
"			Set numeric value... '.row' LowY 'r2aConversionOfValue2.result'\n"
"		endif\n"
"	endfor\n"
"endproc\n"
"\n"
"procedure r2aConversionOfValue2 .value1$ .value2$\n"
"	.result = 0\n"
"	if index_regex(.value2$, \"^[+-]\")\n"
"		.sign$ = replace_regex$(.value2$, \"^([+-]).*$\", \"\\1\", 0)\n"
"		.newValue$ = replace_regex$(.value2$, \"^[+-](.*)$\", \"\\1\", 0)\n"
"		.result = '.value1$' '.sign$' '.newValue$'\n"
"	else\n"
"		.result = '.value2$'\n"
"	endif\n"
"endproc\n"
"\n"
"# Hide and UnHide buttons by manipulating the ! marker in the table\n"
"procedure hide_button .table$ .label$\n"
"	if startsWith(.label$, \"!\")\n"
"		.cleanLabel = length(.label$) - 1\n"
"		.label$ = right$(.label$, .cleanLabel)\n"
"	endif\n"
"	call nowarn_findLabel '.table$' '.label$'\n"
"	if nowarn_findLabel.row > 0\n"
"		select Table '.table$'\n"
"		Set string value... 'nowarn_findLabel.row' Label !'.label$'\n"
"	endif\n"
"endproc\n"
"\n"
"procedure unhide_button .table$ .label$\n"
"	if not startsWith(.label$, \"!\")\n"
"		.label$ = \"!\"+.label$\n"
"	endif\n"
"	call nowarn_findLabel '.table$' '.label$'\n"
"	if nowarn_findLabel.row > 0\n"
"		.cleanLabel = length(.label$) - 1\n"
"		.label$ = right$(.label$, .cleanLabel)\n"
"		select Table '.table$'\n"
"		Set string value... 'nowarn_findLabel.row' Label '.label$'\n"
"	endif\n"
"endproc\n"
"\n"
"procedure hide_all_buttons .table$\n"
"	select Table '.table$'\n"
"	.numRows = Get number of rows\n"
"	for .row to .numRows\n"
"		select Table '.table$'\n"
"		.label$ = Get value: .row, \"Label\"\n"
"		if not startsWith(.label$, \"!\")\n"
"			call hide_button '.table$' '.label$'\n"
"		endif\n"
"	endfor\n"
"endproc\n"
"\n"
"# Search row in table on label\n"
"procedure findKey .table$ .label$\n"
"	.row = 0\n"
"	select Table '.table$'\n"
"	.to$ = selected$(\"Table\")\n"
"	.to$ = \"Table_\"+.to$\n"
"	.numRows = Get number of rows\n"
"	for .i to .numRows\n"
"		.currentKey$ = '.to$'$[.i, \"Key\"]\n"
"		if .label$ = .currentKey$\n"
"			.row = .i\n"
"			goto KEYFOUND\n"
"		endif\n"
"	endfor\n"
"	label KEYFOUND\n"
"	if .row <= 0 and index(.label$, \"_\") <= 0\n"
"		printline \"'.label$'\" is not a key in '.table$'\n"
"	endif\n"
"endproc\n"
"\n"
"procedure findLabel .table$ .label$\n"
"	call nowarn_findLabel '.table$' '.label$'\n"
"	.row = nowarn_findLabel.row\n"
"	if .row <= 0 and index(.label$, \"_\") <= 0\n"
"		call emergency_table_exit \"'.label$'\" is not a key in '.table$'\n"
"	endif\n"
"endproc\n"
"\n"
"procedure nowarn_findLabel .table$ .label$\n"
"	.row = 0\n"
"	select Table '.table$'\n"
"	.to$ = selected$(\"Table\")\n"
"	.to$ = \"Table_\"+.to$\n"
"	.numRows = Get number of rows\n"
"	for .i to .numRows\n"
"		.currentKey$ = '.to$'$[.i, \"Label\"]\n"
"		if .label$ = .currentKey$\n"
"			.row = .i\n"
"			goto LABELFOUND\n"
"		endif\n"
"	endfor\n"
"	label LABELFOUND\n"
"	if .row > .numRows\n"
"		.row = 0\n"
"	endif\n"
"endproc\n"
"\n"
"# Read feedback table and get keyed text\n"
"procedure get_feedback_text .language$ .key$\n"
"	if not endsWith(feedbackTableName$, \"_'.language$'\")\n"
"		if feedbackTableName$ <> \"\"\n"
"			select Table 'feedbackTableName$'\n"
"			Remove\n"
"		endif\n"
"		call loadTable 'feedbackTablePrefix$'_'.language$'\n"
"		feedbackTableName$ = selected$(\"Table\")\n"
"	endif\n"
"	call findKey 'feedbackTableName$' '.key$'\n"
"	.row = findKey.row\n"
"	select Table 'feedbackTableName$'\n"
"	.text$ = Get value... '.row' Text\n"
"	# Expand variables, eg, 'praatVersion$'\n"
"	call expand_praat_variables '.text$'\n"
"	.text$ = expand_praat_variables.text$	\n"
"endproc\n"
"\n"
"# Get the label\n"
"procedure buttonClicked .table$ .x .y\n"
"	.label$ = \"\"\n"
"	select Table '.table$'\n"
"	.bo$ = selected$(\"Table\")\n"
"	.bo$ = \"Table_\"+.bo$\n"
"	.numRows = Get number of rows\n"
"	for .i to .numRows\n"
"		if .label$ = \"\" or startsWith(.label$, \"!\")\n"
"			.leftX = '.bo$'[.i, \"LeftX\"]\n"
"			.rightX = '.bo$'[.i, \"RightX\"]\n"
"			.lowY = '.bo$'[.i, \"LowY\"]\n"
"			.highY = '.bo$'[.i, \"HighY\"]\n"
"			if .x > .leftX and .x < .rightX and .y > .lowY and .y < .highY\n"
"				.label$ = '.bo$'$[.i, \"Label\"]\n"
"				.fractionX = 0.5\n"
"				.fractionY = 0.5\n"
"				if (.rightX - .leftX) > 0\n"
"					.fractionX = (.x - .leftX)/(.rightX - .leftX)\n"
"				endif\n"
"				if (.highY - .lowY) > 0\n"
"					.fractionY = (.y - .lowY)/(.highY - .lowY)\n"
"				endif\n"
"			endif\n"
"		endif\n"
"	endfor\n"
"endproc\n"
"\n"
"procedure keyPressed table$ .pressed$\n"
"	.label$ = \"\"\n"
"	# Magic\n"
"	if .pressed$ = \"\" and not demoShiftKeyPressed()\n"
"		.label$ = \"Refresh\"\n"
"	endif\n"
"	.lowerPressed$ = replace_regex$(.pressed$, \".\", \"\\L&\", 0)\n"
"	.upperPressed$ = replace_regex$(.pressed$, \".\", \"\\U&\", 0)\n"
"	select Table 'table$'\n"
"	.bo$ = selected$(\"Table\")\n"
"	.bo$ = \"Table_\"+.bo$\n"
"	.numRows = Get number of rows\n"
"	for .i to .numRows\n"
"		if .label$ = \"\"\n"
"			.key$ = '.bo$'$[.i, \"Key\"]\n"
"			if index(.key$, .lowerPressed$) or index(.key$, .upperPressed$)\n"
"				.label$ = '.bo$'$[.i, \"Label\"]\n"
"			endif\n"
"		endif\n"
"	endfor\n"
"endproc\n"
"\n"
"procedure play_sound .sound\n"
"    if .sound and not config.muteOutput\n"
"    	select '.sound'\n"
"		if not currentStartTime and not currentEndTime\n"
"    		Play\n"
"		else\n"
"			Extract part... 'selectedStartTime' 'selectedEndTime' rectangular 1.0 false\n"
"			Rename... TmpPart\n"
"			Play\n"
"			Remove\n"
"		endif\n"
"    endif\n"
"endproc\n"
"\n"
"procedure record_sound\n"
"	.currentSpeakerID$ = speakerID$\n"
"	call reset_analysis\n"
"	speakerID$ = .currentSpeakerID$\n"
"	.recordingTaskPrompt = 0\n"
"	.sampleFreq = te.defaultSampleFreq\n"
"	if config.frequency <= 5000\n"
"		.sampleFreq = 11025\n"
"	endif\n"
"	\n"
"	# There is a very nasty delay before the first recording starts, do a dummy record\n"
"	if not variableExists(\"recordingInitialized\")\n"
"		call basic_sound_recording 'te.recordingSampleFrequency' 0.1\n"
"		Remove\n"
"		recordingInitialized = 1\n"
"	endif\n"
"\n"
"    # Show a task window\n"
"	.rectime = 'config.recordingTime$'\n"
"	if speakerID$ = \"\"\n"
"		call get_speakerInfo 1\n"
"		speakerID$ = get_speakerInfo.id$\n"
"	endif\n"
"    if te.recordingTaskTable > 0\n"
"		.recordingTaskPrompt = 1\n"
"		call get_speakerInfo 'speakerID$'\n"
"		if get_speakerInfo.row > 0\n"
"			.recordingTaskPrompt = get_speakerInfo.row\n"
"		endif\n"
"		select te.recordingTaskTable\n"
"		.numRows = Get number of rows\n"
"		.timeColumn = Get column index... time\n"
"		if .timeColumn > 0 and .recordingTaskPrompt <= .numRows\n"
"			.rectime = Get value... '.recordingTaskPrompt' time\n"
"		endif\n"
"		if .rectime = undefined or .rectime <= 0\n"
"			.rectime = 'config.recordingTime$'\n"
"		endif\n"
"		# When doing a recording task, wipe the screen\n"
"		demo Erase all\n"
"    endif\n"
"    \n"
"    # Display prompt if needed (Warning BEFORE the recording light)\n"
"	if .recordingTaskPrompt > 0\n"
"		.originalPopUpcolor$ = popUp.backgroundcolor$\n"
"		popUp.backgroundcolor$ = popUp.warncolor$\n"
"		.origFontColor$ = defaultFontColor$\n"
"		defaultFontColor$ = \"Grey\"\n"
"		call display_prompt 'te.recordingTaskTable' '.recordingTaskPrompt'\n"
"		defaultFontColor$ = .origFontColor$\n"
"		demo 'defaultFontColor$'\n"
"		popUp.backgroundcolor$ = .originalPopUpcolor$\n"
"		# Wait a moment\n"
"		call basic_sound_recording 'te.recordingSampleFrequency' 'te.waitRecordingTask'\n"
"		Remove\n"
"	endif\n"
"\n"
"	# Display a recording light\n"
"	demo Paint circle... Red 'recordingLightX' 'recordingLightY' 2\n"
"	demoShow()\n"
"    \n"
"    # Display prompt if needed (AFTER the recording light)\n"
"	if .recordingTaskPrompt > 0\n"
"		popUp.backgroundcolor$ = popUp.gocolor$\n"
"		call display_prompt 'te.recordingTaskTable' '.recordingTaskPrompt'\n"
"		popUp.backgroundcolor$ = .originalPopUpcolor$\n"
"	endif\n"
"\n"
"    # Record\n"
" 	call basic_sound_recording 'te.recordingSampleFrequency' '.rectime'\n"
"    .recording = basic_sound_recording.sound\n"
"\n"
"	# Keep track of current sound\n"
"	call getTimeStamp\n"
"	te.recordingTimeStamp$ = getTimeStamp.string$\n"
"	te.currentFileName$ = \"\"\n"
"	\n"
"    # Remove prompt if needed (Warning BEFORE the recording light)\n"
"	if .recordingTaskPrompt > 0\n"
"		# When doing a recording task, wipe the screen\n"
"		demo Erase all\n"
"	else\n"
"		# Remove recording light\n"
"		demo Paint circle... White 'recordingLightX' 'recordingLightY'  2.5\n"
"	    call wipeArea 'wipeFeedbackArea$'\n"
"	endif\n"
"\n"
"    # Downsample for speed\n"
"    if .sampleFreq <> te.recordingSampleFrequency\n"
"		.downsampled = Resample... '.sampleFreq' 50\n"
"		select .recording\n"
"		Remove\n"
"		.recording = .downsampled\n"
"		select .recording\n"
"		.downsampled = -1\n"
"    endif\n"
"    \n"
"	call draw_recording_level\n"
"\n"
"	# Process sound\n"
"	select .recording\n"
"    Rename... Speech\n"
"	te.openSound = selected(\"Sound\")\n"
"    recordedSound$ = selected$(\"Sound\")\n"
"    select te.openSound\n"
"	currentStartTime = 0\n"
"	currentEndTime = Get total duration\n"
"	\n"
"	# Cut out real sound from silences/noise (if NO prompt)\n"
"	if te.recordingTaskTable <= 0\n"
"		call sound_detection 'recordedSound$' 'soundMargin'\n"
"	else\n"
"		call remove_margins 'recordedSound$' 'soundMargin'\n"
"	endif\n"
"	select Sound 'recordedSound$'\n"
"	te.openSound = selected(\"Sound\")\n"
"	currentStartTime = 0\n"
"	currentEndTime = Get total duration\n"
"	# Reset selected window\n"
"	selectedStartTime = currentStartTime\n"
"	selectedEndTime = currentEndTime\n"
"	\n"
"	# Logging\n"
"	call log_recording MainPage ReadFromFile 'recordedSound$'\n"
"	\n"
"	# A sound is recorded, wipe file name\n"
"	currentSoundName$ = \"RECORDED SOUND\"\n"
"	\n"
"	if config.autoSelect\n"
"		call argMinASTselection\n"
"	endif\n"
"	\n"
"	select te.openSound\n"
"endproc\n"
"\n"
"# Uses global variables!!!\n"
"procedure basic_sound_recording .samplingFrequency .recordingTime\n"
"	.sound = nocheck noprogress nowarn Record Sound (fixed time)... 'config.input$' 0.99 0.5 '.samplingFrequency' '.recordingTime'\n"
"	if .sound = undefined\n"
"		.sound = Create Sound: \"Pronunciation\", 0, .recordingTime, .samplingFrequency, \"0\"\n"
"	endif\n"
"	\n"
"	# The recorded sound should now be the selected object!!!\n"
"	select .sound\n"
"endproc\n"
"\n"
"procedure setup_recordingTask\n"
"	.skiprecording = 0\n"
"	.noPostfix = 0\n"
"\n"
"	# Initialize TEVA\n"
"	call unload_RecordingTask\n"
"	\n"
"	# Update config.recordingTaskFile$\n"
"	if not fileReadable(config.recordingTaskFile$) and fileReadable(\"'defaultDirectory$'/'config.recordingTaskFile$'\")\n"
"		if config.recordingTarget$ = \"\"\n"
"			.filenameStart = rindex_regex(config.recordingTaskFile$, \"[\\\\/:]+[^\\\\/:]+$\")\n"
"			config.recordingTarget$ = left$(config.recordingTaskFile$, .filenameStart - 1)\n"
"			config.recordingTarget$ = \"'defaultDirectory$'/'config.recordingTarget$'\"\n"
"		endif\n"
"		config.recordingTaskFile$ = \"'defaultDirectory$'/'config.recordingTaskFile$'\"\n"
"	endif\n"
"	\n"
"	# Read a list of prompts from a text file and create a default recording task table\n"
"	if fileReadable(config.recordingTaskFile$) and index_regex(config.recordingTaskFile$, \"\\.(txt|TXT|text)$\") > 0\n"
"		.strings = Read Strings from raw text file: config.recordingTaskFile$\n"
"		.numStrings = Get number of strings\n"
"		.s = 1\n"
"		.text$ = Get string: .s\n"
"		while startsWith(.text$, \"//\")\n"
"			.s += 1\n"
"			.text$ = Get string: .s\n"
"		endwhile\n"
"		te.recordingTaskTable = Create Table with column names... RecordingTaskTable 1 postfix time align font size text\n"
"		Set string value... 1 postfix _p1\n"
"		Set numeric value... 1 time 'config.recordingTime$'\n"
"		Set string value... 1 align centre\n"
"		Set string value... 1 font Helvetica\n"
"		Set numeric value... 1 size 24\n"
"		Set string value... 1 text '.text$'\n"
"		.start = .s + 1\n"
"		.w = 1\n"
"		for .s from .start to .numStrings\n"
"			select .strings\n"
"			.text$ = Get string: .s\n"
"			# Skip empty lines\n"
"			if index_regex(.text$, \"\\S\") and not startsWith(.text$, \"//\")\n"
"				select te.recordingTaskTable\n"
"				Append row\n"
"				.w += 1\n"
"				Set string value... .w postfix _p'.w'\n"
"				Set numeric value... .w time 'config.recordingTime$'\n"
"				Set string value... .w align centre\n"
"				Set string value... .w font Helvetica\n"
"				Set numeric value... .w size 24\n"
"				Set string value... .w text '.text$'\n"
"			endif\n"
"		endfor\n"
"		select .strings\n"
"		Remove\n"
"	# Read a recording task\n"
"	elsif fileReadable(config.recordingTaskFile$)\n"
"		call readTable 'config.recordingTaskFile$'\n"
"		te.recordingTaskTable = readTable.tableID\n"
"		# Do a sanity check\n"
"		if te.recordingTaskTable > 0\n"
"			.fullName$ = selected$ ()\n"
"			.type$ = extractWord$(.fullName$, \"\")\n"
"			if .type$ <> \"Table\"\n"
"				Remove\n"
"				te.recordingTaskTable = -1\n"
"				config.recordingTaskFile$ = \"\"\n"
"				.skiprecording = 1\n"
"			else\n"
"				.textIndex = Get column index: \"text\"\n"
"				if .textIndex <= 0\n"
"					Remove\n"
"					te.recordingTaskTable = -1\n"
"					config.recordingTaskFile$ = \"\"\n"
"					.skiprecording = 1\n"
"				else\n"
"					.textIndex = Get column index: \"postfix\"\n"
"					if .textIndex <= 0\n"
"					.noPostfix = 1\n"
"					endif\n"
"				endif\n"
"				\n"
"			endif\n"
"		endif\n"
"	# Create a recording task from a single line of text\n"
"	elsif startsWith(config.recordingTaskFile$, \"[\") and endsWith(config.recordingTaskFile$, \"]\")\n"
"		.text$ = left$(config.recordingTaskFile$, length(config.recordingTaskFile$) - 1)\n"
"		.text$ = right$(.text$, length(.text$) - 1)\n"
"		te.recordingTaskTable = Create Table with column names... RecordingTaskTable 1 postfix time align font size text\n"
"		.lineEnd = index(.text$, \"<newline>\")\n"
"		.i = 1\n"
"		repeat\n"
"			select te.recordingTaskTable\n"
"			.numRows = Get number of rows\n"
"			if .numRows < .i\n"
"				Append row\n"
"			endif\n"
"			if .lineEnd > 0\n"
"				.currentLine$ = left$(.text$, .lineEnd - 1)\n"
"				.text$ = right$(.text$, length(.text$) - (.lineEnd + 8))\n"
"				.lineEnd = index(.text$, \"<newline>\")\n"
"			else\n"
"				.currentLine$ = .text$\n"
"				.text$ = \"\"\n"
"				.lineEnd = 0\n"
"			endif\n"
"			Set string value... '.i' postfix _rec'.i'\n"
"			Set numeric value... '.i' time 'config.recordingTime$'\n"
"			Set string value... '.i' align centre\n"
"			Set string value... '.i' font Helvetica\n"
"			Set numeric value... '.i' size 24\n"
"			Set string value... '.i' text '.currentLine$'\n"
"			.i += 1\n"
"		until length(.text$) <= 0\n"
"	endif\n"
"	if te.recordingTaskTable > 0		\n"
"		# Switch to serial\n"
"		config.speakerSerial$ = \"Forw\"\n"
"		# Set up new Speaker table\n"
"		call initializeSpeakerData\n"
"		# Set TEVA to store all audio\n"
"		te.saveAudio = 1\n"
"		# Initialize Speaker Data\n"
"		speakerInfo$ = \"\"\n"
"		speakerComments$ = \"\"\n"
"		pathologicalType = 0\n"
"		# Ask for speaker ID\n"
"		.table$ = \"MainPage\"\n"
"		.label$ = \"Record\"\n"
"		call getLanguageTexts '.table$' '.label$'\n"
"		call get_feedback_text 'config.language$' Speaker\n"
"		# Get feedback texts\n"
"		call get_feedback_text 'config.language$' SpeakerID\n"
"		call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"		.inputText$ = convert_praat_to_latin1.text$\n"
"		call get_feedback_text 'config.language$' Cancel\n"
"		call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"		.cancelText$ = convert_praat_to_latin1.text$\n"
"		call get_feedback_text 'config.language$' Continue\n"
"		call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"		.continueText$ = convert_praat_to_latin1.text$\n"
"		clicked = -1\n"
"		beginPause(getLanguageTexts.helpText$)\n"
"			sentence (.inputText$, \"\")\n"
"		clicked = endPause (\"'.cancelText$'\", \"'.continueText$'\", 2, 1)\n"
"		if clicked = 2\n"
"			.inputText$ = replace_regex$(.inputText$, \".+\", \"\\l&\\$\", 0)\n"
"			.inputText$ = replace_regex$(.inputText$, \"[ ]\", \"_\", 0)\n"
"			.inputText$ = replace_regex$(.inputText$, \"\\$\", \"\", 0)\n"
"			speakerID$ = '.inputText$'$\n"
"			te.restartRecordingTask = 0\n"
"		endif\n"
"		# On Windows, clear the screen\n"
"		if windows\n"
"			call init_window\n"
"		endif\n"
"\n"
"		# If a speaker ID has been supplied\n"
"		if speakerID$ <> \"\"\n"
"			# Date and time\n"
"			call i8n_date\n"
"			.datetime$ = i8n_date.printDate$\n"
"			# New speakerDataTable\n"
"			config.speakerData$ = \"\"\n"
"			config.speakerDataTable = Create Table with column names... Speaker_Data 1 ID Text Description StartTime EndTime Audio SaveAudio AST\n"
"			select te.recordingTaskTable\n"
"			.numRows = Get number of rows\n"
"			if .noPostfix\n"
"				.postfix = \"rec1\"\n"
"			else\n"
"				.postfix$ = Get value... 1 postfix\n"
"			endif\n"
"			.prompt$ = Get value... 1 text\n"
"			.filename$ = replace_regex$(speakerID$, \"[^a-zA-Z0-9\\.\\-_]\", \"_\", 0)\n"
"			if .filename$ <> \"\"\n"
"				createDirectory(\"'config.recordingTarget$'/'.filename$'\")\n"
"			endif\n"
"			config.speakerData$ = \"'config.recordingTarget$'/'.filename$'/'.filename$'_'.datetime$'.Table\"\n"
"			select config.speakerDataTable\n"
"			Set string value... 1 ID '.filename$''.postfix$'\n"
"			Set string value... 1 Audio 'config.recordingTarget$'/'.filename$'/'.filename$''.postfix$'_'.datetime$'.wav\n"
"			# Initilaise on first row\n"
"			speakerID$ = \"'.filename$''.postfix$'\"\n"
"			call set_new_speakerdata 'speakerID$'\n"
"			\n"
"			# Fill other rows\n"
"			for .i from 2 to .numRows\n"
"				select te.recordingTaskTable\n"
"				if .noPostfix\n"
"					.postfix = \"rec'.i'\"\n"
"				else\n"
"					.postfix$ = Get value... '.i' postfix\n"
"				endif\n"
"				.prompt$ = Get value... '.i' text\n"
"				select config.speakerDataTable\n"
"				Append row\n"
"				Set string value... '.i' ID '.filename$''.postfix$'\n"
"				Set string value... '.i' Audio 'config.recordingTarget$'/'.filename$'/'.filename$''.postfix$'_'.datetime$'.wav\n"
"			endfor\n"
"		else\n"
"			.skiprecording = 1\n"
"		endif\n"
"	endif	\n"
"	\n"
"endproc\n"
"\n"
"procedure unload_RecordingTask\n"
"    if te.recordingTaskTable > 0		\n"
"		select te.recordingTaskTable\n"
"		Remove\n"
"		te.recordingTaskTable = -1\n"
"		te.restartRecordingTask = 1\n"
"	endif\n"
"	call initializeSpeakerData\n"
"	call reset_analysis\n"
"	call get_speakerInfo 0\n"
"	call get_nextSpeaker 0\n"
"	call get_previousSpeaker 0\n"
"	te.saveAudio = 0\n"
"endproc\n"
"\n"
"procedure display_prompt .table .number\n"
"	.maxWidth = 95\n"
"	if .table > 0\n"
"		select .table\n"
"		.align$ = \"left\"\n"
"		.alignColumn = Get column index... align\n"
"		.numRows = Get number of rows\n"
"		if .number > 0 and .number <= .numRows\n"
"			# Get the values\n"
"			if .alignColumn > 0\n"
"				.align$ = Get value... '.number' align\n"
"			endif\n"
"			.font$ = Get value... '.number' font\n"
"			.fontSize = Get value... '.number' size\n"
"			.font$ = extractWord$(.font$, \"\")\n"
"			.text$ = Get value... '.number' text\n"
"			\n"
"			# Add newlines\n"
"			if index(.text$, \"\\n\") <= 0\n"
"				demo '.font$'\n"
"				call set_font_size '.fontSize'\n"
"	\n"
"				.line$ = \"\"\n"
"				.newtext$ = \" \"\n"
"				while index_regex(.text$, \"\\S\") > 0\n"
"					.word$ = replace_regex$(.text$, \"^([\\S]*[^\\S]*[\\S]*)(.*$)\", \"\\1\", 0)\n"
"					.text$ = replace_regex$(.text$, \"^([\\S]*[^\\S]*[\\S]*)(.*$)\", \"\\2\", 0)\n"
"					.textWidth = demo Text width (wc)... \"'.line$''.word$'\"\n"
"					if .textWidth <= .maxWidth\n"
"						.line$ = .line$ + .word$\n"
"					else\n"
"						.newtext$ = .newtext$ + \"\\n\" + .line$\n"
"						.line$ = .word$\n"
"					endif\n"
"				endwhile\n"
"				if index_regex(.line$, \"\\S\") > 0\n"
"					.text$ = .newtext$ + \"\\n\" + .line$\n"
"				endif\n"
"				demo 'defaultFont$'\n"
"				call set_font_size 'defaultFontSize'\n"
"			endif\n"
"			\n"
"			# Write popup\n"
"			call text2popuptable '.align$' '.font$' '.fontSize' \"'.text$'\"\n"
"			display_prompt.popUpTable = text2popuptable.textTable\n"
"			call write_text_table display_prompt.popUpTable\n"
"			\n"
"		endif\n"
"	endif\n"
"endproc\n"
"\n"
"procedure draw_recording_level\n"
"	if recordedSound$ <> \"\"\n"
"		select te.openSound\n"
"    	demo Paint circle... White 'recordingLightX' 'recordingLightY'  2.5\n"
"		# Feedback on recording level\n"
"		.extremum = Get absolute extremum... 0 0 None\n"
"		.radius = 2 * .extremum\n"
"		.blue = 0\n"
"		.green = 0\n"
"		.red = 0\n"
"		if .extremum >= 0.95\n"
"			.red = 1\n"
"		elsif .extremum >= 0.49\n"
"			.green = 1\n"
"		else\n"
"			.green = .extremum / 0.5\n"
"		endif\n"
"		.color$ = \"{'.red','.green','.blue'}\"\n"
"		demo Colour... '.color$'\n"
"		demo Line width... 1\n"
"		if .radius > 0\n"
"			demo Draw circle... 'recordingLightX' 'recordingLightY'  '.radius'\n"
"		endif\n"
"		# Reset\n"
"    	demoShow()\n"
"		demo Colour... Black\n"
"		demo Line width... 'defaultLineWidth'\n"
"	endif\n"
"endproc\n"
"\n"
"# Select real sound from recording\n"
"procedure remove_margins .sound$ .margin\n"
"	select Sound '.sound$'\n"
"	.origSound = selected(\"Sound\")\n"
"	.soundlength = Get total duration\n"
"	.intensity = Get intensity (dB)\n"
"	.begintime = 0\n"
"	.endtime = .soundlength\n"
"	.internalSilence = 2*.margin\n"
"	\n"
"	# Silence and remove noise, DANGEROUS\n"
"	.textgridSound = To TextGrid (silences)... 'minimumPitch' 0 'noiseThresshold' '.internalSilence' 0.1 silent sounding\n"
"	Rename... Input'.sound$'\n"
"\n"
"	select .textgridSound\n"
"	.numberofIntervals = Get number of intervals... 1\n"
"	if .numberofIntervals > 2 and .intensity > minimumIntensity\n"
"		select .textgridSound\n"
"		# First interval\n"
"		.value$ = Get label of interval... 1 1\n"
"		.intbegin = Get starting point... 1 1\n"
"		.intend = Get end point... 1 1\n"
"		if .value$ = \"silent\" and .intend > .margin\n"
"			.begintime = .intend - .margin\n"
"		endif\n"
"		# Last interval\n"
"		.value$ = Get label of interval... 1 '.numberofIntervals'\n"
"		.intbegin = Get starting point... 1 '.numberofIntervals'\n"
"		.intend = Get end point... 1 '.numberofIntervals'\n"
"		if .value$ = \"silent\" and .intbegin + .margin < .soundlength\n"
"			.endtime = .intbegin + .margin\n"
"		endif\n"
"		\n"
"		# Copy sound\n"
"		select .origSound\n"
"    	.newSound = Extract part... '.begintime' '.endtime' Rectangular 1.0 no\n"
"		Rename... '.sound$'\n"
"		select .origSound\n"
"		Remove\n"
"		select .newSound\n"
"	endif\n"
"	\n"
"endproc\n"
"\n"
"# Uses some global variable\n"
"procedure sound_detection .sound$ .margin\n"
"	select Sound '.sound$'\n"
"	.soundlength = Get total duration\n"
"	.internalSilence = 2*.margin\n"
"	\n"
"	# Silence and remove noise, DANGEROUS\n"
"	To TextGrid (silences)... 'minimumPitch' 0 'noiseThresshold' '.internalSilence' 0.1 silent sounding\n"
"	Rename... Input'.sound$'\n"
"\n"
"	select TextGrid Input'.sound$'\n"
"	.numberofIntervals = Get number of intervals... 1\n"
"	if .numberofIntervals < 2\n"
"		.numberofIntervals = 0\n"
"	endif\n"
"\n"
"	# Remove buzzing and other obnoxious sounds (if switched on)\n"
"	for .i from 1 to .numberofIntervals\n"
"	   select TextGrid Input'.sound$'\n"
"	   .value$ = Get label of interval... 1 '.i'\n"
"	   .begintime = Get starting point... 1 '.i'\n"
"	   .endtime = Get end point... 1 '.i'\n"
"\n"
"		# Remove noise\n"
"		if .value$ = \"silent\"\n"
"			select Sound '.sound$'\n"
"			Set part to zero... '.begintime' '.endtime' at nearest zero crossing\n"
"		endif\n"
"	endfor\n"
"\n"
"	# Select target sound\n"
"	.maximumIntensity = -1\n"
"	.counter = 1\n"
"	for i from 1 to .numberofIntervals\n"
"	   select TextGrid Input'.sound$'\n"
"\n"
"	   .value$ = Get label of interval... 1 'i'\n"
"	   .begintime = Get starting point... 1 'i'\n"
"	   .endtime = Get end point... 1 'i'\n"
"\n"
"	   if .value$ != \"silent\"\n"
"    	   if .begintime > .margin\n"
"        	  .begintime -= .margin\n"
"    	   else\n"
"        	   .begintime = 0\n"
"    	   endif\n"
"    	   if .endtime + .margin < .soundlength\n"
"        	   .endtime += .margin\n"
"    	   else\n"
"        	   .endtime = .soundlength\n"
"    	   endif\n"
"\n"
"    	   select Sound '.sound$'\n"
"    	   Extract part... '.begintime' '.endtime' Rectangular 1.0 no\n"
"    	   Rename... Tmp'.sound$'\n"
"    	   Subtract mean\n"
"    	   .newIntensity = Get intensity (dB)\n"
"    	   if .newIntensity > .maximumIntensity\n"
"        	   if .maximumIntensity > 0\n"
"            	   select Sound New'.sound$'\n"
"            	   Remove\n"
"        	   endif\n"
"        	   select Sound Tmp'.sound$'\n"
"        	   Rename... New'.sound$'\n"
"        	   .maximumIntensity = .newIntensity\n"
"    	   else\n"
"        	   select Sound Tmp'.sound$'\n"
"        	   Remove\n"
"    	   endif\n"
"    	   # \n"
"	   endif\n"
"	endfor\n"
"	if .maximumIntensity > minimumIntensity\n"
"		select Sound '.sound$'\n"
"		Remove\n"
"		select Sound New'.sound$'\n"
"		Rename... '.sound$'\n"
"	elsif .maximumIntensity > -1\n"
"		select Sound New'.sound$'\n"
"		Remove\n"
"	endif\n"
"	select TextGrid Input'.sound$'\n"
"	Remove\n"
"endproc\n"
"\n"
"procedure end_program\n"
"	# Clean up\n"
"	call reset_analysis\n"
"	call write_preferences \"\"\n"
"	demo Erase all\n"
"	select all\n"
"	Remove\n"
"	exit\n"
"endproc\n"
"\n"
"######################################################\n"
"#\n"
"# Configuration Page\n"
"#\n"
"######################################################\n"
"procedure config_page\n"
"    demo Erase all\n"
"    demoWindowTitle(\"'demoAppName$': Change settings\")\n"
"    .label$ = \"\"\n"
"    call Draw_config_page\n"
"    \n"
"    while (.label$ <> \"Return\") and demoWaitForInput() \n"
"		.clickX = -1\n"
"		.clickY = -1\n"
"		.pressed$ = \"\"		\n"
"	    .label$ = \"\"\n"
"	    if demoClicked()\n"
"		    .clickX = demoX()\n"
"		    .clickY = demoY()\n"
"		    call buttonClicked 'te.config$' '.clickX' '.clickY'\n"
"		    .label$ = buttonClicked.label$\n"
"	    elsif demoKeyPressed()\n"
"		    .pressed$ = demoKey$()\n"
"		    call keyPressed 'te.config$' '.pressed$'\n"
"		    .label$ = keyPressed.label$\n"
"	    endif\n"
"\n"
"		# You cannot select a text field\n"
"		if startsWith(.label$, \"$\")\n"
"			.label$ = \"\"\n"
"		endif\n"
"		\n"
"	    # Do things\n"
"	    if .label$ != \"\"\n"
"		    # Handle push button in process_config\n"
"			call Draw_button 'te.config$' '.label$' 1\n"
"		    call process_config '.label$' '.clickX' '.clickY' '.pressed$'\n"
"	    endif\n"
"        \n"
"        if .label$ = \"Return\"\n"
"            goto GOBACK\n"
"        endif\n"
"    endwhile\n"
"\n"
"    # Go back\n"
"    label GOBACK\n"
"    call init_window\n"
"endproc\n"
"\n"
"procedure Draw_config_page\n"
"	demo Erase all\n"
"	# Draw background\n"
"	if config.showBackground\n"
"		call draw_background Background\n"
"	endif\n"
"	# Draw buttons\n"
"    call Draw_all_buttons 'te.config$'\n"
"	call set_window_title 'te.config$'  \n"
"    # Set correct buttons (alert)\n"
"	call setConfigMainPage\n"
"endproc\n"
"\n"
"# Do what is asked\n"
"procedure process_config .label$ .clickX .clickY .pressed$\n"
"	# Log raw commands to replay in file\n"
"	call log_command 'te.config$' '.label$' '.clickX' '.clickY' '.pressed$'\n"
"	\n"
"	if .label$ <> \"\" and not startsWith(.label$,\"!\")\n"
"		.label$ = replace$(.label$, \"_\", \" \", 0)\n"
"		call process'te.config$''.label$' '.clickX' '.clickY' '.pressed$'\n"
"	endif\n"
"endproc\n"
"\n"
"###############################################################\n"
"#\n"
"# Presenting help texts\n"
"#\n"
"###############################################################\n"
"\n"
"# Process Help\n"
"procedure help_loop .table$ .redrawProc$\n"
"	# General Help text\n"
"	call  write_help_title '.table$'\n"
"	\n"
"    .label$ = \"\"\n"
"    call Draw_button '.table$' Help 2\n"
"    \n"
"    .redrawScreen = 0\n"
"    while (.label$ <> \"Help\") and demoWaitForInput() \n"
"	    .label$ = \"\"\n"
"	    if demoClicked()\n"
"		    .clickX = demoX()\n"
"		    .clickY = demoY()\n"
"		    call buttonClicked '.table$' '.clickX' '.clickY'\n"
"		    .label$ = buttonClicked.label$\n"
"	    elsif demoKeyPressed()\n"
"		    .pressed$ = demoKey$()\n"
"		    call keyPressed '.table$' '.pressed$'\n"
"		    .label$ = keyPressed.label$\n"
"	    endif\n"
"\n"
"	    if .label$ != \"\" and .label$ <> \"Help\"\n"
"			# Redraw screen\n"
"			if .redrawScreen\n"
"				demo Erase all\n"
"				call '.redrawProc$'\n"
"			else\n"
"    			.redrawScreen = 1\n"
"			endif\n"
"			call Draw_button '.table$' Help 2\n"
"			call  write_help_title '.table$'\n"
"\n"
"		    # Handle push button in process_config\n"
"		    call write_help_text '.table$' '.label$'\n"
"	    endif\n"
"        \n"
"    endwhile\n"
"	\n"
"	# Reset button\n"
"    call Draw_button '.table$' Help 0\n"
"	demo Erase all\n"
"	call '.redrawProc$'\n"
"endproc\n"
"\n"
"# Write help text\n"
"procedure write_help_text .table$ .label$\n"
"	# Log raw commands to replay in file\n"
"	call log_command Help '.table$' '.label$'\n"
"	\n"
"	call findLabel '.table$' '.label$'\n"
"	.row = findLabel.row\n"
"	select Table '.table$'\n"
"	# Get text\n"
"	if .row <= 0\n"
"		call findLabel '.table$' Help\n"
"		.row = findLabel.row\n"
"		select Table '.table$'\n"
"	endif\n"
"	.helpText$ = Get value... '.row' Helptext\n"
"	.helpKey$ = Get value... '.row' Key\n"
"	.helpKey$ = replace$(.helpKey$, \"\\\", \"\", 0)\n"
"	.helpKey$ = replace$(.helpKey$, \"_\", \"\\_ \", 0)\n"
"	if index_regex(.helpKey$, \"\\S\")\n"
"		.helpText$ = .helpText$+\" (\"+.helpKey$+\")\"\n"
"	endif\n"
"	# Get button values\n"
"    .leftX = Get value... '.row' LeftX\n"
"    .rightX = Get value... '.row' RightX\n"
"    .lowY = Get value... '.row' LowY\n"
"    .highY = Get value... '.row' HighY\n"
"	\n"
"	# PopUp dimensions\n"
"	.currentHelpFontSize = defaultFontSize\n"
"    call set_font_size '.currentHelpFontSize'\n"
"	.helpTextSize = demo Text width (wc)... '.helpText$'\n"
"	.helpTextSize += 4\n"
"	if .leftX > 50\n"
"		.htXleft = 20\n"
"		.htXright = .htXleft + .helpTextSize + 5\n"
"		.xstart = .leftX\n"
"	else\n"
"		.htXright = 80\n"
"		.htXleft = .htXright - .helpTextSize - 5\n"
"		.xstart = .rightX\n"
"	endif\n"
"	if .lowY > 50\n"
"		.htYlow = 40\n"
"		.htYhigh = .htYlow + 7\n"
"		.ystart = .lowY\n"
"		.yend = .htYhigh\n"
"	else\n"
"		.htYhigh = 60\n"
"		.htYlow = .htYhigh - 7\n"
"		.ystart = .highY\n"
"		.yend = .htYlow\n"
"	endif\n"
"\n"
"	# Adapt font size to horizontal dimensions\n"
"	.maxWidth = 90\n"
"	call adjustFontSizeOnWidth '.currentHelpFontSize' '.maxWidth' '.helpText$'\n"
"	.currentHelpFontSize = adjustFontSizeOnWidth.newFontSize\n"
"	if .htXleft < 0 or .htXright > 100\n"
"		.htXleft = 0\n"
"		.htXright = .htXleft + adjustFontSizeOnWidth.textWidth + 5\n"
"	endif\n"
"	call set_font_size '.currentHelpFontSize'\n"
"\n"
"	# Adapt vertical dimensions to font height\n"
"	call points_to_wc '.currentHelpFontSize'\n"
"	.lineHeight = points_to_wc.wc\n"
"	if .lineHeight > .htYhigh - .htYlow - 4\n"
"		.htYhigh = .htYlow + .lineHeight + 4\n"
"	endif\n"
"\n"
"	# Determine arrow endpoints\n"
"	.xend = .htXleft\n"
"	if abs(.htXleft - .xstart) > abs(.htXright - .xstart)\n"
"		.xend = .htXright\n"
"	endif\n"
"	if abs((.htXleft+.htXright)/2 - .xstart) < min(abs(.htXright - .xstart),abs(.htXleft - .xstart))\n"
"		.xend = (.htXleft+.htXright)/2\n"
"	endif\n"
"	\n"
"	.xtext = .htXleft + 2\n"
"	.ytext = .htYlow + 1\n"
"	\n"
"	# Draw pop-up\n"
"	.mm2wc = demo Horizontal mm to wc... 1\n"
"	.lineWidth = 2/.mm2wc\n"
"	.arrowSize = .lineWidth / 3\n"
"	demo Line width... '.lineWidth'\n"
" 	demo Colour... 'popUp.bordercolor$'\n"
"	demo Paint rectangle... 'popUp.backgroundcolor$' '.htXleft' '.htXright' '.htYlow' '.htYhigh'\n"
"	demo Draw rectangle... '.htXleft' '.htXright' '.htYlow' '.htYhigh'\n"
"	demo Line width... '.arrowSize'\n"
"	demo Arrow size... '.arrowSize'\n"
"	demo Draw arrow... '.xstart' '.ystart' '.xend' '.yend'\n"
"	demo Line width... 'defaultLineWidth'\n"
"	demo Arrow size... 1\n"
"	demo 'defaultFontColor$'\n"
"	demo Text... '.xtext' Left '.ytext' Bottom '.helpText$'\n"
"	demoShow()\n"
"	call set_font_size 'defaultFontSize'\n"
"	\n"
"endproc\n"
"\n"
"procedure write_help_title .table$\n"
"	# Set help text title\n"
"	# General Help text\n"
"	call findLabel '.table$' Help\n"
"	.row = findLabel.row\n"
"	select Table '.table$'\n"
"	.helpTitle$ = Get value... '.row' Helptext\n"
"	.helpKey$ = Get value... '.row' Key\n"
"	.helpKey$ = replace$(.helpKey$, \"\\\", \"\", 0)\n"
"	.helpKey$ = replace$(.helpKey$, \"_\", \"\\_ \", 0)\n"
"	.helpTitle$ = .helpTitle$+\" (\"+.helpKey$+\")\"\n"
"	\n"
"	call reset_viewport\n"
"	.helpTitleFontSize = 14\n"
"	# Adapt size of button to length of text\n"
"	.maxWidth = 80\n"
"	call adjustFontSizeOnWidth '.helpTitleFontSize' '.maxWidth' '.helpTitle$'\n"
"	.helpTitleFontSize = adjustFontSizeOnWidth.newFontSize\n"
"	call set_font_size '.helpTitleFontSize'\n"
"	.helpTop = 100\n"
"	\n"
"	demo Select inner viewport... 0 100 0 100\n"
"	demo Axes... 0 100 0 100\n"
"	demo Text... 50 Centre '.helpTop' Top '.helpTitle$'\n"
"    call set_font_size 'defaultFontSize'\n"
"	call reset_viewport\n"
"endproc\n"
"\n"
"###############################################################\n"
"#\n"
"# Miscelaneous procedures\n"
"#\n"
"###############################################################\n"
"procedure printPageToPrinter\n"
"	call print_window\n"
"	demo Print... 'printerName$' 'printerPresets$'\n"
"	call init_window\n"
"endproc\n"
"\n"
"procedure getOpenFile .openDialogue$\n"
"	# Check existence of (first) audiofile\n"
"	.testFile$ = replace_regex$(.openDialogue$, \"\\{([^,]+)[^\\}]*\\}\", \"\\1\", 0)\n"
"	if fileReadable(.testFile$)\n"
"		.filename$ = .openDialogue$\n"
"	elsif index_regex(.openDialogue$, \"[^0-9]\") <= 0\n"
"		.filename$ = .openDialogue$\n"
"	else\n"
"		call convert_praat_to_latin1 '.openDialogue$'\n"
"		.openDialogue$ = convert_praat_to_latin1.text$\n"
"		.filename$ = chooseReadFile$ (.openDialogue$)\n"
"	endif\n"
"	if .filename$ <> \"\" and fileReadable(.filename$) and index_regex(.filename$, \"(?i\\.(txt|tsv|table)$)\")\n"
"		# Reset all internal structures\n"
"		call reset_analysis\n"
"		call initializeSpeakerData\n"
"		call unload_RecordingTask\n"
"		\n"
"		config.speakerData$ = .filename$\n"
"		.dataDir$ = replace_regex$(config.speakerData$, \"(^|[/:\\\\])[^/:\\\\]+$\", \"\", 0)\n"
"		call load_local_preferences '.dataDir$'\n"
"		.filename$ = \"\"\n"
"	endif\n"
"	# Get the file. We insist on the correct extention as we cannot check for \"incorrect\" files in other ways.\n"
"	call readAudio '.filename$'\n"
"	.sndInput = readAudio.audioID\n"
"	if .sndInput > 0\n"
"		# Reset all internal structures\n"
"		call reset_analysis\n"
"		\n"
"		select .sndInput\n"
"		.numChannels = Get number of channels\n"
"		if .numChannels > 1\n"
"			.monoInput= Convert to mono\n"
"			select .sndInput\n"
"			Remove\n"
"			select .monoInput\n"
"		endif\n"
"		call log_command \"# Open File: '.filename$'\"\n"
"		# Keep track of current sound\n"
"		te.currentFileName$ = .filename$\n"
"\n"
"		# Get only the filename\n"
"		.endDirectory = rindex_regex(.filename$, \"[/\\\\:]\")\n"
"		.startName = .endDirectory + 1\n"
"		.nameLength = rindex(.filename$, \".\") - .startName\n"
"		currentSoundName$ = mid$(.filename$, .startName, .nameLength)\n"
"		currentDirectoryName$ = left$(.filename$, .endDirectory)\n"
"		\n"
"		te.openSound = selected(\"Sound\")\n"
"		recordedSound$ = selected$(\"Sound\")\n"
"		\n"
"		# Set up empty speaker data table if none is present\n"
"		if config.speakerDataTable <= 0\n"
"			config.speakerData$ = \"\"\n"
"			config.speakerDataTable = Create Table with column names... Speaker_Data 1 ID Text Description Audio AST StartTime EndTime\n"
"			Set string value... 1 ID 'recordedSound$'\n"
"			Set string value... 1 Audio 'te.currentFileName$'\n"
"		endif\n"
"		\n"
"		# Keep track of current sound\n"
"		select te.openSound\n"
"		te.recordingTimeStamp$ = \"\"\n"
"		currentStartTime = 0\n"
"		currentEndTime = Get total duration\n"
"		# Reset selected window\n"
"		selectedStartTime = currentStartTime\n"
"		selectedEndTime = currentEndTime\n"
"	endif\n"
"endproc\n"
"\n"
"procedure set_new_speakerdata .newSpeakerID$\n"
"	if .newSpeakerID$ = \"\" or .newSpeakerID$ = \"-\"\n"
"		if currentSoundName$ <> \"\"\n"
"			.newSpeakerID$ = currentSoundName$\n"
"		else\n"
"			.newSpeakerID$ = recordedSound$\n"
"		endif\n"
"	endif\n"
"	speakerID$ = .newSpeakerID$\n"
"	call get_speakerInfo 'speakerID$'\n"
"	speakerInfo$ = get_speakerInfo.text$\n"
"	speakerComments$ = get_speakerInfo.description$\n"
"	pathologicalType = 'get_speakerInfo.ast$'\n"
"	te.currentFileName$ = get_speakerInfo.audio$\n"
"	\n"
"	# If this was loaded from a Speaker Data file, set the Select Window\n"
"	if get_speakerInfo.row > 0 and get_speakerInfo.endTime > 0 \n"
"		selectedStartTime = get_speakerInfo.startTime\n"
"		selectedEndTime = get_speakerInfo.endTime\n"
"		call predictASTvalue\n"
"		predictedPathType = predictASTvalue.ast\n"
"	elsif config.autoSelect\n"
"		# If no selection if given, determine it\n"
"		call argMinASTselection\n"
"	endif\n"
"	\n"
"endproc\n"
"\n"
"procedure readFromFile .filename$\n"
"	call readAudio '.filename$'\n"
"	.sndInput = readAudio.audioID\n"
"	if .sndInput > 0\n"
"		currentStartTime = 0\n"
"		currentEndTime = Get total duration\n"
"		Rename... Speech\n"
"		recordedSound$ = selected$(\"Sound\")	\n"
"		call post_processing_sound\n"
"	endif\n"
"endproc\n"
"\n"
"procedure runCommandFile .filename$\n"
"	runningCommandMode = 1\n"
"	\n"
"	if fileReadable(.filename$)\n"
"		.commandFile = Read Strings from raw text file... '.filename$'\n"
"		.numStrings = Get number of strings\n"
"		for .i to .numStrings\n"
"			select .commandFile\n"
"			.line$ = Get string... '.i'\n"
"			if index_regex(.line$, \"\\S\") > 0 and index_regex(.line$, \"^\\s*#\") <= 0\n"
"				if index_regex(.line$, \"^\\s*Help\") > 0		\n"
"					.helpText$ = replace_regex$(.line$, \"^\\s*Help\\s+\", \"\", 0)\n"
"\n"
"		    		call write_help_text '.helpText$'\n"
"					# Wait for click\n"
"					if 	te.skipNextStep = 1\n"
"						te.skipNextStep = 0\n"
"					else\n"
"						demoWaitForInput()\n"
"					endif\n"
"					\n"
"					if index_regex(.helpText$, \"^Config\")\n"
"    					call Draw_config_page\n"
"					elsif index_regex(.helpText$, \"^MainPage\")\n"
"						call init_window\n"
"					endif\n"
"				else\n"
"					.table$ = replace_regex$(.line$, \"^\\s*([^\\s]+)\\s+(.*)$\", \"\\1\", 0)\n"
"					.command$ = replace_regex$(.line$, \"^\\s*([^\\s]+)\\s+([^\\s]+)\\s+(.*)$\", \"\\2\", 0)\n"
"					.command$ = replace_regex$(.command$, \"_\", \" \", 0)\n"
"					.remainder$ = replace_regex$(.line$, \"^\\s*([^\\s]+)\\s+([^\\s]+)\\s+(.*)$\", \"\\3\", 0)\n"
"					call process'.table$''.command$' '.remainder$'\n"
"					# Handle page switches and pausing after command, but not for Return and Help\n"
"					# Switch page\n"
"					if .command$ = \"Return\"\n"
"						if .table$ = \"Config\"\n"
"							call init_window\n"
"						elsif .table$ = \"MainPage\"\n"
"							call Draw_config_page\n"
"						endif\n"
"					elsif .command$ = \"Help\" or te.skipNextStep = 1\n"
"						# Skip\n"
"						te.skipNextStep = 0\n"
"					else\n"
"						# Wait for click\n"
"						demoWaitForInput()\n"
"					endif\n"
"				endif\n"
"			endif\n"
"		endfor\n"
"		select .commandFile\n"
"		Remove\n"
"		\n"
"	endif\n"
"	runningCommandMode = 0\n"
"endproc\n"
"\n"
"procedure load_local_preferences .dataDir$\n"
"	.dataDir$ = replace_regex$(.dataDir$, \"[/:\\\\]$\", \"\", 0)\n"
"	# Reset default directory\n"
"	defaultDirectory$ = .dataDir$\n"
"	\n"
"	# Default preferences file\n"
"	.localPrefs$ = \"'.dataDir$'/'demoAppName$'preferences.tsv\"\n"
"	\n"
"	# Look for a suitable preferences file in the current or parent directory\n"
"	if fileReadable(\"'.dataDir$'/'demoAppName$'preferences.tsv\")\n"
"		.localPrefs$ = \"'.dataDir$'/'demoAppName$'preferences.tsv\"\n"
"	elsif fileReadable(\"'.dataDir$'/.tevarc\")\n"
"		.localPrefs$ = \"'.dataDir$'/.tevarc\"\n"
"	elsif fileReadable(\"'.dataDir$'/../'demoAppName$'preferences.tsv\")\n"
"		.localPrefs$ = \"'.dataDir$'/../'demoAppName$'preferences.tsv\"\n"
"	elsif fileReadable(\"'.dataDir$'/../.tevarc\")\n"
"		.localPrefs$ = \"'.dataDir$'/../.tevarc\"\n"
"	endif\n"
"\n"
"	if fileReadable(.localPrefs$)\n"
"		call write_preferences \"\"\n"
"		call read_preferences '.localPrefs$'\n"
"		call switch_speaker_next_button 'config.speakerSerial$'\n"
"	endif\n"
"endproc\n"
"\n"
"procedure points_to_wc .points\n"
"	.mm = .points * 0.3527777778\n"
"	.wc = demo Vertical mm to wc... '.mm'\n"
"endproc\n"
"\n"
"procedure reset_viewport\n"
"	.low = viewportMargin\n"
"	.high = 100 - viewportMargin\n"
"	demo Select inner viewport... '.low' '.high' '.low' '.high'\n"
"	demo Axes... 0 100 0 100\n"
"endproc\n"
"\n"
"procedure set_font_size .fontSize\n"
"	call reset_viewport\n"
"	demo Font size... '.fontSize'\n"
"	call reset_viewport\n"
"endproc\n"
"\n"
"procedure wipeArea .areaCommand$\n"
"	call reset_viewport\n"
"	'.areaCommand$'\n"
"endproc\n"
"\n"
"procedure adjustFontSizeOnWidth .currentFontSize .maxWidth .text$\n"
"	demo 'defaultFont$'\n"
"	call set_font_size '.currentFontSize'\n"
"	.textWidth = demo Text width (wc)... '.text$'\n"
"	while .textWidth > .maxWidth and .currentFontSize > 2\n"
"		.currentFontSize -= 0.5\n"
"		call set_font_size '.currentFontSize'\n"
"		.textWidth = demo Text width (wc)... '.text$'\n"
"	endwhile\n"
"	.diff = .textWidth - .maxWidth\n"
"	.newFontSize = .currentFontSize	\n"
"endproc\n"
"\n"
"procedure adjustRotatedFontSizeOnBox .currentFontSize .maxWidth .maxHeight .rotation .text$\n"
"	demo 'defaultFont$'\n"
"	.radians = .rotation/360 * 2 * pi\n"
"	.horWC = demo Horizontal mm to wc... 10.0\n"
"	.verWC = demo Vertical mm to wc... 10.0\n"
"	if .horWC > 0\n"
"		.verCoeff = .verWC / .horWC\n"
"	else\n"
"		.verCoeff = 1\n"
"	endif\n"
"	call set_font_size '.currentFontSize'\n"
"	.textLength = demo Text width (wc)... '.text$'\n"
"	while (.textLength * .verCoeff * sin(.radians) > .maxHeight or .textLength * cos(.radians) > .maxWidth) and .currentFontSize > 2\n"
"		.currentFontSize -= 0.5\n"
"		call set_font_size '.currentFontSize'\n"
"		.textLength = demo Text width (wc)... '.text$'\n"
"	endwhile\n"
"	.diff = .textLength - .maxHeight\n"
"	.newFontSize = .currentFontSize	\n"
"endproc\n"
"\n"
"procedure adjustFontSizeOnHeight .currentFontSize .maxHeight\n"
"	call points_to_wc '.currentFontSize'\n"
"	.lineHeight = points_to_wc.wc\n"
"	while .lineHeight > .maxHeight and .currentFontSize > 2\n"
"		.currentFontSize -= 0.5\n"
"		call points_to_wc '.currentFontSize'\n"
"		.lineHeight = points_to_wc.wc\n"
"	endwhile\n"
"	.diff = .lineHeight - .maxHeight\n"
"	.newFontSize = .currentFontSize\n"
"endproc\n"
"\n"
"# Load a table with button info etc.\n"
"# Load local tables if present. Else load\n"
"# build-in scripted tables\n"
"procedure loadTable .tableName$\n"
"	.table = -1\n"
"	.tableFileName$ = .tableName$\n"
"	if .tableName$ = \"MainPage\"\n"
"		.tableFileName$ = buttonsFileName$\n"
"	endif\n"
"	# Search for the table in local, preference, and global directories\n"
"	if localTableDir$ <> \"\" and fileReadable(\"'localTableDir$'/'.tableFileName$'.Table\")\n"
"    	.table = nocheck Read from file... 'localTableDir$'/'.tableFileName$'.Table\n"
"    	Rename: .tableName$\n"
"	elsif fileReadable(\"'preferencesTableDir$'/'.tableFileName$'.Table\")\n"
"    	.table = nocheck Read from file... 'preferencesTableDir$'/'.tableFileName$'.Table\n"
"    	Rename: .tableName$\n"
"	elsif fileReadable(\"'globaltablelists$'/'.tableFileName$'.Table\")\n"
"    	.table = nocheck Read from file... 'globaltablelists$'/'.tableFileName$'.Table\n"
"    	Rename: .tableName$\n"
"	elsif variableExists(.tableName$)\n"
"		.tableID = '.tableName$'\n"
"		select .tableID\n"
"		.table = .tableID\n"
"	# Load them from script\n"
"	elsif variableExists(\"procCreate'.tableFileName$'$\")\n"
"		call Create'.tableFileName$'\n"
"    	Rename: .tableName$\n"
"		.table = selected(\"Table\")\n"
"	else\n"
"		call emergency_table_exit '.tableFileName$' cannot be found\n"
"	endif\n"
"	\n"
"	# Check whether this is a real table\n"
"	selectObject: .table\n"
"	.fullName$ = selected$ ()\n"
"	.type$ = extractWord$(.fullName$, \"\")\n"
"	if .type$ <> \"Table\"\n"
"		Remove\n"
"		.table = -1\n"
"	endif\n"
"\n"
"	if .table <= 0\n"
"		call emergency_table_exit '.tableFileName$' corrupted or cannot be found\n"
"	endif\n"
"endproc\n"
"\n"
"procedure checkTable .tableName$\n"
"	.available = 0\n"
"	if localTableDir$ <> \"\" and fileReadable(\"'localTableDir$'/'.tableName$'.Table\")\n"
"    	.available = 1\n"
"	elsif fileReadable(\"'preferencesTableDir$'/'.tableName$'.Table\")\n"
"    	.available = 1\n"
"	elsif fileReadable(\"'globaltablelists$'/'.tableName$'.Table\")\n"
"    	.available = 1\n"
"	# Load them from script\n"
"	elsif variableExists(\"procCreate'.tableName$'$\")\n"
"    	.available = 1\n"
"	else\n"
"    	.available = 0\n"
"    endif\n"
"endproc\n"
"\n"
"\n"
"procedure check_and_load_language .tableName$ .language$\n"
"	.tableFileName$ = .tableName$\n"
"	# Handle alternative Main Page layouts\n"
"	if .tableName$ = \"MainPage\"\n"
"		call checkTable 'buttonsFileName$'_'.language$'\n"
"		if checkTable.available\n"
"			.tableFileName$ = buttonsFileName$\n"
"		endif\n"
"	endif\n"
"	\n"
"	call checkTable '.tableFileName$'_'.language$'\n"
"	.table = -1\n"
"	if checkTable.available\n"
"		call loadTable '.tableFileName$'_'.language$'\n"
"	else\n"
"		call loadTable '.tableFileName$'_'te.defaultLanguage$'\n"
"	endif\n"
"	.table = loadTable.table\n"
"endproc\n"
"\n"
"# Create a pop-up window with text from a Text Table\n"
"procedure write_text_table .table$\n"
"	.xleft = 5\n"
" 	.xright = 95\n"
"  	.ylow = 20\n"
"   	.yhigh = 85\n"
"	.lineHeight = 2.5\n"
"	.align$ = \"Left\"\n"
"	.tabString$ = \"mmmmmm\"\n"
"\n"
"	# Get table with text and longest line\n"
"	call loadTable '.table$'\n"
"	.instructionText = selected()\n"
"	.numLines = Get number of rows\n"
"	.instructionFontSize = 14\n"
"	.referenceText$ = \"\"\n"
"	.maxlength = 0\n"
"	.maxLine = 0\n"
"	.maxFontSize = 0\n"
"	.maxWidth = 0\n"
"	.maxHeight = .lineHeight\n"
"	.currentHeight = .lineHeight\n"
"	.currentColor$= defaultFontColor$\n"
"	for .l to .numLines\n"
"		select '.instructionText'\n"
"		.currentText$ = Get value... '.l' text\n"
"		# Expand variables, eg, 'praatVersion$'\n"
"		call expand_praat_variables '.currentText$'\n"
"		.currentText$ = expand_praat_variables.text$\n"
"\n"
"		.font$ = Get value... '.l' font\n"
"		.fontSize = Get value... '.l' size\n"
"		# Get optional font color\n"
"		.currentColor$ = defaultFontColor$\n"
"		.colorColumn = Get column index... color\n"
"		if .colorColumn > 0\n"
"			.currentColor$ = Get value... '.l' color\n"
"			if index_regex(.currentColor$, \"[^ \\-\\?]\") <= 0\n"
"				.currentColor$ = defaultFontColor$\n"
"			endif\n"
"		endif\n"
"		# Get optional line height\n"
"		.heightColumn = Get column index... height\n"
"		if .heightColumn > 0\n"
"			.currentHeight = Get value... '.l' height\n"
"		endif\n"
"		call set_font_size '.fontSize'\n"
"		.textWidth = demo Text width (wc)... '.currentText$'\n"
"		if .fontSize > .maxFontSize\n"
"			.maxFontSize = .fontSize\n"
"		endif\n"
"		if .textWidth > .maxWidth\n"
"			.maxWidth = .textWidth\n"
"			.instructionFontSize = .fontSize\n"
"			.maxLine = .l\n"
"		endif\n"
"		if .currentHeight > .maxHeight\n"
"			.maxHeight = .currentHeight\n"
"		endif\n"
"	endfor\n"
"	select '.instructionText'\n"
"	.referenceText$ = Get value... '.maxLine' text\n"
"	# Handle tabs\n"
"	.testTabString$ = left$(.tabString$, ceiling(length(.tabString$)/2))\n"
"	.referenceText$ = replace$(.referenceText$, \"<tab>\", .testTabString$, 0)\n"
"	\n"
"	.maxLineFont$ = Get value... '.maxLine' font\n"
"	.instructionFontSize = Get value... '.maxLine' size\n"
"	.lineHeight = .maxHeight\n"
"	call set_font_size '.maxFontSize'\n"
"	\n"
"	# Adapt size of button to length of text\n"
"	.maxWidth = (.xright - .xleft) - 4\n"
"	.origFontSize = .instructionFontSize\n"
"	call adjustFontSizeOnWidth '.instructionFontSize' '.maxWidth' '.referenceText$'\n"
"	call adjustFontSizeOnHeight '.maxFontSize' '.lineHeight'\n"
"	.instructionFontSize = min(adjustFontSizeOnWidth.newFontSize, adjustFontSizeOnHeight.newFontSize)\n"
"	if adjustFontSizeOnWidth.diff > 0\n"
"		.xright += adjustFontSizeOnWidth.diff/4\n"
"		.xleft -= 3*adjustFontSizeOnWidth.diff/4\n"
"	endif\n"
"	call set_font_size '.instructionFontSize'\n"
"	.fontSizeFactor = .instructionFontSize / .origFontSize\n"
"	\n"
"	.tabSize = demo Text width (wc)... '.tabString$'\n"
"	\n"
"	# Adjust width to size of text\n"
"	.textWidth = demo Text width (wc)... '.referenceText$' + 4\n"
"	.xmid = (.xright + .xleft) / 2\n"
"	.xleft = .xmid - .textWidth / 2\n"
"	.xright = .xmid + .textWidth / 2\n"
"\n"
"	.numRows = Get number of rows\n"
"	# Calculate length from number of lines.\n"
" 	.dy = .lineHeight\n"
"	.midY = .yhigh - (.yhigh - .ylow)/2\n"
"	.yhigh = .midY + (.numRows+1) * .dy / 2\n"
"	.ylow = .yhigh - (.numRows+1) * .dy\n"
"	.textleft = .xleft + 2\n"
"	.textXAnchor = .textleft\n"
"	\n"
"	demo Line width... 8\n"
" 	demo Colour... 'popUp.bordercolor$'\n"
"	demo Paint rectangle... 'popUp.backgroundcolor$' '.xleft' '.xright' '.ylow' '.yhigh'\n"
"	demo Draw rectangle... '.xleft' '.xright' '.ylow' '.yhigh'\n"
"	demo Line width... 'defaultLineWidth'\n"
"	demo '.currentColor$'\n"
" 	.ytext = .yhigh - 2 - .dy\n"
"	for .i to .numRows\n"
"		select '.instructionText'\n"
"		.font$ = Get value... '.i' font\n"
"		.fontSize = Get value... '.i' size\n"
"		.font$ = extractWord$(.font$, \"\")\n"
"		.currentHeight = .lineHeight\n"
"		if .heightColumn > 0\n"
"			.currentHeight = Get value... '.i' height\n"
"		endif\n"
"		.align$ = \"Left\"\n"
"		.alignColumn = Get column index... align\n"
"		if .alignColumn > 0\n"
"			.align$ = Get value... '.i' align\n"
"		endif\n"
"		if index_regex(.align$, \"(?icentre)\")\n"
"			.textXAnchor = .xmid\n"
"		elsif index_regex(.align$, \"(?iright)\")\n"
"			.textXAnchor = .xright - 2\n"
"		else\n"
"			.textXAnchor = .textleft\n"
"		endif\n"
"		# Scale font\n"
"		.fontSize = floor(.fontSize*.fontSizeFactor)\n"
"		if .fontSize < 4\n"
"			.fontSize = 4\n"
"		endif\n"
"		.line$ = Get value... '.i' text\n"
"		# Expand variables, eg, 'praatVersion$'\n"
"		call expand_praat_variables \"'.line$'\"\n"
"		.line$ = expand_praat_variables.text$\n"
"\n"
"		# Display text\n"
"		if index(.line$, \"<tab>\") <= 0\n"
"			demo Text special... '.textXAnchor' '.align$' '.ytext' Bottom '.font$' '.fontSize' 0 '.line$'\n"
"		else\n"
"			if index_regex(.align$, \"(?icentre)\")\n"
"				.leftAnchor = .textleft\n"
"				.currentAnchor = .leftAnchor\n"
"				while index_regex(.line$, \"\\S\")\n"
"					if index(.line$, \"<tab>\")\n"
"						.tabline$ = left$(.line$, index(.line$, \"<tab>\") - 1)\n"
"						.line$ = right$(.line$, length(.line$) - index(.line$, \"<tab>\") - 4)\n"
"					else\n"
"						.tabline$ = .line$\n"
"						.line$ = \"\"\n"
"					endif\n"
"					.textWidth = demo Text width (wc)... '.tabline$'\n"
"					.centerAnchor = .tabSize * ceiling((.currentAnchor + .textWidth/2)/.tabSize)\n"
"					demo Text special... '.centerAnchor' '.align$' '.ytext' Bottom '.font$' '.fontSize' 0 '.tabline$'\n"
"					.currentAnchor += .textWidth\n"
"					.currentAnchor = .leftAnchor + .tabSize * ceiling((.currentAnchor - .leftAnchor)/.tabSize)\n"
"					# Prevent overlap\n"
"					if .currentAnchor < .centerAnchor + .textWidth/2\n"
"						.currentAnchor = .centerAnchor + .textWidth/2\n"
"					endif\n"
"				endwhile\n"
"			elsif index_regex(.align$, \"(?iright)\")\n"
"				.currentAnchor = .textXAnchor\n"
"				while index_regex(.line$, \"\\S\")\n"
"					if rindex(.line$, \"<tab>\")\n"
"						.tabline$ = right$(.line$, length(.line$) - rindex(.line$, \"<tab>\") - 4)\n"
"						.line$ = left$(.line$, rindex(.line$, \"<tab>\") - 1)\n"
"					else\n"
"						.tabline$ = .line$\n"
"						.line$ = \"\"\n"
"					endif\n"
"					.textWidth = demo Text width (wc)... '.tabline$'\n"
"					demo Text special... '.currentAnchor' '.align$' '.ytext' Bottom '.font$' '.fontSize' 0 '.tabline$'\n"
"					.currentAnchor -= .textWidth\n"
"					.currentAnchor = .textXAnchor - .tabSize * ceiling((.textXAnchor - .currentAnchor)/.tabSize)\n"
"				endwhile\n"
"			else\n"
"				.currentAnchor = .textXAnchor\n"
"				while index_regex(.line$, \"\\S\")\n"
"					if index(.line$, \"<tab>\")\n"
"						.tabline$ = left$(.line$, index(.line$, \"<tab>\") - 1)\n"
"						.line$ = right$(.line$, length(.line$) - index(.line$, \"<tab>\") - 4)\n"
"					else\n"
"						.tabline$ = .line$\n"
"						.line$ = \"\"\n"
"					endif\n"
"					.textWidth = demo Text width (wc)... '.tabline$'\n"
"					demo Text special... '.currentAnchor' '.align$' '.ytext' Bottom '.font$' '.fontSize' 0 '.tabline$'\n"
"					.currentAnchor += .textWidth\n"
"					.currentAnchor = .textXAnchor + .tabSize * ceiling((.currentAnchor - .textXAnchor)/.tabSize)\n"
"				endwhile\n"
"			endif\n"
"		endif\n"
"		.ytext -= .currentHeight\n"
"	endfor	\n"
"	demoShow()	\n"
"	call set_font_size 'defaultFontSize'\n"
"	demo 'defaultFontColor$'\n"
"	\n"
"	select '.instructionText'\n"
"	Remove\n"
"endproc\n"
"\n"
"# Create a pop-up window with a given text\n"
"procedure write_text_popup .font$ .size .text$\n"
"	.xleft = 10\n"
" 	.xright = 90\n"
"  	.ylow = 20\n"
"   	.yhigh = 85\n"
"	.lineHeight = 3\n"
"\n"
"	# Adapt size of button to length of text\n"
"	.maxWidth = (.xright - .xleft) - 4\n"
"	call adjustFontSizeOnWidth '.size' '.maxWidth' '.text$'\n"
"	call adjustFontSizeOnHeight '.size' '.lineHeight'\n"
"	.popupFontSize = min(adjustFontSizeOnWidth.newFontSize, adjustFontSizeOnHeight.newFontSize)\n"
"	if adjustFontSizeOnWidth.diff > 0\n"
"		.xright += adjustFontSizeOnWidth.diff/4\n"
"		.xleft -= 3*adjustFontSizeOnWidth.diff/4\n"
"	else\n"
"		.xleft = ((.xright + .xleft) - adjustFontSizeOnWidth.textWidth)/2 - 2\n"
"		.xright = ((.xright + .xleft) + adjustFontSizeOnWidth.textWidth)/2 + 2\n"
"	endif\n"
"\n"
"	.numRows = 1\n"
"	# Calculate length from number of lines.\n"
" 	.dy = .lineHeight\n"
"	.midY = .yhigh - (.yhigh - .ylow)/2\n"
"	.yhigh = .midY + (.numRows+1) * .dy / 2\n"
"	.ylow = .yhigh - (.numRows+1) * .dy\n"
"	.textleft = .xleft + 2\n"
"	.xmid = (.textleft + .xright - 2)/2\n"
"	\n"
"	demo Line width... 8\n"
" 	demo Colour... 'popUp.bordercolor$'\n"
"	demo Paint rectangle... 'popUp.backgroundcolor$' '.xleft' '.xright' '.ylow' '.yhigh'\n"
"	demo Draw rectangle... '.xleft' '.xright' '.ylow' '.yhigh'\n"
"	demo Line width... 'defaultLineWidth'\n"
"	demo 'defaultFontColor$'\n"
" 	.ytext = .yhigh - 2 - .dy\n"
"	# Write text\n"
"	demo Text special... '.xmid' Centre '.ytext' Bottom '.font$' '.popupFontSize' 0 '.text$'\n"
"\n"
"	demoShow()	\n"
"	demo 'defaultFont$'\n"
"	call set_font_size 'defaultFontSize'\n"
"endproc\n"
"\n"
"procedure text2popuptable .align$ .font$ .size .popUpText$\n"
"	if variableExists(.popUpText$)\n"
"		.popUpText$ = \"'.popUpText$'\"\n"
"	endif\n"
"	if .popUpText$ <> \"\"\n"
"		if startsWith(.popUpText$, \"\"\"\")\n"
"			.popUpText$ = right$(.popUpText$, length(.popUpText$) - 1)\n"
"			.popUpText$ = left$(.popUpText$, length(.popUpText$) - 1)\n"
"		endif\n"
"		call points_to_wc '.size'\n"
"		.height = points_to_wc.wc\n"
"		if index_regex(.popUpText$, \"\\S\") <= 0\n"
"			.popUpText$ = \"-\"\n"
"		endif\n"
"		.textTable = Create Table with column names... Text 1 align font size height text\n"
"		# Set values\n"
"		Set string value... 1 align '.align$'\n"
"		Set string value... 1 font '.font$'\n"
"		Set numeric value... 1 size '.size'\n"
"		Set numeric value... 1 height '.height'\n"
"		Set string value... 1 text \n"
"		\n"
"		while length(.popUpText$) > 0\n"
"			select .textTable\n"
"			Insert row... 1\n"
"			.endOfLine = rindex_regex(.popUpText$, \"\\\\n\")\n"
"			.leftPart = .endOfLine - 1\n"
"			.rightPart = length(.popUpText$) - .endOfLine\n"
"			if .endOfLine > 0\n"
"				.rightPart -= 1\n"
"			endif\n"
"			.currentLine$ = right$(.popUpText$, .rightPart)\n"
"			if startsWith(.currentLine$, \" \")\n"
"				.currentLine$ = \"\\\\ \" + .currentLine$\n"
"			endif\n"
"			.popUpText$ = left$(.popUpText$, .leftPart)\n"
"\n"
"			# Set values\n"
"			Set string value... 1 align '.align$'\n"
"			Set string value... 1 font '.font$'\n"
"			Set numeric value... 1 size '.size'\n"
"			Set numeric value... 1 height '.height'\n"
"			Set string value... 1 text '.currentLine$'\n"
"		endwhile\n"
"		select .textTable\n"
"		.numRows = Get number of rows\n"
"		if .numRows > 1\n"
"			Remove row... '.numRows'\n"
"		endif\n"
"	endif\n"
"endproc\n"
"\n"
"# Write the background from a Text Table\n"
"# The background table can contain embeded commands that are evaluated at runtime: \n"
"# BE CAREFUL WITH THE SECURITY OF THE BACKGROUND TABLE\n"
"procedure draw_background .table$\n"
"	.xleft = 0\n"
" 	.xright = 100\n"
"  	.ylow = 0\n"
"   	.yhigh = 100\n"
"	.lineHeight = 5\n"
"	.defaultColour$ = \"{0.9,0.9,0.9}\"\n"
"	.defaultAlign$ = \"centre\"\n"
"\n"
"	# Get table with text and longest line\n"
"	call loadTable '.table$'\n"
"	.backgroundText = selected()\n"
"	.numLines = Get number of rows\n"
"	.backgroundFontSize = 28\n"
"	.referenceText$ = \"\"\n"
"	.maxlength = 0\n"
"	.maxLine = 0\n"
"	.maxFontSize = 0\n"
"	.maxWidth = 0\n"
"	.textLines = 0\n"
"	for .l to .numLines\n"
"		select '.backgroundText'\n"
"		.currentText$ = Get value... '.l' text\n"
"		# Expand variables, eg, 'praatVersion$'\n"
"		call expand_praat_variables '.currentText$'\n"
"		.currentText$ = expand_praat_variables.text$\n"
"		\n"
"		.font$ = Get value... '.l' font\n"
"		.fontSize = Get value... '.l' size\n"
"		if .fontSize > .maxFontSize\n"
"			.maxFontSize = .fontSize\n"
"		endif\n"
"		if not startsWith(.font$, \"!\")\n"
"			call set_font_size '.fontSize'\n"
"			.textWidth = demo Text width (wc)... '.currentText$'\n"
"			if .textWidth > .maxWidth\n"
"				.maxWidth = .textWidth\n"
"				.backgroundFontSize = .fontSize\n"
"				.maxLine = .l\n"
"			endif\n"
"\n"
"			.textLines += 1\n"
"		endif\n"
"	endfor\n"
"	if .maxLine > 0\n"
"		select '.backgroundText'\n"
"		.referenceText$ = Get value... '.maxLine' text\n"
"		.maxLineFont$ = Get value... '.maxLine' font\n"
"		.backgroundFontSize = Get value... '.maxLine' size\n"
"		.backgroundFontColour$ = Get value... '.maxLine' colour\n"
"		call set_font_size '.maxFontSize'\n"
"	else\n"
"		.maxFontSize = .backgroundFontSize\n"
"	endif\n"
"	\n"
"	# Adapt size of button to length of text\n"
"	.maxWidth = (.xright - .xleft) - 4\n"
"	.origFontSize = .backgroundFontSize\n"
"	call adjustFontSizeOnWidth '.backgroundFontSize' '.maxWidth' '.referenceText$'\n"
"	.fontSizeFactor = adjustFontSizeOnWidth.newFontSize / .backgroundFontSize\n"
"	.backgroundFontSize = adjustFontSizeOnWidth.newFontSize\n"
"	call set_font_size '.backgroundFontSize'\n"
"	\n"
"	call adjustFontSizeOnHeight '.backgroundFontSize' '.lineHeight'\n"
"	.lineHeight /= adjustFontSizeOnHeight.newFontSize / .backgroundFontSize\n"
"	if adjustFontSizeOnHeight.newFontSize >= .origFontSize and (.textLines+1) * .lineHeight > (.yhigh - .ylow - 4)\n"
"		.lineHeight = (.yhigh - .ylow - 4)/(.textLines + 1)\n"
"		call adjustFontSizeOnHeight '.maxFontSize' '.lineHeight'\n"
"		.fontSizeFactor = adjustFontSizeOnHeight.newFontSize / .backgroundFontSize\n"
"	endif\n"
"\n"
"	.numRows = Get number of rows\n"
"	# Calculate length from number of lines.\n"
" 	.dy = .lineHeight\n"
"	.midY = .yhigh - (.yhigh - .ylow)/2\n"
"	.yhigh = .midY + (.textLines+1) * .dy / 2\n"
"	.ylow = .yhigh - (.textLines+1) * .dy\n"
"	.textleft = .xleft + 2\n"
"	.textright = .xright - 2\n"
"	.textmid = (.xright - .xleft)/2\n"
"	\n"
"	demo 'defaultFontColor$'\n"
" 	.ytext = .yhigh - 2 - .dy\n"
"	for .i to .numRows\n"
"		select '.backgroundText'\n"
"		.font$ = Get value... '.i' font\n"
"		.fontSize = Get value... '.i' size\n"
"		.fontColour$ = Get value... '.i' colour\n"
"		.fontColour$ = replace_regex$(.fontColour$, \"^[\\- ]$\", \".defaultColour$\", 1)\n"
"		.fontAlign$ = Get value... '.i' align\n"
"		.fontAlign$ = replace_regex$(.fontAlign$, \"^[\\- ]$\", \".defaultAlign$\", 1)\n"
"		.line$ = Get value... '.i' text\n"
"		# Expand variables, eg, 'praatVersion$'\n"
"		call expand_praat_variables '.line$'\n"
"		.line$ = expand_praat_variables.text$\n"
"				\n"
"		 # Scale font\n"
"		 .fontSize = floor(.fontSize*.fontSizeFactor)\n"
"		if not startsWith(.font$, \"!\")\n"
"			.font$ = extractWord$(.font$, \"\")\n"
"\n"
"			if .fontAlign$ = \"centre\"\n"
"				.xtext = .textmid\n"
"			elsif .fontAlign$ = \"right\"\n"
"				.xtext = .textright\n"
"			else\n"
"				.xtext = .textleft\n"
"			endif\n"
"			if .fontSize < 4\n"
"				.fontSize = 4\n"
"			endif\n"
"			# Clean up text\n"
"			demo Colour... '.fontColour$'\n"
"			demo Text special... '.xtext' '.fontAlign$' '.ytext' Bottom '.font$' '.fontSize' 0 '.line$'\n"
"			.ytext -= .dy\n"
"		elsif .font$ = \"!demo command\"\n"
"			demo Colour... '.fontColour$'\n"
"			.line$ = replace_regex$(.line$, \"\\{FONTSIZE\\$\\}\", \"'.fontSize'\", 0)\n"
"			.line$ = replace_regex$(.line$, \"\\{XTEXT\\$\\}\", \"'.xtext'\", 0)\n"
"			.line$ = replace_regex$(.line$, \"\\{YTEXT\\$\\}\", \"'.ytext'\", 0)\n"
"			.line$ = replace_regex$(.line$, \"\\{DY\\$\\}\", \"'.dy'\", 0)\n"
"			.line$ = replace_regex$(.line$, \"\\{[^\\}]*\\}\", \"\", 0)\n"
"			while index(.line$, \"[[\")\n"
"				.nextBracketOpen = index(.line$, \"[[\")\n"
"				.nextBracketOpen += 2\n"
"				.nextBracketClose = index(.line$, \"]]\")\n"
"				.bracketLength = .nextBracketClose - .nextBracketOpen\n"
"				.result$ = \"\"\n"
"				if .bracketLength > 0\n"
"					.expression$ = mid$(.line$, .nextBracketOpen, .bracketLength)\n"
"					.expression$ = replace_regex$(.expression$, \"\\s\", \"\", 0)\n"
"					if length(.expression$) > 0\n"
"						# Test expression for security, only allow explicitely defined functions\n"
"						.allowedStrings$ = \"e|pi|not|and|or|div|mod|abs|round|floor|ceiling\"\n"
"						.allowedStrings$ = .allowedStrings$ + \"|sqrt|min|max|imin|imax|sin|cos|tan|arcsin|arccos|arctan|arctan2|sinc|sincpi\"\n"
"						.allowedStrings$ = .allowedStrings$ + \"|exp|ln|log10|log2|sinh|cosh|tanh|arcsinh|arccosh|arctanh\"\n"
"						.allowedStrings$ = .allowedStrings$ + \"|sigmoid|invSigmoid|erf|erfc|randomUniform|randomInteger|randomGauss|randomPoisson\"\n"
"						.allowedStrings$ = .allowedStrings$ + \"|lnGamma|gaussP|gaussQ|invGaussQ|chiSquareP|chiSquareQ\"\n"
"						.allowedStrings$ = .allowedStrings$ + \"|invChiSquareP|invChiSquareQ|studentP|studentQ|invStudentP|invStudentQ\"\n"
"						.allowedStrings$ = .allowedStrings$ + \"|beta|besselI|besselK\"\n"
"						.testExpression$ = replace_regex$(.expression$, \"(^|\\W)('.allowedStrings$')(?=$|\\W)\", \"\\1\\3\", 0)\n"
"						.testExpression$ = replace_regex$(.testExpression$, \"[0-9\\.,\\-+/*^()<>= ]\", \"\", 0)\n"
"						if .testExpression$ = \"\"\n"
"							.calc = '.expression$'\n"
"							.result$ = \"'.calc'\"\n"
"						else\n"
"							.result$ = \"[[ ILLEGAL CONSTRUCT:  '.expression$' ]]\"\n"
"						endif\n"
"					endif\n"
"				endif\n"
"				\n"
"				# Replace expression by result\n"
"				.lastLeft = .nextBracketOpen - 3\n"
"				.newLine$ = left$(.line$, .lastLeft)  \n"
"				.newLine$ =  .newLine$ + .result$\n"
"				.numCopy = length(.line$) - .nextBracketClose - 1\n"
"				.newLine$ =  .newLine$ + right$(.line$, .numCopy)\n"
"				.line$ = .newLine$\n"
"			endwhile\n"
"			demo '.line$'\n"
"		endif\n"
"	endfor	\n"
"	demo 'defaultFontColor$'\n"
"	demoShow()	\n"
"	call set_font_size 'defaultFontSize'\n"
"	\n"
"	select '.backgroundText'\n"
"	Remove\n"
"endproc\n"
"\n"
"procedure convert_praat_to_utf8 .text$\n"
"	.text$ = replace_regex$(.text$, \"\\\\a\"\"\", \"\\xc3\\xa4\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\A\"\"\", \"\\xc3\\x84\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\o\"\"\", \"\\xc3\\xb6\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\O\"\"\", \"\\xc3\\x96\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\u\"\"\", \"\\xc3\\xbc\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\U\"\"\", \"\\xc3\\x9c\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\i\"\"\", \"\\xc3\\xaf\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\I\"\"\", \"\\xc3\\x8f\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\e\"\"\", \"\\xc3\\xab\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\E\"\"\", \"\\xc3\\x8b\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\y\"\"\", \"\\xc3\\xbf\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\e'\", \"\\xc3\\xa9\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\E'\", \"\\xc3\\x89\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\ss\", \"\\xc3\\x9f\", 0)\n"
"endproc\n"
"\n"
"procedure convert_praat_to_html .text$\n"
"	.text$ = replace_regex$(.text$, \"\\\\a\"\"\", \"\\&auml;\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\A\"\"\", \"\\&Auml;\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\o\"\"\", \"\\&ouml;\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\O\"\"\", \"\\&Ouml;\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\u\"\"\", \"\\&uuml;\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\U\"\"\", \"\\&Uuml;\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\i\"\"\", \"\\&iuml;\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\I\"\"\", \"\\&Iuml;\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\e\"\"\", \"\\&euml;\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\E\"\"\", \"\\&Euml;\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\y\"\"\", \"\\&yuml;\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\Y\"\"\", \"\\&Yuml;\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\e'\", \"\\&eacute;\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\E'\", \"\\&acute;\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\ss\", \"\\&szlig;\", 0)\n"
"	# Subscript __x_\n"
"	.text$ = replace_regex$(.text$, \"__([^_]+)_\", \"<sub>\\1</sub>\", 0)\n"
"	.text$ = replace_regex$(.text$, \"_(\\w+)\", \"<sub>\\1</sub>\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\_ \", \"_\", 0)\n"
"	# Supercript ^^x^\n"
"	.text$ = replace_regex$(.text$, \"\\^\\^([^\\^]+)\\^\", \"<sup>\\1</sup>\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\^(\\w+)\", \"<sup>\\1</sup>\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\\\^ \", \"\\^\", 0)\n"
"	# Italic %%x%\n"
"	.text$ = replace_regex$(.text$, \"%%([^%]+)%\", \"<i>\\1</i>\", 0)\n"
"	.text$ = replace_regex$(.text$, \"%(\\w+)\", \"<i>\\1</i>\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\% \", \"%\", 0)\n"
"	# Bold ##x#\n"
"	.text$ = replace_regex$(.text$, \"##([^#]+)#\", \"<b>\\1</b>\", 0)\n"
"	.text$ = replace_regex$(.text$, \"#(\\w+)\", \"<b>\\1</b>\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\# \", \"#\", 0)\n"
"endproc\n"
"\n"
"procedure convert_praat_to_latin1 .text$\n"
"	.text$ = replace_regex$(.text$, \"\\\\a\"\"\", \"\\xe4\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\A\"\"\", \"\\xc4\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\o\"\"\", \"\\xf6\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\O\"\"\", \"\\xd6\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\u\"\"\", \"\\xfc\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\U\"\"\", \"\\xdc\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\i\"\"\", \"\\xef\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\I\"\"\", \"\\xcf\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\e\"\"\", \"\\xeb\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\E\"\"\", \"\\xcb\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\y\"\"\", \"\\xff\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\Y\"\"\", \"Y\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\e'\", \"\\xe9\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\E'\", \"\\xc9\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\ss\", \"\\xdf\", 0)\n"
"	# Subscript __x_\n"
"	.text$ = replace_regex$(.text$, \"__([^_]+)_\", \"\\1\", 0)\n"
"	.text$ = replace_regex$(.text$, \"_(\\w+)\", \"\\1\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\_ \", \"_\", 0)\n"
"	# Supercript ^^x^\n"
"	.text$ = replace_regex$(.text$, \"\\^\\^([^\\^]+)\\^\", \"\\1\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\^(\\w+)\", \"\\1\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\\\^ \", \"\\^\", 0)\n"
"	# Italic %%x%\n"
"	.text$ = replace_regex$(.text$, \"%%([^%]+)%\", \"\\1\", 0)\n"
"	.text$ = replace_regex$(.text$, \"%(\\w+)\", \"\\1\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\% \", \"%\", 0)\n"
"	# Bold ##x#\n"
"	.text$ = replace_regex$(.text$, \"##([^#]+)#\", \"\\1\", 0)\n"
"	.text$ = replace_regex$(.text$, \"#(\\w+)\", \"\\1\", 0)\n"
"	.text$ = replace_regex$(.text$, \"\\\\# \", \"#\", 0)\n"
"endproc\n"
"\n"
"procedure protect_praat_special_characters .text$\n"
"	.text$ = replace_regex$(.text$, \"([_%^#])\", \"\\\\\\1 \", 0)\n"
"endproc\n"
"\n"
"\n"
"# Expand 'variable$' into the value of variable$.\n"
"# Eg, 'praatVersion$' becomes 5.1.45 or whatever is the current version\n"
"# Single quotes can be protected by \\'\n"
"procedure expand_praat_variables .text$\n"
"	if startsWith(.text$, \"\"\"\") and endsWith(.text$, \"\"\"\")\n"
"		.text$ = left$(.text$, length(.text$) - 1)\n"
"		.text$ = right$(.text$, length(.text$) - 1)\n"
"	endif\n"
"	if index(.text$, \"'\")\n"
"		.tempText$ = replace_regex$(.text$, \"(^|[^\\\\])'([\\w\\$\\.]+)'\", \"\\1\"\"+\\2+\"\"\", 0)\n"
"		.tempText$ = replace_regex$(.tempText$, \"[\\\\]'\", \"'\", 0)\n"
"		.tempText$ = \"\"\"\"+.tempText$+\"\"\"\"\n"
"		# Check whether all the variables actually exist. Ignore any variable that does not exist\n"
"		.checkVars$ = .tempText$\n"
"		while length(.checkVars$) > 0 and index(.checkVars$, \"+\")\n"
"			.start = index(.checkVars$, \"+\")\n"
"			.checkVars$ = right$(.checkVars$, length(.checkVars$) - .start)\n"
"			.end = index(.checkVars$, \"+\")\n"
"			if .end\n"
"				.variable$ = left$(.checkVars$, .end - 1)\n"
"				if not variableExists(.variable$)\n"
"					.tempText$ = replace$(.tempText$, \"\"\"+'.variable$'+\"\"\", \"'\"+.variable$+\"'\", 0)\n"
"				endif\n"
"				.checkVars$ = right$(.checkVars$, length(.checkVars$) - .end)\n"
"			else\n"
"				.checkVars$ = \"\"\n"
"			endif\n"
"		endwhile\n"
"		.text$ = '.tempText$'\n"
"	endif\n"
"endproc\n"
"\n"
"# Extract language specific prompts\n"
"procedure getLanguageTexts .table$ .label$\n"
"	# Get Cancel text\n"
"	call get_feedback_text 'config.language$' Cancel\n"
"	call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"	.cancelText$ = convert_praat_to_latin1.text$\n"
"	# Get continue text\n"
"	call get_feedback_text 'config.language$' Continue\n"
"	call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"	.continueText$ = convert_praat_to_latin1.text$\n"
"	# Get button text\n"
"	call findLabel '.table$' '.label$'\n"
"	.row = findLabel.row\n"
"	select Table '.table$'\n"
"	.text$ = Get value... '.row' Text\n"
"	# Get help text\n"
"	call findLabel '.table$' '.label$'\n"
"	.row = findLabel.row\n"
"	select Table '.table$'\n"
"	.helpText$ = Get value... '.row' Helptext\n"
"	call convert_praat_to_latin1 '.helpText$'\n"
"	.helpText$ = convert_praat_to_latin1.text$\n"
"	# Get feedback text\n"
"	.inputText$ = Get value... '.row' Text\n"
"	call convert_praat_to_latin1 '.inputText$'\n"
"	.inputText$ = convert_praat_to_latin1.text$\n"
"	.inputText$ = replace_regex$(.inputText$, \"\\W+\", \"\", 0)\n"
"endproc\n"
"\n"
"# Get a time stamp in normalized format\n"
"procedure getTimeStamp\n"
"	.currentDateTime$ = date$()\n"
"	.string$ = replace_regex$(.currentDateTime$, \"[A-Z][a-z]+\\s+([A-Z][a-z]+)\\s+(\\d+)\\s+(\\d+)\\W(\\d+)\\W(\\d+)\\s+(\\d+)$\", \"\\6-\\1-\\2T\\3-\\4-\\5\", 0)\n"
"endproc\n"
"\n"
"procedure getButtonText .table$ .label$\n"
"	call getLanguageTexts '.table$' '.label$'\n"
"	.buttonText$ = replace_regex$(getLanguageTexts.text$, \"!\\d*!\", \"\", 0)\n"
"	call convert_praat_to_utf8 '.buttonText$'\n"
"	.utf8$ = convert_praat_to_utf8.text$\n"
"	call convert_praat_to_latin1 '.buttonText$'\n"
"	.latin1$ = convert_praat_to_latin1.text$\n"
"	call convert_praat_to_html '.buttonText$'\n"
"	.html$ = convert_praat_to_html.text$\n"
"endproc\n"
"\n"
"procedure reset_analysis\n"
"	.closed = 0\n"
"    if te.openSound > 0\n"
"		.closed = 1\n"
"        select te.openSound\n"
"        # If this file should be saved, do it now!\n"
"		if te.saveAudio > 0\n"
"			if config.speakerDataTable > 0 and config.speakerData$ <> \"\"\n"
"				select config.speakerDataTable\n"
"				Save as tab-separated file... 'config.speakerData$'\n"
"			endif\n"
"			select te.openSound\n"
"			.tmpPartSoundID = Extract part... 'selectedStartTime' 'selectedEndTime' rectangular 1.0 true\n"
"			Save as WAV file... 'te.currentFileName$'\n"
"			select te.openSound\n"
"		endif\n"
"		if te.pitch > 0\n"
"			plus te.pitch\n"
"		endif\n"
"		if pitchTierName$ != \"\"\n"
"			plus PitchTier 'pitchTierName$'\n"
"		endif\n"
"		if intensityName$ != \"\"\n"
"			plus Intensity 'intensityName$'\n"
"		endif\n"
" 		if te.harmonicity > 0\n"
"			plus te.harmonicity\n"
"		endif\n"
" 		if gneName$ <> \"\"\n"
"			plus Sound 'gneName$'\n"
"		endif\n"
" 		if ltasName$ <> \"\"\n"
"			plus Ltas 'ltasName$'\n"
"		endif\n"
" 		if pointProcessName$ <> \"\"\n"
"			plus PointProcess 'pointProcessName$'\n"
"		endif\n"
"		if te.voicingTextGrid > 0\n"
"			plus 'te.voicingTextGrid'\n"
"		endif\n"
" 		if te.spectrogram > 0\n"
"			plus 'te.spectrogram'\n"
"			plus 'te.formant'\n"
"		endif\n"
"		Remove\n"
"		\n"
"		te.openSound = 0\n"
"		te.pitch = 0\n"
"		te.spectrogram = 0\n"
"		te.formant = 0\n"
"		te.harmonicity = 0\n"
"		te.gneSound = 0\n"
"		selectedEndTime = 0\n"
"		selectedStartTime = 0\n"
"		currentStartTime = 0\n"
"		currentEndTime = 0\n"
"		\n"
"        recordedSound$ = \"\"\n"
"        currentSoundName$ = \"\"\n"
"		call get_speakerInfo 0\n"
"        \n"
"		pitchName$ = \"\"\n"
"		pitchTierName$ = \"\"\n"
"		ltasName$ = \"\"\n"
"		intensityName$ = \"\"\n"
"		spectrogramName$ = \"\"\n"
"		formantName$ = \"\"\n"
"		pointProcessName$ = \"\"\n"
"		te.voicingTextGrid = -1\n"
"		gneName$ = \"\"\n"
"		harmonicityName$ = \"\"\n"
"		te.currentFileName$ = \"\"\n"
"		\n"
"		maxTimeIntensity = 0\n"
"		\n"
"		call reset_sourcemanipulations\n"
"    endif\n"
"endproc\n"
"\n"
"# A table error, can be insiduously caused by an outdate preferences file!\n"
"procedure emergency_table_exit .message$\n"
"	# If you come here as a user, your preferences file is borked\n"
"	if preferencesAppFile$ <> \"\" and fileReadable(preferencesAppFile$)\n"
"		deleteFile(preferencesAppFile$)\n"
"	endif\n"
"	# Put out message\n"
"	call get_feedback_text 'config.language$' Cancel\n"
"	call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"	.cancelText$ = convert_praat_to_latin1.text$\n"
"	beginPause: \"Fatal Error\"\n"
"	comment: .message$\n"
"	endPause: .cancelText$, 1\n"
"	exit '.message$'\n"
"endproc\n"
"\n"
"procedure loadLanguageTable .tableName$ .language$\n"
"	call loadTable '.tableName$'\n"
"    .table$ = selected$(\"Table\")\n"
"    .tableID = selected(\"Table\")\n"
"    Append column... Text\n"
"    Append column... Key\n"
"    Append column... Helptext\n"
"    .numLabels = Get number of rows\n"
"    call check_and_load_language '.tableName$' '.language$'\n"
"    .tableLang$ = selected$(\"Table\")\n"
"    .tableLangID = selected(\"Table\")\n"
"    for .row to .numLabels\n"
"		select .tableID\n"
"		.label$ = Get value... '.row' Label\n"
"        call findLabel '.tableLang$' '.label$'\n"
"	    if findLabel.row > 0\n"
"            select .tableLangID\n"
"        	.valueText$ = Get value... 'findLabel.row' Text\n"
"        	.valueKey$ = Get value... 'findLabel.row' Key\n"
"        	.valueHelp$ = Get value... 'findLabel.row' Helptext\n"
"        	select .tableID\n"
"        	Set string value... '.row' Text '.valueText$'\n"
"        	Set string value... '.row' Key '.valueKey$'\n"
"        	Set string value... '.row' Helptext '.valueHelp$'\n"
"		elsif index(.label$, \"_\")\n"
"			# Load alternative language table\n"
"			.startChar = rindex(.label$, \"_\")\n"
"			.otherLanguage$ = right$(.label$, length(.label$) - .startChar)\n"
"			call check_and_load_language '.tableName$' '.otherLanguage$'\n"
"    		.otherLang$ = selected$(\"Table\")\n"
"    		.otherLangID = selected(\"Table\")\n"
"        	call findLabel '.otherLang$' '.label$'\n"
"	    	if findLabel.row > 0\n"
"            	select .otherLangID\n"
"        		.valueText$ = Get value... 'findLabel.row' Text\n"
"        		.valueKey$ = Get value... 'findLabel.row' Key\n"
"        		.valueHelp$ = Get value... 'findLabel.row' Helptext\n"
"        		select .tableID\n"
"        		Set string value... '.row' Text '.valueText$'\n"
"        		Set string value... '.row' Key '.valueKey$'\n"
"        		Set string value... '.row' Helptext '.valueHelp$'\n"
"        	else\n"
"            	call emergency_table_exit Cannot find Label: '.otherLang$' '.label$'\n"
"        	endif\n"
"			select .otherLangID\n"
"			Remove\n"
"        else\n"
"            call emergency_table_exit Cannot find Label: '.tableLang$' '.label$'\n"
"        endif\n"
"    endfor\n"
"    select .tableLangID\n"
"    Remove\n"
"endproc\n"
"\n"
"# Emulate mkdir -p, use /\n"
"procedure extend_directory_path .root$ .path$\n"
"	.root$ = replace_regex$(.root$, \"\"\"\", \"\", 0)\n"
"	.path$ = replace_regex$(.path$, \"\"\"\", \"\", 0)\n"
"\n"
"	if startsWith(.path$, .root$)\n"
"		.path$ = replace_regex$(.path$, \"^'.root$'/*\", \"\", 0)\n"
"	endif\n"
"\n"
"	while .path$ <> \"\" and index_regex(.path$, \"[^ \\t\\n\\-\\?\\!]\")\n"
"		.nextDir$ = replace_regex$(.path$, \"^([^/]*)(/(.*)|$)\", \"\\1\", 0)\n"
"		.path$ = replace_regex$(.path$, \"^([^/]*)(/(.*)|$)\", \"\\3\", 0)\n"
"		# Disallow things containing only NOPE characters\n"
"		if .nextDir$ <> \"\" and index_regex(.nextDir$, \"[^ \\t\\n\\-\\?\\!]\")\n"
"			.root$ = .root$+\"/\"+.nextDir$\n"
"			createDirectory(.root$)\n"
"		endif\n"
"	endwhile\n"
"endproc\n"
"\n"
"# Read a list of audio files and concatenate them\n"
"procedure readAudioList .filename$\n"
"	.start = index(.filename$, \"{\")\n"
"	.end = index(.filename$, \"}\")\n"
"	.length = length(.filename$)\n"
"	.prev$ = left$(.filename$, .start - 1)\n"
"	.post$ = right$(.filename$, .length - .end)\n"
"	.inside$ = mid$(.filename$, .start + 1, .end - .start - 1)\n"
"	.n = 0\n"
"	while length(.inside$) > 0\n"
"		.stretch = index(.inside$, \",\") - 1\n"
"		if .stretch < 0\n"
"			.stretch = length(.inside$)\n"
"		endif\n"
"		.mid$ = left$(.inside$, .stretch)\n"
"		if length(.inside$) - .stretch - 1 > 0\n"
"			.inside$ = right$(.inside$, length(.inside$) - .stretch - 1)\n"
"		else\n"
"			.inside$ = \"\"\n"
"		endif\n"
"		# Read audio file\n"
"		if index_regex(.prev$+.mid$+.post$, \"(?i\\.(wav|au|snd|aif[fc]?|flac|mp3))$\") > 0 and fileReadable(.prev$+.mid$+.post$)\n"
"			.n += 1\n"
"			.tmp = Read from file: .prev$+.mid$+.post$\n"
"			# Check result and clean up if wrong\n"
"			if .tmp = undefined or .tmp <= 0\n"
"				.audio[.n] = -1\n"
"				.n -= 1\n"
"			else\n"
"				.fullName$ = selected$ ()\n"
"				.type$ = extractWord$(.fullName$, \"\")\n"
"				if .type$ <> \"Sound\"\n"
"					Remove\n"
"					.audio[.n] = -1\n"
"					.n -= 1\n"
"				else\n"
"					selectObject: .tmp\n"
"					.audio[.n] = Resample: te.defaultSampleFreq, 50\n"
"					selectObject: .tmp\n"
"					Remove\n"
"				endif\n"
"			endif\n"
"		\n"
"		endif\n"
"	endwhile\n"
"	selectObject: .audio[1]\n"
"	for .i from 2 to .n\n"
"		plusObject: .audio[.i]\n"
"	endfor\n"
"	.audioID = Concatenate\n"
"	selectObject: .audio[1]\n"
"	for .i from 2 to .n\n"
"		plusObject: .audio[.i]\n"
"	endfor\n"
"	Remove\n"
"	selectObject: .audioID\n"
"endproc\n"
"\n"
"# Safely read an audio file\n"
"procedure readAudio .filename$\n"
"	.audioID = -1\n"
"	# Check existence of (first) audiofile\n"
"	.testFile$ = replace_regex$(.filename$, \"\\{([^,]+)[^\\}]*\\}\", \"\\1\", 0)\n"
"\n"
"	if .filename$ <> \"\" and fileReadable(.testFile$) and index_regex(.testFile$, \"(?i\\.(wav|au|snd|aif[fc]?|flac|mp3))$\") > 0\n"
"		# Do some magic, concatenate audio inside {} brackects\n"
"		if index(.filename$, \"{\")\n"
"			call readAudioList '.filename$'\n"
"			.audioID = readAudioList.audioID\n"
"		else\n"
"			.audioID = nocheck Read from file... '.filename$'\n"
"		endif\n"
"		if .audioID = undefined or .audioID <= 0\n"
"			.audioID = -1\n"
"		else\n"
"			.fullName$ = selected$ ()\n"
"			.type$ = extractWord$(.fullName$, \"\")\n"
"			if .type$ <> \"Sound\"\n"
"				Remove\n"
"				.audioID = -1\n"
"			endif\n"
"		endif\n"
"		\n"
"		# No audio file has been read\n"
"		if .audioID <= 0\n"
"			call get_feedback_text 'config.language$' BrokenTable\n"
"			call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"			.brokenTableText$ = convert_praat_to_latin1.text$\n"
"			call getLanguageTexts Config SpeakerData\n"
"			.inputText$ = getLanguageTexts.inputText$\n"
"			beginPause(\".inputText$\")\n"
"				comment(\"'getLanguageTexts.helpText$': '.brokenTableText$'\")\n"
"			clicked = endPause (\"'getLanguageTexts.continueText$'\", 1, 1)\n"
"		endif\n"
"	elsif .filename$ <> \"\" and index_regex(.filename$, \"[^0-9]\") <= 0\n"
"		select '.filename$'\n"
"		.fullName$ = selected$ ()\n"
"		.type$ = extractWord$(.fullName$, \"\")\n"
"		.name$ = extractWord$(.fullName$, \" \")\n"
"		if .type$ = \"Sound\"\n"
"			.audioID = Copy: .name$\n"
"		endif\n"
"	endif\n"
"endproc\n"
"\n"
"# Safely read a table\n"
"procedure readTable .filename$\n"
"	.tableID = -1\n"
"	if .filename$ <> \"\" and fileReadable(.filename$) and index_regex(.filename$, \"(?i\\.(tsv|table|csv))$\") > 0\n"
"		.tableID = nocheck Read from file... '.filename$'\n"
"		if .tableID = undefined or .tableID <= 0\n"
"			.tableID = -1\n"
"		else\n"
"			.fullName$ = selected$ ()\n"
"			.type$ = extractWord$(.fullName$, \"\")\n"
"			if .type$ <> \"Table\"\n"
"				Remove\n"
"				.tableID = -1\n"
"			endif\n"
"		endif\n"
"		\n"
"		# No table has been read\n"
"		if .tableID <= 0\n"
"			call get_feedback_text 'config.language$' BrokenTable\n"
"			call convert_praat_to_latin1 'get_feedback_text.text$'\n"
"			.brokenTableText$ = convert_praat_to_latin1.text$\n"
"			call getLanguageTexts Config SpeakerData\n"
"			.inputText$ = getLanguageTexts.inputText$\n"
"			beginPause(\".inputText$\")\n"
"				comment(\"'getLanguageTexts.helpText$': '.brokenTableText$'\")\n"
"			clicked = endPause (\"'getLanguageTexts.continueText$'\", 1, 1)\n"
"		endif\n"
"	endif\n"
"endproc\n"
"\n"
"########################################################################\n"
"# \n"
"# Convert signal source\n"
"# \n"
"########################################################################\n"
"procedure reset_sourcemanipulations\n"
"	if te.originalRecording > 0\n"
"		select te.originalRecording\n"
"		Remove\n"
"		te.originalRecording = 0\n"
"	endif\n"
"	if te.source > 0\n"
"		select te.source\n"
"		Remove\n"
"		te.source = 0\n"
"	endif\n"
"	config.source$ = \"Original\"\n"
"endproc\n"
"\n"
"procedure copy_source_into_target .prosody .articulationrate\n"
"	if te.originalRecording <= 0\n"
"		select te.openSound\n"
"		te.originalRecording = Copy: \"OriginalSound\"\n"
"	endif\n"
"	.originalRecording = te.originalRecording\n"
"	te.originalRecording = -1\n"
"	.source = te.source\n"
"	te.source = -1\n"
"	# Reset everything and load the file again\n"
"	@getOpenFile: \"'.originalRecording'\"\n"
"	te.originalRecording = .originalRecording\n"
"	te.source = .source\n"
"	@resynthesize_with_TE_source: .prosody, .articulationrate, te.openSound, te.source\n"
"	select te.openSound\n"
"	Remove\n"
"	te.openSound = resynthesize_with_TE_source.newSound\n"
"	config.source$ = \"Change\"\n"
"endproc\n"
;

